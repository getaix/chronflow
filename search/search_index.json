{"config":{"lang":["zh","en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6982\u89c8","text":"<p>chronflow \u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684 Python \u5f02\u6b65\u5b9a\u65f6\u4efb\u52a1\u8c03\u5ea6\u5e93\uff0c\u4e13\u4e3a Python 3.11+ \u8bbe\u8ba1\u3002\u5b83\u63d0\u4f9b\u4e86\u7b80\u6d01\u7684\u88c5\u9970\u5668 API\u3001\u591a\u79cd\u961f\u5217\u540e\u7aef\u652f\u6301\u3001\u667a\u80fd\u91cd\u8bd5\u673a\u5236\u4ee5\u53ca\u5b8c\u6574\u7684\u7c7b\u578b\u5b89\u5168\u4fdd\u969c\u3002</p> <ul> <li>\u57fa\u4e8e asyncio \u7684\u539f\u751f\u5f02\u6b65\u652f\u6301\uff0c\u9ad8\u5e76\u53d1\u3001\u4f4e\u5ef6\u8fdf</li> <li>\u652f\u6301\u79d2\u7ea7 Cron \u8868\u8fbe\u5f0f\u5b9a\u65f6\u4efb\u52a1</li> <li>\u53ef\u63d2\u62d4\u7684\u961f\u5217\u540e\u7aef\uff1a\u5185\u5b58\u3001SQLite\u3001Redis\u3001RabbitMQ</li> <li>\u667a\u80fd\u91cd\u8bd5\u673a\u5236\uff0c\u652f\u6301\u6307\u6570\u9000\u907f\u3001\u56fa\u5b9a\u95f4\u9694\u7b49\u7b56\u7565</li> <li>\u5b8c\u6574\u7684\u7c7b\u578b\u63d0\u793a\uff0cIDE \u53cb\u597d</li> <li>\u96f6\u4f9d\u8d56\u542f\u52a8\uff0c\u53ef\u9009\u5916\u90e8\u670d\u52a1\u652f\u6301</li> </ul> <p>\u73af\u5883\u8981\u6c42\uff1aPython &gt;= 3.11</p> <p>\u66f4\u591a\u5feb\u901f\u793a\u4f8b\u53ef\u53c2\u8003\u4ed3\u5e93\u4e2d\u7684 <code>examples/</code> \u76ee\u5f55\u3002</p>"},{"location":"#_2","title":"\u6838\u5fc3\u7279\u6027","text":""},{"location":"#_3","title":"\u9ad8\u6027\u80fd\u5f02\u6b65","text":"<p>\u57fa\u4e8e Python asyncio\uff0c\u539f\u751f\u5f02\u6b65\u652f\u6301\uff0c\u65e0\u540c\u6b65\u8f6c\u5f02\u6b65\u5f00\u9500\u3002\u652f\u6301\u9ad8\u5e76\u53d1\u4efb\u52a1\u6267\u884c\uff0c\u541e\u5410\u91cf\u53ef\u8fbe 10000+ tasks/s\u3002</p>"},{"location":"#_4","title":"\u79d2\u7ea7\u7cbe\u5ea6","text":"<p>\u652f\u6301\u6807\u51c6 Cron \u8868\u8fbe\u5f0f\u5e76\u6269\u5c55\u5230\u79d2\u7ea7\u7cbe\u5ea6\uff0c\u6ee1\u8db3\u5404\u79cd\u5b9a\u65f6\u4efb\u52a1\u9700\u6c42\u3002</p>"},{"location":"#_5","title":"\u591a\u79cd\u540e\u7aef","text":"<ul> <li>Memory - \u96f6\u4f9d\u8d56\uff0c\u5f00\u7bb1\u5373\u7528</li> <li>SQLite - \u672c\u5730\u6301\u4e45\u5316\uff0c\u91cd\u542f\u4e0d\u4e22\u4efb\u52a1</li> <li>Redis - \u5206\u5e03\u5f0f\u90e8\u7f72\uff0c\u9ad8\u6027\u80fd</li> <li>RabbitMQ - \u9ad8\u53ef\u9760\u6027\u6d88\u606f\u961f\u5217</li> </ul>"},{"location":"#api","title":"\u7b80\u6d01 API","text":"<p>\u88c5\u9970\u5668\u6a21\u5f0f\uff0c\u4e00\u884c\u4ee3\u7801\u5b9a\u4e49\u4efb\u52a1\uff1a</p> <pre><code>@cron(\"*/5 * * * * *\")  # \u6bcf5\u79d2\u6267\u884c\nasync def my_task():\n    print(\"\u4efb\u52a1\u6267\u884c\u4e2d...\")\n</code></pre>"},{"location":"#_6","title":"\u667a\u80fd\u91cd\u8bd5","text":"<p>\u5185\u7f6e\u57fa\u4e8e tenacity \u7684\u91cd\u8bd5\u673a\u5236\uff0c\u652f\u6301\u591a\u79cd\u7b56\u7565\uff1a - \u6307\u6570\u9000\u907f\uff08\u9002\u5408\u7f51\u7edc\u8bf7\u6c42\uff09 - \u56fa\u5b9a\u95f4\u9694\uff08\u9002\u5408\u8f6e\u8be2\uff09 - \u968f\u673a\u95f4\u9694\uff08\u907f\u514d\u96ea\u5d29\uff09</p>"},{"location":"#_7","title":"\u7c7b\u578b\u5b89\u5168","text":"<p>100% \u7c7b\u578b\u63d0\u793a\u8986\u76d6\uff0c\u914d\u5408 IDE \u63d0\u4f9b\u5b8c\u6574\u7684\u4ee3\u7801\u8865\u5168\u548c\u7c7b\u578b\u68c0\u67e5\u3002</p>"},{"location":"#_8","title":"\u5feb\u901f\u5b89\u88c5","text":"<pre><code># \u57fa\u7840\u5b89\u88c5\uff08\u5185\u5b58/SQLite \u540e\u7aef\uff09\npip install chronflow\n\n# \u4f7f\u7528 Redis\npip install chronflow[redis]\n\n# \u4f7f\u7528 RabbitMQ\npip install chronflow[rabbitmq]\n\n# \u5b8c\u6574\u5b89\u88c5\uff08\u6240\u6709\u540e\u7aef\uff09\npip install chronflow[all]\n</code></pre>"},{"location":"#5","title":"5 \u5206\u949f\u4e0a\u624b","text":"<pre><code>import asyncio\nfrom chronflow import Scheduler, cron, interval\n\nscheduler = Scheduler()\n\n@cron(\"*/5 * * * * *\")  # \u6bcf5\u79d2\nasync def health_check():\n    print(\"\u5065\u5eb7\u68c0\u67e5...\")\n\n@interval(60)  # \u6bcf60\u79d2\nasync def sync_data():\n    print(\"\u540c\u6b65\u6570\u636e...\")\n\nasync def main():\n    await scheduler.start()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>\u66f4\u591a\u8be6\u7ec6\u793a\u4f8b\u8bf7\u67e5\u770b \u5feb\u901f\u5f00\u59cb \u6587\u6863\u3002</p>"},{"location":"#chronflow","title":"\u4e3a\u4ec0\u4e48\u9009\u62e9 chronflow\uff1f","text":""},{"location":"#vs-celery","title":"vs Celery","text":"<ul> <li>\u2705 \u66f4\u8f7b\u91cf - \u65e0\u9700 Redis/RabbitMQ \u5373\u53ef\u8fd0\u884c</li> <li>\u2705 \u66f4\u7b80\u5355 - \u88c5\u9970\u5668\u5373\u7528\uff0c\u65e0\u9700\u989d\u5916\u914d\u7f6e</li> <li>\u2705 \u66f4\u5feb\u901f - \u7eaf asyncio\uff0c\u65e0\u8fdb\u7a0b\u5f00\u9500</li> <li>\u2705 \u66f4\u73b0\u4ee3 - Python 3.11+ \u65b0\u7279\u6027</li> </ul>"},{"location":"#vs-apscheduler","title":"vs APScheduler","text":"<ul> <li>\u2705 \u66f4\u9ad8\u6027\u80fd - \u539f\u751f\u5f02\u6b65\uff0c\u4e0d\u662f\u540c\u6b65\u8f6c\u5f02\u6b65</li> <li>\u2705 \u66f4\u53ef\u9760 - \u4f18\u5316\u7684\u5185\u5b58\u7ba1\u7406</li> <li>\u2705 \u66f4\u7075\u6d3b - \u53ef\u63d2\u62d4\u540e\u7aef</li> <li>\u2705 \u66f4\u597d\u7684\u53ef\u89c2\u6d4b\u6027 - \u5185\u7f6e\u6307\u6807\u548c\u76d1\u63a7</li> </ul>"},{"location":"#_9","title":"\u8bb8\u53ef\u8bc1","text":"<p>MIT License</p>"},{"location":"changelog/","title":"\u66f4\u65b0\u65e5\u5fd7","text":"<p>\u672c\u6587\u6863\u8bb0\u5f55 chronflow \u7684\u6240\u6709\u91cd\u8981\u53d8\u66f4\u3002</p> <p>\u683c\u5f0f\u57fa\u4e8e Keep a Changelog, \u7248\u672c\u53f7\u9075\u5faa \u8bed\u4e49\u5316\u7248\u672c\u3002</p>"},{"location":"changelog/#010-2025-10-22","title":"[0.1.0] - 2025-10-22","text":""},{"location":"changelog/#_2","title":"\u65b0\u589e \u2728","text":""},{"location":"changelog/#_3","title":"\u53ef\u63d2\u62d4\u65e5\u5fd7\u7cfb\u7edf","text":"<ul> <li>\u6dfb\u52a0\u65e5\u5fd7\u9002\u914d\u5668\u63a5\u53e3 <code>LoggerAdapter</code></li> <li>\u5185\u7f6e\u652f\u6301 structlog\u3001loguru\u3001Python \u6807\u51c6\u5e93 logging</li> <li>\u53ef\u4ee5\u5b8c\u5168\u81ea\u5b9a\u4e49\u65e5\u5fd7\u5b9e\u73b0</li> <li>\u652f\u6301\u7981\u7528\u65e5\u5fd7\u8f93\u51fa (<code>NoOpAdapter</code>)</li> <li>structlog \u4ece\u6838\u5fc3\u4f9d\u8d56\u53d8\u4e3a\u53ef\u9009\u4f9d\u8d56</li> </ul>"},{"location":"changelog/#_4","title":"\u589e\u5f3a\u7684\u76d1\u63a7\u529f\u80fd","text":"<ul> <li><code>list_tasks()</code> - \u83b7\u53d6\u6240\u6709\u4efb\u52a1\u8be6\u7ec6\u4fe1\u606f\u5217\u8868</li> <li><code>get_task_count()</code> - \u83b7\u53d6\u5404\u72b6\u6001\u4efb\u52a1\u6570\u91cf\u7edf\u8ba1</li> <li><code>get_task_by_status()</code> - \u6309\u72b6\u6001\u7b5b\u9009\u4efb\u52a1</li> <li><code>get_task_by_tag()</code> - \u6309\u6807\u7b7e\u7b5b\u9009\u4efb\u52a1</li> <li><code>pause_task()</code> - \u6682\u505c\u6307\u5b9a\u4efb\u52a1</li> <li><code>resume_task()</code> - \u6062\u590d\u6307\u5b9a\u4efb\u52a1</li> <li>\u4efb\u52a1\u5217\u8868\u5305\u542b\u6210\u529f\u7387\u3001\u5e73\u5747\u6267\u884c\u65f6\u95f4\u7b49\u6307\u6807</li> </ul>"},{"location":"changelog/#_5","title":"\u65b0\u7684\u4fbf\u6377\u88c5\u9970\u5668","text":"<ul> <li><code>@every()</code> - \u66f4\u76f4\u89c2\u7684\u95f4\u9694\u4efb\u52a1 (<code>@every(minutes=30)</code>)</li> <li><code>@hourly()</code> - \u6bcf\u5c0f\u65f6\u6267\u884c (<code>@hourly(minute=30)</code>)</li> <li><code>@daily()</code> - \u6bcf\u5929\u6267\u884c (<code>@daily(hour=9, minute=30)</code>)</li> <li><code>@weekly()</code> - \u6bcf\u5468\u6267\u884c (<code>@weekly(day=1, hour=10)</code>)</li> <li><code>@monthly()</code> - \u6bcf\u6708\u6267\u884c (<code>@monthly(day=1)</code>)</li> </ul>"},{"location":"changelog/#python","title":"Python \u7248\u672c\u652f\u6301","text":"<ul> <li>\u6dfb\u52a0 Python 3.13 \u5b98\u65b9\u652f\u6301</li> <li>\u7ee7\u7eed\u652f\u6301 Python 3.11 \u548c 3.12</li> </ul>"},{"location":"changelog/#_6","title":"\u6539\u8fdb \ud83d\udd27","text":"<ul> <li>\u4f9d\u8d56\u4f18\u5316: structlog \u53d8\u4e3a\u53ef\u9009\u4f9d\u8d56,\u51cf\u5c11\u9ed8\u8ba4\u5b89\u88c5\u4f53\u79ef</li> <li>\u7c7b\u578b\u63d0\u793a: \u6240\u6709\u65b0\u529f\u80fd\u90fd\u6709\u5b8c\u6574\u7684\u7c7b\u578b\u63d0\u793a</li> <li>\u6587\u6863: \u6dfb\u52a0\u8be6\u7ec6\u7684\u65b0\u529f\u80fd\u6587\u6863\u548c\u793a\u4f8b</li> <li>\u65e5\u5fd7\u8f93\u51fa: \u4f18\u5316\u65e5\u5fd7\u683c\u5f0f,\u652f\u6301\u7ed3\u6784\u5316\u65e5\u5fd7</li> </ul>"},{"location":"changelog/#_7","title":"\u793a\u4f8b","text":"<ul> <li>\u6dfb\u52a0 <code>examples/advanced_features.py</code> - \u9ad8\u7ea7\u529f\u80fd\u6f14\u793a</li> <li>\u6dfb\u52a0 <code>examples/custom_logger.py</code> - \u81ea\u5b9a\u4e49\u65e5\u5fd7\u6f14\u793a</li> </ul>"},{"location":"changelog/#_8","title":"\u6280\u672f\u7ec6\u8282","text":""},{"location":"changelog/#_9","title":"\u65e5\u5fd7\u7cfb\u7edf\u67b6\u6784","text":"<pre><code>LoggerAdapter (\u62bd\u8c61\u57fa\u7c7b)\n    \u251c\u2500\u2500 StructlogAdapter (\u9ed8\u8ba4,\u53ef\u9009)\n    \u251c\u2500\u2500 LoguruAdapter (\u53ef\u9009)\n    \u251c\u2500\u2500 StdlibAdapter (\u5185\u7f6e)\n    \u2514\u2500\u2500 NoOpAdapter (\u5185\u7f6e)\n</code></pre>"},{"location":"changelog/#_10","title":"\u65b0\u7684\u88c5\u9970\u5668\u6620\u5c04","text":"\u88c5\u9970\u5668 \u7b49\u4ef7 Cron \u8bf4\u660e <code>@hourly()</code> <code>0 0 * * * *</code> \u6bcf\u5c0f\u65f6\u6574\u70b9 <code>@daily()</code> <code>0 0 0 * * *</code> \u6bcf\u5929 0:00 <code>@weekly()</code> <code>0 0 0 * * 0</code> \u6bcf\u5468\u65e5 0:00 <code>@monthly()</code> <code>0 0 0 1 * *</code> \u6bcf\u6708 1 \u53f7 0:00"},{"location":"changelog/#_11","title":"\u7834\u574f\u6027\u53d8\u66f4 \u26a0\ufe0f","text":"<p>\u65e0\u3002\u6b64\u7248\u672c\u5b8c\u5168\u5411\u540e\u517c\u5bb9\u3002</p>"},{"location":"changelog/#_12","title":"\u5df2\u77e5\u95ee\u9898","text":"<p>\u65e0\u3002</p>"},{"location":"changelog/#_13","title":"\u5b89\u5168\u6027","text":"<p>\u65e0\u5b89\u5168\u76f8\u5173\u66f4\u65b0\u3002</p>"},{"location":"changelog/#_14","title":"[\u672a\u53d1\u5e03]","text":""},{"location":"changelog/#_15","title":"\u8ba1\u5212\u4e2d\u7684\u529f\u80fd","text":"<ul> <li>[ ] Web \u7ba1\u7406\u754c\u9762</li> <li>[ ] Prometheus \u6307\u6807\u5bfc\u51fa</li> <li>[ ] \u4efb\u52a1\u4f9d\u8d56\u5173\u7cfb</li> <li>[ ] \u52a8\u6001\u6dfb\u52a0/\u5220\u9664\u4efb\u52a1</li> <li>[ ] \u5206\u5e03\u5f0f\u9501\u652f\u6301</li> <li>[ ] PostgreSQL \u540e\u7aef\u652f\u6301</li> </ul>"},{"location":"changelog/#_16","title":"\u7248\u672c\u8bf4\u660e","text":""},{"location":"changelog/#010-beta","title":"[0.1.0] - \u9996\u4e2a Beta \u7248\u672c","text":"<p>\u8fd9\u662f chronflow \u7684\u9996\u4e2a\u516c\u5f00 Beta \u7248\u672c,\u5305\u542b\u4ee5\u4e0b\u6838\u5fc3\u529f\u80fd:</p> <p>\u6838\u5fc3\u7279\u6027: - \u9ad8\u6027\u80fd\u5f02\u6b65\u8c03\u5ea6\u5668 - \u591a\u79cd\u961f\u5217\u540e\u7aef(\u5185\u5b58/SQLite/Redis/RabbitMQ) - \u667a\u80fd\u91cd\u8bd5\u673a\u5236 - \u79d2\u7ea7 Cron \u8868\u8fbe\u5f0f\u652f\u6301 - \u88c5\u9970\u5668 API - \u5b8c\u6574\u7684\u7c7b\u578b\u63d0\u793a - \u53ef\u63d2\u62d4\u65e5\u5fd7\u7cfb\u7edf - \u4e30\u5bcc\u7684\u76d1\u63a7\u529f\u80fd</p> <p>\u961f\u5217\u540e\u7aef: - MemoryBackend - \u5185\u5b58\u961f\u5217,\u96f6\u4f9d\u8d56 - SQLiteBackend - \u672c\u5730\u6301\u4e45\u5316 - RedisBackend - \u5206\u5e03\u5f0f\u961f\u5217 - RabbitMQBackend - \u9ad8\u53ef\u9760\u6027\u6d88\u606f\u961f\u5217</p> <p>\u88c5\u9970\u5668: - <code>@scheduled</code> - \u901a\u7528\u8c03\u5ea6\u5668 - <code>@cron</code> - Cron \u8868\u8fbe\u5f0f - <code>@interval</code> - \u56fa\u5b9a\u95f4\u9694 - <code>@once</code> - \u4e00\u6b21\u6027\u4efb\u52a1 - <code>@every</code> - \u76f4\u89c2\u95f4\u9694 - <code>@hourly</code> - \u6bcf\u5c0f\u65f6 - <code>@daily</code> - \u6bcf\u5929 - <code>@weekly</code> - \u6bcf\u5468 - <code>@monthly</code> - \u6bcf\u6708</p> <p>\u76d1\u63a7\u529f\u80fd: - \u4efb\u52a1\u5217\u8868\u67e5\u8be2 - \u72b6\u6001\u7edf\u8ba1 - \u6807\u7b7e\u7b5b\u9009 - \u4efb\u52a1\u63a7\u5236(\u6682\u505c/\u6062\u590d) - \u8be6\u7ec6\u6307\u6807</p> <p>\u65e5\u5fd7\u652f\u6301: - Structlog - Loguru - Python logging - \u81ea\u5b9a\u4e49\u9002\u914d\u5668 - \u7981\u7528\u65e5\u5fd7</p> <p>\u6d4b\u8bd5\u8986\u76d6: - 60+ \u5355\u5143\u6d4b\u8bd5 - \u9ad8\u6d4b\u8bd5\u8986\u76d6\u7387 - \u591a\u4e2a\u5b9e\u7528\u793a\u4f8b</p>"},{"location":"changelog/#_17","title":"\u8d21\u732e","text":"<p>\u53d1\u73b0 Bug \u6216\u6709\u65b0\u529f\u80fd\u5efa\u8bae?\u6b22\u8fce\u63d0\u4ea4 Issue!</p>"},{"location":"changelog/#_18","title":"\u8bb8\u53ef\u8bc1","text":"<p>MIT License - \u8be6\u89c1 LICENSE</p>"},{"location":"contributing/","title":"\u8d21\u732e\u6307\u5357","text":"<p>\u611f\u8c22\u4f60\u5bf9 chronflow \u7684\u5174\u8da3\uff01\u672c\u6307\u5357\u5c06\u5e2e\u52a9\u4f60\u4e86\u89e3\u5982\u4f55\u4e3a\u9879\u76ee\u505a\u51fa\u8d21\u732e\u3002</p>"},{"location":"contributing/#_2","title":"\u5f00\u53d1\u73af\u5883\u8bbe\u7f6e","text":""},{"location":"contributing/#1-fork-clone","title":"1. Fork \u548c Clone","text":"<pre><code># Fork \u9879\u76ee\u5230\u4f60\u7684 GitHub \u8d26\u53f7\n# \u7136\u540e clone \u5230\u672c\u5730\ngit clone https://github.com/your-username/chronflow.git\ncd chronflow\n\n# \u6dfb\u52a0\u4e0a\u6e38\u4ed3\u5e93\ngit remote add upstream https://github.com/getaix/chronflow.git\n</code></pre>"},{"location":"contributing/#2-uv","title":"2. \u5b89\u88c5 uv","text":"<pre><code># macOS/Linux\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Windows\npowershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre>"},{"location":"contributing/#3","title":"3. \u5b89\u88c5\u4f9d\u8d56","text":"<pre><code># \u521b\u5efa\u865a\u62df\u73af\u5883\u5e76\u5b89\u88c5\u6240\u6709\u4f9d\u8d56\nuv sync --all-groups --extra all\n</code></pre>"},{"location":"contributing/#4","title":"4. \u5b89\u88c5\u5f00\u53d1\u94a9\u5b50","text":"<pre><code># \u5b89\u88c5 pre-commit hooks\uff08\u53ef\u9009\uff09\nuv run pre-commit install\n</code></pre>"},{"location":"contributing/#_3","title":"\u5f00\u53d1\u6d41\u7a0b","text":""},{"location":"contributing/#1","title":"1. \u521b\u5efa\u5206\u652f","text":"<pre><code>git checkout -b feature/your-feature-name\n# \u6216\ngit checkout -b fix/your-bug-fix\n</code></pre>"},{"location":"contributing/#2","title":"2. \u7f16\u5199\u4ee3\u7801","text":"<ul> <li>\u9075\u5faa\u73b0\u6709\u7684\u4ee3\u7801\u98ce\u683c</li> <li>\u6dfb\u52a0\u5fc5\u8981\u7684\u7c7b\u578b\u63d0\u793a</li> <li>\u7f16\u5199\u4e2d\u6587\u6ce8\u91ca\u548c\u6587\u6863\u5b57\u7b26\u4e32</li> <li>\u786e\u4fdd\u4ee3\u7801\u901a\u8fc7\u6240\u6709\u6d4b\u8bd5</li> </ul>"},{"location":"contributing/#3_1","title":"3. \u8fd0\u884c\u6d4b\u8bd5","text":"<pre><code># \u8fd0\u884c\u6240\u6709\u6d4b\u8bd5\nuv run pytest\n\n# \u8fd0\u884c\u6d4b\u8bd5\u5e76\u751f\u6210\u8986\u76d6\u7387\u62a5\u544a\nuv run pytest --cov=chronflow --cov-report=html\n\n# \u67e5\u770b\u8986\u76d6\u7387\u62a5\u544a\nopen htmlcov/index.html\n</code></pre>"},{"location":"contributing/#4_1","title":"4. \u4ee3\u7801\u68c0\u67e5","text":"<pre><code># Ruff \u68c0\u67e5\nuv run ruff check chronflow/\n\n# Ruff \u683c\u5f0f\u5316\u68c0\u67e5\nuv run ruff format --check chronflow/\n\n# \u81ea\u52a8\u4fee\u590d\nuv run ruff check --fix chronflow/\nuv run ruff format chronflow/\n\n# \u7c7b\u578b\u68c0\u67e5\nuv run mypy chronflow/\n</code></pre>"},{"location":"contributing/#5","title":"5. \u63d0\u4ea4\u4ee3\u7801","text":"<pre><code># \u6dfb\u52a0\u66f4\u6539\ngit add .\n\n# \u63d0\u4ea4\uff08\u4f7f\u7528\u6709\u610f\u4e49\u7684\u63d0\u4ea4\u4fe1\u606f\uff09\ngit commit -m \"feat: \u6dfb\u52a0\u65b0\u529f\u80fd XXX\"\n# \u6216\ngit commit -m \"fix: \u4fee\u590d XXX \u95ee\u9898\"\n</code></pre> <p>\u63d0\u4ea4\u4fe1\u606f\u683c\u5f0f\uff1a - <code>feat:</code> - \u65b0\u529f\u80fd - <code>fix:</code> - \u4fee\u590d bug - <code>docs:</code> - \u6587\u6863\u66f4\u65b0 - <code>test:</code> - \u6d4b\u8bd5\u76f8\u5173 - <code>refactor:</code> - \u91cd\u6784\u4ee3\u7801 - <code>chore:</code> - \u6784\u5efa/\u5de5\u5177\u76f8\u5173</p>"},{"location":"contributing/#6-pr","title":"6. \u63a8\u9001\u5e76\u521b\u5efa PR","text":"<pre><code># \u63a8\u9001\u5230\u4f60\u7684 fork\ngit push origin feature/your-feature-name\n\n# \u7136\u540e\u5728 GitHub \u4e0a\u521b\u5efa Pull Request\n</code></pre>"},{"location":"contributing/#_4","title":"\u4ee3\u7801\u89c4\u8303","text":""},{"location":"contributing/#python","title":"Python \u4ee3\u7801","text":"<ul> <li>\u4f7f\u7528 Python 3.11+ \u8bed\u6cd5</li> <li>100% \u7c7b\u578b\u63d0\u793a\u8986\u76d6</li> <li>\u9075\u5faa PEP 8 \u89c4\u8303</li> <li>\u884c\u957f\u5ea6\u9650\u5236\uff1a100 \u5b57\u7b26</li> </ul>"},{"location":"contributing/#_5","title":"\u6ce8\u91ca\u548c\u6587\u6863","text":"<ul> <li>\u6240\u6709\u516c\u5171 API \u5fc5\u987b\u6709\u6587\u6863\u5b57\u7b26\u4e32</li> <li>\u6587\u6863\u5b57\u7b26\u4e32\u4f7f\u7528\u4e2d\u6587</li> <li>\u4f7f\u7528 Google \u98ce\u683c\u7684\u6587\u6863\u5b57\u7b26\u4e32\u683c\u5f0f</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>def my_function(param1: str, param2: int) -&gt; bool:\n    \"\"\"\u51fd\u6570\u7b80\u77ed\u63cf\u8ff0\u3002\n\n    \u8be6\u7ec6\u8bf4\u660e\u51fd\u6570\u7684\u529f\u80fd\u548c\u7528\u9014\u3002\n\n    Args:\n        param1: \u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u8bf4\u660e\n        param2: \u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u8bf4\u660e\n\n    Returns:\n        \u8fd4\u56de\u503c\u7684\u8bf4\u660e\n\n    Raises:\n        ValueError: \u4f55\u65f6\u629b\u51fa\u6b64\u5f02\u5e38\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; result = my_function(\"test\", 42)\n        &gt;&gt;&gt; print(result)\n        True\n    \"\"\"\n    pass\n</code></pre>"},{"location":"contributing/#_6","title":"\u6d4b\u8bd5","text":"<ul> <li>\u6240\u6709\u65b0\u529f\u80fd\u5fc5\u987b\u5305\u542b\u6d4b\u8bd5</li> <li>\u6d4b\u8bd5\u8986\u76d6\u7387\u5e94\u4fdd\u6301\u5728 80% \u4ee5\u4e0a</li> <li>\u4f7f\u7528 pytest \u548c pytest-asyncio</li> <li>\u6d4b\u8bd5\u51fd\u6570\u540d\u4f7f\u7528\u4e2d\u6587\u63cf\u8ff0</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>import pytest\nfrom chronflow import Scheduler\n\nclass TestScheduler:\n    \"\"\"\u8c03\u5ea6\u5668\u6d4b\u8bd5\u7c7b\u3002\"\"\"\n\n    def test_scheduler_creation(self):\n        \"\"\"\u6d4b\u8bd5\u8c03\u5ea6\u5668\u521b\u5efa\u3002\"\"\"\n        scheduler = Scheduler()\n        assert scheduler is not None\n\n    @pytest.mark.asyncio\n    async def test_scheduler_start_stop(self):\n        \"\"\"\u6d4b\u8bd5\u8c03\u5ea6\u5668\u542f\u52a8\u548c\u505c\u6b62\u3002\"\"\"\n        scheduler = Scheduler()\n        # \u6d4b\u8bd5\u903b\u8f91\n</code></pre>"},{"location":"contributing/#_7","title":"\u6587\u6863\u7f16\u5199","text":""},{"location":"contributing/#_8","title":"\u672c\u5730\u9884\u89c8\u6587\u6863","text":"<pre><code># \u5b89\u88c5\u6587\u6863\u4f9d\u8d56\nuv pip install -e '.[docs]'\n\n# \u542f\u52a8\u6587\u6863\u670d\u52a1\u5668\nuv run mkdocs serve\n\n# \u6d4f\u89c8\u5668\u8bbf\u95ee http://127.0.0.1:8000\n</code></pre>"},{"location":"contributing/#_9","title":"\u6784\u5efa\u6587\u6863","text":"<pre><code>uv run mkdocs build\n</code></pre>"},{"location":"contributing/#_10","title":"\u6587\u6863\u7ed3\u6784","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md                 # \u6982\u89c8\u9875\u9762\n\u251c\u2500\u2500 quickstart.md            # \u5feb\u901f\u5f00\u59cb\n\u251c\u2500\u2500 guides/                  # \u4f7f\u7528\u6307\u5357\n\u2502   \u251c\u2500\u2500 logging.md\n\u2502   \u251c\u2500\u2500 monitoring.md\n\u2502   \u2514\u2500\u2500 backends.md\n\u251c\u2500\u2500 api/                     # API \u6587\u6863\n\u2502   \u251c\u2500\u2500 scheduler.md\n\u2502   \u251c\u2500\u2500 task.md\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 changelog.md             # \u66f4\u65b0\u65e5\u5fd7\n</code></pre>"},{"location":"contributing/#_11","title":"\u53d1\u5e03\u6d41\u7a0b\uff08\u7ef4\u62a4\u8005\uff09","text":""},{"location":"contributing/#1_1","title":"1. \u66f4\u65b0\u7248\u672c\u53f7","text":"<p>\u7f16\u8f91 <code>pyproject.toml</code>:</p> <pre><code>[project]\nversion = \"0.2.0\"  # \u66f4\u65b0\u7248\u672c\u53f7\n</code></pre>"},{"location":"contributing/#2-changelog","title":"2. \u66f4\u65b0 CHANGELOG","text":"<p>\u5728 <code>CHANGELOG.md</code> \u4e2d\u6dfb\u52a0\u65b0\u7248\u672c\u7684\u66f4\u65b0\u5185\u5bb9\u3002</p>"},{"location":"contributing/#3_2","title":"3. \u521b\u5efa\u6807\u7b7e","text":"<pre><code>git tag -a v0.2.0 -m \"Release version 0.2.0\"\ngit push origin v0.2.0\n</code></pre>"},{"location":"contributing/#4_2","title":"4. \u81ea\u52a8\u53d1\u5e03","text":"<p>\u63a8\u9001\u6807\u7b7e\u540e\uff0cGitHub Actions \u4f1a\u81ea\u52a8\uff1a - \u8fd0\u884c\u6240\u6709\u6d4b\u8bd5 - \u6784\u5efa\u5206\u53d1\u5305 - \u53d1\u5e03\u5230 PyPI</p>"},{"location":"contributing/#5_1","title":"5. \u624b\u52a8\u53d1\u5e03\uff08\u53ef\u9009\uff09","text":"<pre><code># \u6784\u5efa\u5206\u53d1\u5305\nuv build\n\n# \u68c0\u67e5\u5206\u53d1\u5305\ntwine check dist/*\n\n# \u4e0a\u4f20\u5230 PyPI\ntwine upload dist/*\n</code></pre>"},{"location":"contributing/#_12","title":"\u62a5\u544a\u95ee\u9898","text":""},{"location":"contributing/#bug","title":"Bug \u62a5\u544a","text":"<p>\u521b\u5efa Issue \u65f6\u8bf7\u5305\u542b\uff1a</p> <ol> <li>\u95ee\u9898\u63cf\u8ff0 - \u6e05\u6670\u7b80\u6d01\u5730\u63cf\u8ff0\u95ee\u9898</li> <li>\u590d\u73b0\u6b65\u9aa4 - \u8be6\u7ec6\u7684\u590d\u73b0\u6b65\u9aa4</li> <li>\u671f\u671b\u884c\u4e3a - \u4f60\u671f\u671b\u53d1\u751f\u4ec0\u4e48</li> <li>\u5b9e\u9645\u884c\u4e3a - \u5b9e\u9645\u53d1\u751f\u4e86\u4ec0\u4e48</li> <li>\u73af\u5883\u4fe1\u606f:</li> <li>Python \u7248\u672c</li> <li>chronflow \u7248\u672c</li> <li>\u64cd\u4f5c\u7cfb\u7edf</li> <li>\u76f8\u5173\u65e5\u5fd7 - \u9519\u8bef\u4fe1\u606f\u3001\u5806\u6808\u8ddf\u8e2a\u7b49</li> </ol>"},{"location":"contributing/#_13","title":"\u529f\u80fd\u8bf7\u6c42","text":"<p>\u521b\u5efa Issue \u65f6\u8bf7\u8bf4\u660e\uff1a</p> <ol> <li>\u529f\u80fd\u63cf\u8ff0 - \u4f60\u5e0c\u671b\u6dfb\u52a0\u4ec0\u4e48\u529f\u80fd</li> <li>\u4f7f\u7528\u573a\u666f - \u4e3a\u4ec0\u4e48\u9700\u8981\u8fd9\u4e2a\u529f\u80fd</li> <li>\u5efa\u8bae\u5b9e\u73b0 - \u4f60\u5bf9\u5b9e\u73b0\u65b9\u5f0f\u7684\u60f3\u6cd5\uff08\u53ef\u9009\uff09</li> </ol>"},{"location":"contributing/#_14","title":"\u884c\u4e3a\u51c6\u5219","text":"<ul> <li>\u5c0a\u91cd\u6240\u6709\u8d21\u732e\u8005</li> <li>\u4fdd\u6301\u53cb\u597d\u548c\u5efa\u8bbe\u6027\u7684\u8ba8\u8bba</li> <li>\u6b22\u8fce\u65b0\u624b\u63d0\u95ee</li> <li>\u53ca\u65f6\u56de\u5e94 PR \u548c Issue</li> </ul>"},{"location":"contributing/#_15","title":"\u83b7\u5f97\u5e2e\u52a9","text":"<p>\u5982\u679c\u4f60\u6709\u4efb\u4f55\u95ee\u9898\uff1a</p> <ol> <li>\u67e5\u770b \u6587\u6863</li> <li>\u641c\u7d22\u73b0\u6709\u7684 Issues</li> <li>\u521b\u5efa\u65b0\u7684 Issue \u63d0\u95ee</li> </ol>"},{"location":"contributing/#_16","title":"\u81f4\u8c22","text":"<p>\u611f\u8c22\u6240\u6709\u4e3a chronflow \u505a\u51fa\u8d21\u732e\u7684\u5f00\u53d1\u8005\uff01\u4f60\u4eec\u7684\u8d21\u732e\u8ba9\u8fd9\u4e2a\u9879\u76ee\u53d8\u5f97\u66f4\u597d\u3002</p> <p>\u518d\u6b21\u611f\u8c22\u4f60\u7684\u8d21\u732e\uff01\ud83c\udf89</p>"},{"location":"quickstart/","title":"chronflow \u5feb\u901f\u5f00\u59cb\u6307\u5357","text":""},{"location":"quickstart/#5","title":"5 \u5206\u949f\u4e0a\u624b","text":""},{"location":"quickstart/#1","title":"1. \u5b89\u88c5","text":"<p>\u4f7f\u7528 uv (\u63a8\u8350): <pre><code>uv pip install chronflow\n</code></pre></p> <p>\u4f7f\u7528 pip: <pre><code>pip install chronflow\n</code></pre></p>"},{"location":"quickstart/#2","title":"2. \u7b2c\u4e00\u4e2a\u5b9a\u65f6\u4efb\u52a1","text":"<p>\u521b\u5efa <code>app.py</code>:</p> <pre><code>import asyncio\nfrom chronflow import Scheduler, interval\n\n# \u521b\u5efa\u8c03\u5ea6\u5668\nscheduler = Scheduler()\n\n# \u5b9a\u4e49\u4efb\u52a1 - \u6bcf 5 \u79d2\u6267\u884c\u4e00\u6b21\n@interval(5)\nasync def hello_task():\n    print(\"Hello, chronflow!\")\n\n# \u8fd0\u884c\u8c03\u5ea6\u5668\nasync def main():\n    await scheduler.start()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>\u8fd0\u884c: <pre><code>python app.py\n</code></pre></p>"},{"location":"quickstart/#3-cron","title":"3. \u4f7f\u7528 Cron \u8868\u8fbe\u5f0f","text":"<pre><code>from chronflow import cron\n\n# \u6bcf\u5929\u4e0a\u5348 9 \u70b9\u6267\u884c\n@cron(\"0 0 9 * * *\")\nasync def daily_report():\n    print(\"\u751f\u6210\u6bcf\u65e5\u62a5\u8868...\")\n    # \u4f60\u7684\u4e1a\u52a1\u903b\u8f91\n\n# \u6bcf 5 \u79d2\u6267\u884c\n@cron(\"*/5 * * * * *\")\nasync def health_check():\n    print(\"\u5065\u5eb7\u68c0\u67e5...\")\n</code></pre>"},{"location":"quickstart/#4","title":"4. \u6dfb\u52a0\u91cd\u8bd5\u673a\u5236","text":"<pre><code>from chronflow import interval, RetryPolicy\n\n@interval(\n    30,\n    retry_policy=RetryPolicy(\n        max_attempts=5,\n        strategy=\"exponential\",\n        wait_min=1.0,\n        wait_max=60.0,\n    )\n)\nasync def important_task():\n    # \u8fd9\u4e2a\u4efb\u52a1\u5931\u8d25\u540e\u4f1a\u81ea\u52a8\u91cd\u8bd5\u6700\u591a 5 \u6b21\n    await do_something_critical()\n</code></pre>"},{"location":"quickstart/#5_1","title":"5. \u4f7f\u7528\u6301\u4e45\u5316\u961f\u5217","text":"<pre><code>from chronflow import Scheduler\nfrom chronflow.backends import SQLiteBackend\n\n# \u4f7f\u7528 SQLite \u6301\u4e45\u5316\nbackend = SQLiteBackend(db_path=\"tasks.db\")\nscheduler = Scheduler(backend=backend)\n\n# \u4efb\u52a1\u4f1a\u4fdd\u5b58\u5230\u6570\u636e\u5e93,\u91cd\u542f\u540e\u4e0d\u4f1a\u4e22\u5931\n@interval(60)\nasync def persistent_task():\n    print(\"\u8fd9\u4e2a\u4efb\u52a1\u4f1a\u88ab\u6301\u4e45\u5316!\")\n</code></pre>"},{"location":"quickstart/#6-redis","title":"6. \u5206\u5e03\u5f0f\u90e8\u7f72 (Redis)","text":"<pre><code># \u5b89\u88c5 Redis \u652f\u6301\nuv pip install chronflow[redis]\n</code></pre> <pre><code>from chronflow import Scheduler, SchedulerConfig\nfrom chronflow.backends import RedisBackend\n\n# \u914d\u7f6e Redis \u540e\u7aef\nbackend = RedisBackend(url=\"redis://localhost:6379/0\")\nconfig = SchedulerConfig(max_workers=20)\n\nscheduler = Scheduler(config=config, backend=backend)\n\n# \u591a\u4e2a\u5b9e\u4f8b\u5171\u4eab\u540c\u4e00\u4e2a Redis \u961f\u5217\n@interval(10)\nasync def distributed_task():\n    print(\"\u5206\u5e03\u5f0f\u4efb\u52a1\u6267\u884c\u4e2d...\")\n</code></pre>"},{"location":"quickstart/#_1","title":"\u5e38\u7528\u573a\u666f","text":""},{"location":"quickstart/#_2","title":"\u6570\u636e\u540c\u6b65","text":"<pre><code>@interval(300)  # \u6bcf 5 \u5206\u949f\nasync def sync_data():\n    \"\"\"\u4ece API \u540c\u6b65\u6570\u636e\"\"\"\n    data = await fetch_from_api()\n    await save_to_database(data)\n</code></pre>"},{"location":"quickstart/#_3","title":"\u5b9a\u65f6\u6e05\u7406","text":"<pre><code>@cron(\"0 0 2 * * *\")  # \u6bcf\u5929\u51cc\u6668 2 \u70b9\nasync def cleanup():\n    \"\"\"\u6e05\u7406\u8fc7\u671f\u6570\u636e\"\"\"\n    await delete_old_records()\n</code></pre>"},{"location":"quickstart/#_4","title":"\u5065\u5eb7\u76d1\u63a7","text":"<pre><code>@interval(30)\nasync def monitor_services():\n    \"\"\"\u76d1\u63a7\u670d\u52a1\u5065\u5eb7\u72b6\u6001\"\"\"\n    for service in services:\n        if not await service.is_healthy():\n            await send_alert(f\"{service.name} \u5f02\u5e38!\")\n</code></pre>"},{"location":"quickstart/#_5","title":"\u62a5\u8868\u751f\u6210","text":"<pre><code>@cron(\"0 0 18 * * 1-5\")  # \u5de5\u4f5c\u65e5\u4e0b\u5348 6 \u70b9\nasync def daily_report():\n    \"\"\"\u751f\u6210\u6bcf\u65e5\u62a5\u8868\"\"\"\n    report = await generate_report()\n    await send_email(report)\n</code></pre>"},{"location":"quickstart/#_6","title":"\u914d\u7f6e\u6587\u4ef6\u65b9\u5f0f","text":"<p>\u521b\u5efa <code>config.toml</code>:</p> <pre><code>max_workers = 20\nqueue_size = 5000\nlog_level = \"INFO\"\ntimezone = \"Asia/Shanghai\"\n</code></pre> <p>\u4f7f\u7528\u914d\u7f6e:</p> <pre><code>from chronflow import Scheduler, SchedulerConfig\n\nconfig = SchedulerConfig.from_file(\"config.toml\")\nscheduler = Scheduler(config=config)\n</code></pre>"},{"location":"quickstart/#_7","title":"\u76d1\u63a7\u548c\u8c03\u8bd5","text":"<pre><code># \u83b7\u53d6\u8c03\u5ea6\u5668\u72b6\u6001\nstats = await scheduler.get_stats()\nprint(f\"\u8fd0\u884c\u4e2d: {stats['running']}\")\nprint(f\"\u4efb\u52a1\u6570: {stats['total_tasks']}\")\nprint(f\"\u961f\u5217\u5927\u5c0f: {stats['queue_size']}\")\n\n# \u83b7\u53d6\u4efb\u52a1\u6307\u6807\ntask = scheduler.get_task(\"my_task\")\nprint(f\"\u603b\u8fd0\u884c\u6b21\u6570: {task.metrics.total_runs}\")\nprint(f\"\u6210\u529f\u7387: {task.metrics.successful_runs / task.metrics.total_runs * 100}%\")\n</code></pre>"},{"location":"quickstart/#_8","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u67e5\u770b README.md \u4e86\u89e3\u5b8c\u6574\u529f\u80fd</li> <li>\u67e5\u770b examples/ \u76ee\u5f55\u7684\u793a\u4f8b\u4ee3\u7801</li> <li>\u9605\u8bfb CONTRIBUTING.md \u4e86\u89e3\u5982\u4f55\u8d21\u732e\u4ee3\u7801</li> </ul>"},{"location":"quickstart/#_9","title":"\u5e38\u89c1\u95ee\u9898","text":"<p>Q: \u5982\u4f55\u4f18\u96c5\u5730\u5173\u95ed\u8c03\u5ea6\u5668?</p> <p>A: \u4f7f\u7528 <code>Ctrl+C</code> \u6216\u8c03\u7528 <code>await scheduler.stop()</code>,\u8c03\u5ea6\u5668\u4f1a\u7b49\u5f85\u6240\u6709\u8fd0\u884c\u4e2d\u7684\u4efb\u52a1\u5b8c\u6210\u3002</p> <p>Q: \u4efb\u52a1\u6267\u884c\u5931\u8d25\u600e\u4e48\u529e?</p> <p>A: \u914d\u7f6e\u91cd\u8bd5\u7b56\u7565,\u5931\u8d25\u7684\u4efb\u52a1\u4f1a\u81ea\u52a8\u91cd\u8bd5\u3002\u67e5\u770b\u4efb\u52a1\u6307\u6807\u4e86\u89e3\u5931\u8d25\u539f\u56e0\u3002</p> <p>Q: \u652f\u6301\u5206\u5e03\u5f0f\u90e8\u7f72\u5417?</p> <p>A: \u652f\u6301!\u4f7f\u7528 Redis \u6216 RabbitMQ \u540e\u7aef\u5373\u53ef\u5b9e\u73b0\u591a\u5b9e\u4f8b\u90e8\u7f72\u3002</p> <p>Q: \u6027\u80fd\u5982\u4f55?</p> <p>A: \u57fa\u4e8e\u539f\u751f asyncio,\u4f4e\u5ef6\u8fdf\u9ad8\u541e\u5410\u3002\u5185\u5b58\u540e\u7aef\u53ef\u652f\u6301 10000+ \u4efb\u52a1/\u79d2\u3002</p>"},{"location":"api/backends/","title":"Backends API","text":"<p>chronflow \u63d0\u4f9b\u591a\u79cd\u961f\u5217\u540e\u7aef\u5b9e\u73b0\uff0c\u652f\u6301\u4e0d\u540c\u7684\u4f7f\u7528\u573a\u666f\u3002</p>"},{"location":"api/backends/#queuebackend","title":"QueueBackend (\u62bd\u8c61\u57fa\u7c7b)","text":""},{"location":"api/backends/#chronflow.backends.base.QueueBackend","title":"<code>QueueBackend</code>","text":"<p>               Bases: <code>ABC</code></p> <p>\u961f\u5217\u540e\u7aef\u7684\u62bd\u8c61\u57fa\u7c7b\u3002</p>"},{"location":"api/backends/#chronflow.backends.base.QueueBackend.connect","title":"<code>connect()</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u5efa\u7acb\u4e0e\u540e\u7aef\u7684\u8fde\u63a5\u3002</p>"},{"location":"api/backends/#chronflow.backends.base.QueueBackend.disconnect","title":"<code>disconnect()</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u5173\u95ed\u4e0e\u540e\u7aef\u7684\u8fde\u63a5\u3002</p>"},{"location":"api/backends/#chronflow.backends.base.QueueBackend.enqueue","title":"<code>enqueue(task_id, task_name, scheduled_time, payload, priority=0)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u5c06\u4efb\u52a1\u52a0\u5165\u961f\u5217\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>task_id</code> <code>str</code> <p>\u4efb\u52a1\u7684\u552f\u4e00\u6807\u8bc6</p> \u5fc5\u9700 <code>task_name</code> <code>str</code> <p>\u4efb\u52a1\u540d\u79f0</p> \u5fc5\u9700 <code>scheduled_time</code> <code>datetime</code> <p>\u4efb\u52a1\u8ba1\u5212\u6267\u884c\u65f6\u95f4</p> \u5fc5\u9700 <code>payload</code> <code>dict[str, Any]</code> <p>\u4efb\u52a1\u6570\u636e\u548c\u53c2\u6570</p> \u5fc5\u9700 <code>priority</code> <code>int</code> <p>\u4efb\u52a1\u4f18\u5148\u7ea7(\u6570\u503c\u8d8a\u5927\u8d8a\u4f18\u5148)</p> <code>0</code>"},{"location":"api/backends/#chronflow.backends.base.QueueBackend.dequeue","title":"<code>dequeue(limit=1)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u4ece\u961f\u5217\u4e2d\u83b7\u53d6\u5c31\u7eea\u4efb\u52a1\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>limit</code> <code>int</code> <p>\u6700\u591a\u83b7\u53d6\u7684\u4efb\u52a1\u6570\u91cf</p> <code>1</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>list[dict[str, Any]]</code> <p>\u5df2\u51c6\u5907\u6267\u884c\u7684\u4efb\u52a1\u8d1f\u8f7d\u5217\u8868</p>"},{"location":"api/backends/#chronflow.backends.base.QueueBackend.acknowledge","title":"<code>acknowledge(task_id)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u6807\u8bb0\u4efb\u52a1\u6210\u529f\u5b8c\u6210\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>task_id</code> <code>str</code> <p>\u5df2\u5b8c\u6210\u4efb\u52a1\u7684\u6807\u8bc6</p> \u5fc5\u9700"},{"location":"api/backends/#chronflow.backends.base.QueueBackend.reject","title":"<code>reject(task_id, requeue=False)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u6807\u8bb0\u4efb\u52a1\u6267\u884c\u5931\u8d25\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>task_id</code> <code>str</code> <p>\u5931\u8d25\u4efb\u52a1\u7684\u6807\u8bc6</p> \u5fc5\u9700 <code>requeue</code> <code>bool</code> <p>\u662f\u5426\u5c06\u4efb\u52a1\u91cd\u65b0\u5165\u961f</p> <code>False</code>"},{"location":"api/backends/#chronflow.backends.base.QueueBackend.get_queue_size","title":"<code>get_queue_size()</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u83b7\u53d6\u961f\u5217\u4e2d\u7684\u5f85\u5904\u7406\u4efb\u52a1\u6570\u91cf\u3002</p>"},{"location":"api/backends/#chronflow.backends.base.QueueBackend.clear","title":"<code>clear()</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u6e05\u7a7a\u961f\u5217\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u3002</p>"},{"location":"api/backends/#chronflow.backends.base.QueueBackend.health_check","title":"<code>health_check()</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u68c0\u67e5\u540e\u7aef\u662f\u5426\u5065\u5eb7\u4e14\u53ef\u8bbf\u95ee\u3002</p>"},{"location":"api/backends/#memorybackend","title":"MemoryBackend","text":""},{"location":"api/backends/#chronflow.backends.memory.MemoryBackend","title":"<code>MemoryBackend(max_size=10000)</code>","text":"<p>               Bases: <code>QueueBackend</code></p> <p>\u57fa\u4e8e heapq \u7684\u5185\u5b58\u4f18\u5148\u961f\u5217\u5b9e\u73b0\u3002</p> <p>\u7279\u70b9: - \u9ed8\u8ba4\u540e\u7aef,\u65e0\u9700\u4efb\u4f55\u5916\u90e8\u4f9d\u8d56 - \u9002\u7528\u4e8e\u5355\u8fdb\u7a0b\u5e94\u7528\u548c\u6d4b\u8bd5\u573a\u666f</p> <p>\u521d\u59cb\u5316\u5185\u5b58\u540e\u7aef\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>max_size</code> <code>int</code> <p>\u961f\u5217\u5141\u8bb8\u7684\u6700\u5927\u4efb\u52a1\u6570\u91cf</p> <code>10000</code>"},{"location":"api/backends/#chronflow.backends.memory.MemoryBackend.connect","title":"<code>connect()</code>  <code>async</code>","text":"<p>\u5185\u5b58\u540e\u7aef\u65e0\u9700\u5efa\u7acb\u8fde\u63a5\u3002</p>"},{"location":"api/backends/#chronflow.backends.memory.MemoryBackend.disconnect","title":"<code>disconnect()</code>  <code>async</code>","text":"<p>\u5185\u5b58\u540e\u7aef\u65e0\u9700\u663e\u5f0f\u65ad\u5f00\u8fde\u63a5\u3002</p>"},{"location":"api/backends/#chronflow.backends.memory.MemoryBackend.enqueue","title":"<code>enqueue(task_id, task_name, scheduled_time, payload, priority=0)</code>  <code>async</code>","text":"<p>\u5c06\u4efb\u52a1\u52a0\u5165\u4f18\u5148\u961f\u5217\u3002</p>"},{"location":"api/backends/#chronflow.backends.memory.MemoryBackend.dequeue","title":"<code>dequeue(limit=1)</code>  <code>async</code>","text":"<p>\u4ece\u961f\u5217\u4e2d\u83b7\u53d6\u5df2\u5c31\u7eea\u7684\u4efb\u52a1\u3002</p>"},{"location":"api/backends/#chronflow.backends.memory.MemoryBackend.acknowledge","title":"<code>acknowledge(task_id)</code>  <code>async</code>","text":"<p>\u5c06\u4efb\u52a1\u4ece\u5f85\u5904\u7406\u96c6\u5408\u4e2d\u79fb\u9664\u3002</p>"},{"location":"api/backends/#chronflow.backends.memory.MemoryBackend.reject","title":"<code>reject(task_id, requeue=False)</code>  <code>async</code>","text":"<p>\u5904\u7406\u5931\u8d25\u4efb\u52a1\u3002</p>"},{"location":"api/backends/#chronflow.backends.memory.MemoryBackend.get_queue_size","title":"<code>get_queue_size()</code>  <code>async</code>","text":"<p>\u83b7\u53d6\u961f\u5217\u4e2d\u7684\u4efb\u52a1\u603b\u6570\u3002</p>"},{"location":"api/backends/#chronflow.backends.memory.MemoryBackend.clear","title":"<code>clear()</code>  <code>async</code>","text":"<p>\u6e05\u9664\u6240\u6709\u4efb\u52a1\u3002</p>"},{"location":"api/backends/#chronflow.backends.memory.MemoryBackend.health_check","title":"<code>health_check()</code>  <code>async</code>","text":"<p>\u5185\u5b58\u540e\u7aef\u59cb\u7ec8\u5904\u4e8e\u5065\u5eb7\u72b6\u6001\u3002</p>"},{"location":"api/backends/#chronflow.backends.memory.MemoryBackend.__repr__","title":"<code>__repr__()</code>","text":"<p>\u8fd4\u56de\u53ef\u8bfb\u7684\u4fe1\u606f\u3002</p>"},{"location":"api/backends/#sqlitebackend","title":"SQLiteBackend","text":""},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend","title":"<code>SQLiteBackend(db_path='chronflow.db', table_name='task_queue')</code>","text":"<p>               Bases: <code>QueueBackend</code></p> <p>\u57fa\u4e8e SQLite \u7684\u672c\u5730\u6301\u4e45\u5316\u961f\u5217\u5b9e\u73b0\u3002</p> <p>\u7279\u6027: - \u672c\u5730\u6587\u4ef6\u6301\u4e45\u5316,\u65e0\u9700\u5916\u90e8\u670d\u52a1 - \u652f\u6301\u4efb\u52a1\u4f18\u5148\u7ea7\u548c\u8c03\u5ea6\u65f6\u95f4 - \u9002\u5408\u5355\u673a\u90e8\u7f72\u573a\u666f - \u8f7b\u91cf\u7ea7,\u96f6\u914d\u7f6e</p> <p>\u9002\u7528\u573a\u666f: - \u5f00\u53d1\u73af\u5883\u548c\u6d4b\u8bd5 - \u5355\u673a\u5e94\u7528 - \u9700\u8981\u6301\u4e45\u5316\u4f46\u4e0d\u9700\u8981\u5206\u5e03\u5f0f\u7684\u573a\u666f</p> <p>\u521d\u59cb\u5316 SQLite \u540e\u7aef\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>db_path</code> <code>str | Path</code> <p>\u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84</p> <code>'chronflow.db'</code> <code>table_name</code> <code>str</code> <p>\u4efb\u52a1\u961f\u5217\u8868\u540d</p> <code>'task_queue'</code>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.connect","title":"<code>connect()</code>  <code>async</code>","text":"<p>\u8fde\u63a5\u5230 SQLite \u6570\u636e\u5e93\u5e76\u521b\u5efa\u8868\u3002</p>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.disconnect","title":"<code>disconnect()</code>  <code>async</code>","text":"<p>\u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5\u3002</p>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.enqueue","title":"<code>enqueue(task_id, task_name, scheduled_time, payload, priority=0)</code>  <code>async</code>","text":"<p>\u5c06\u4efb\u52a1\u6dfb\u52a0\u5230\u961f\u5217\u3002</p>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.dequeue","title":"<code>dequeue(limit=1)</code>  <code>async</code>","text":"<p>\u4ece\u961f\u5217\u83b7\u53d6\u5c31\u7eea\u7684\u4efb\u52a1\u3002</p>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.acknowledge","title":"<code>acknowledge(task_id)</code>  <code>async</code>","text":"<p>\u786e\u8ba4\u4efb\u52a1\u6210\u529f\u5b8c\u6210\u5e76\u4ece\u961f\u5217\u5220\u9664\u3002</p>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.reject","title":"<code>reject(task_id, requeue=False)</code>  <code>async</code>","text":"<p>\u62d2\u7edd\u4efb\u52a1(\u5931\u8d25\u5904\u7406)\u3002</p>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.get_queue_size","title":"<code>get_queue_size()</code>  <code>async</code>","text":"<p>\u83b7\u53d6\u961f\u5217\u4e2d\u7684\u4efb\u52a1\u6570\u91cf\u3002</p>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.clear","title":"<code>clear()</code>  <code>async</code>","text":"<p>\u6e05\u7a7a\u961f\u5217\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u3002</p>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.health_check","title":"<code>health_check()</code>  <code>async</code>","text":"<p>\u68c0\u67e5\u6570\u636e\u5e93\u5065\u5eb7\u72b6\u6001\u3002</p>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.get_failed_tasks","title":"<code>get_failed_tasks(limit=100)</code>  <code>async</code>","text":"<p>\u83b7\u53d6\u5931\u8d25\u7684\u4efb\u52a1\u5217\u8868\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>limit</code> <code>int</code> <p>\u8fd4\u56de\u7684\u6700\u5927\u4efb\u52a1\u6570</p> <code>100</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>list[dict[str, Any]]</code> <p>\u5931\u8d25\u4efb\u52a1\u5217\u8868</p>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.cleanup_old_tasks","title":"<code>cleanup_old_tasks(days=7)</code>  <code>async</code>","text":"<p>\u6e05\u7406\u65e7\u4efb\u52a1\u8bb0\u5f55\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>days</code> <code>int</code> <p>\u4fdd\u7559\u6700\u8fd1\u591a\u5c11\u5929\u7684\u4efb\u52a1</p> <code>7</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>int</code> <p>\u5220\u9664\u7684\u4efb\u52a1\u6570\u91cf</p>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.__repr__","title":"<code>__repr__()</code>","text":"<p>\u5b57\u7b26\u4e32\u8868\u793a\u3002</p>"},{"location":"api/backends/#redisbackend","title":"RedisBackend","text":""},{"location":"api/backends/#chronflow.backends.redis_backend.RedisBackend","title":"<code>RedisBackend(url='redis://localhost:6379/0', queue_name='chronflow:queue', pending_set='chronflow:pending', max_connections=10)</code>","text":"<p>               Bases: <code>QueueBackend</code></p> <p>\u9002\u7528\u4e8e\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684 Redis \u961f\u5217\u5b9e\u73b0\u3002</p> <p>\u7279\u6027: - \u5206\u5e03\u5f0f\u4efb\u52a1\u961f\u5217 - \u91cd\u542f\u540e\u7684\u6301\u4e45\u5316\u80fd\u529b - \u501f\u52a9 Redis \u7684\u9ad8\u6027\u80fd - \u652f\u6301\u591a\u5de5\u4f5c\u534f\u7a0b\u5e76\u53d1</p> <p>\u5b89\u88c5: pip install redis</p> <p>\u521d\u59cb\u5316 Redis \u540e\u7aef\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>url</code> <code>str</code> <p>Redis \u8fde\u63a5 URL</p> <code>'redis://localhost:6379/0'</code> <code>queue_name</code> <code>str</code> <p>Redis \u6709\u5e8f\u96c6\u5408\u7684\u961f\u5217\u540d\u79f0</p> <code>'chronflow:queue'</code> <code>pending_set</code> <code>str</code> <p>Redis \u96c6\u5408\u7528\u4e8e\u8bb0\u5f55\u5f85\u5904\u7406\u4efb\u52a1\u7684\u540d\u79f0</p> <code>'chronflow:pending'</code> <code>max_connections</code> <code>int</code> <p>\u6700\u5927 Redis \u8fde\u63a5\u6570</p> <code>10</code>"},{"location":"api/backends/#chronflow.backends.redis_backend.RedisBackend.connect","title":"<code>connect()</code>  <code>async</code>","text":"<p>\u8fde\u63a5\u5230 Redis\u3002</p>"},{"location":"api/backends/#chronflow.backends.redis_backend.RedisBackend.disconnect","title":"<code>disconnect()</code>  <code>async</code>","text":"<p>\u65ad\u5f00\u4e0e Redis \u7684\u8fde\u63a5\u3002</p>"},{"location":"api/backends/#chronflow.backends.redis_backend.RedisBackend.enqueue","title":"<code>enqueue(task_id, task_name, scheduled_time, payload, priority=0)</code>  <code>async</code>","text":"<p>\u5c06\u4efb\u52a1\u52a0\u5165 Redis \u6709\u5e8f\u96c6\u5408\u3002</p>"},{"location":"api/backends/#chronflow.backends.redis_backend.RedisBackend.dequeue","title":"<code>dequeue(limit=1)</code>  <code>async</code>","text":"<p>\u4ece Redis \u83b7\u53d6\u5c31\u7eea\u4efb\u52a1\u3002</p>"},{"location":"api/backends/#chronflow.backends.redis_backend.RedisBackend.acknowledge","title":"<code>acknowledge(task_id)</code>  <code>async</code>","text":"<p>\u4ece\u5f85\u5904\u7406\u96c6\u5408\u79fb\u9664\u4efb\u52a1\u3002</p>"},{"location":"api/backends/#chronflow.backends.redis_backend.RedisBackend.reject","title":"<code>reject(task_id, requeue=False)</code>  <code>async</code>","text":"<p>\u5904\u7406\u5931\u8d25\u4efb\u52a1\u3002</p>"},{"location":"api/backends/#chronflow.backends.redis_backend.RedisBackend.get_queue_size","title":"<code>get_queue_size()</code>  <code>async</code>","text":"<p>\u83b7\u53d6\u961f\u5217\u4e2d\u7684\u4efb\u52a1\u603b\u6570\u3002</p>"},{"location":"api/backends/#chronflow.backends.redis_backend.RedisBackend.clear","title":"<code>clear()</code>  <code>async</code>","text":"<p>\u6e05\u7a7a\u6240\u6709\u4efb\u52a1\u3002</p>"},{"location":"api/backends/#chronflow.backends.redis_backend.RedisBackend.health_check","title":"<code>health_check()</code>  <code>async</code>","text":"<p>\u68c0\u67e5 Redis \u7684\u5065\u5eb7\u72b6\u6001\u3002</p>"},{"location":"api/backends/#chronflow.backends.redis_backend.RedisBackend.__repr__","title":"<code>__repr__()</code>","text":"<p>\u5b57\u7b26\u4e32\u8868\u793a\u3002</p>"},{"location":"api/backends/#rabbitmqbackend","title":"RabbitMQBackend","text":""},{"location":"api/backends/#chronflow.backends.rabbitmq_backend.RabbitMQBackend","title":"<code>RabbitMQBackend(url='amqp://guest:guest@localhost:5672/', queue_name='chronflow_tasks', durable=True, prefetch_count=10)</code>","text":"<p>               Bases: <code>QueueBackend</code></p> <p>\u57fa\u4e8e RabbitMQ \u7684\u961f\u5217\u5b9e\u73b0,\u9002\u7528\u4e8e\u9ad8\u53ef\u9760\u6027\u5206\u5e03\u5f0f\u7cfb\u7edf\u3002</p> <p>\u7279\u6027: - \u6d88\u606f\u6301\u4e45\u5316,\u9632\u6b62\u6570\u636e\u4e22\u5931 - \u652f\u6301\u591a\u4e2a\u6d88\u8d39\u8005\u5e76\u53d1\u5904\u7406 - \u81ea\u52a8\u91cd\u8fde\u673a\u5236 - \u5ef6\u8fdf\u6d88\u606f\u652f\u6301(\u9700\u8981 rabbitmq_delayed_message_exchange \u63d2\u4ef6)</p> <p>\u5b89\u88c5: pip install aio-pika</p> <p>\u521d\u59cb\u5316 RabbitMQ \u540e\u7aef\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>url</code> <code>str</code> <p>RabbitMQ \u8fde\u63a5 URL</p> <code>'amqp://guest:guest@localhost:5672/'</code> <code>queue_name</code> <code>str</code> <p>\u961f\u5217\u540d\u79f0</p> <code>'chronflow_tasks'</code> <code>durable</code> <code>bool</code> <p>\u662f\u5426\u6301\u4e45\u5316\u961f\u5217</p> <code>True</code> <code>prefetch_count</code> <code>int</code> <p>\u9884\u53d6\u6d88\u606f\u6570\u91cf</p> <code>10</code>"},{"location":"api/backends/#chronflow.backends.rabbitmq_backend.RabbitMQBackend.connect","title":"<code>connect()</code>  <code>async</code>","text":"<p>\u8fde\u63a5\u5230 RabbitMQ\u3002</p>"},{"location":"api/backends/#chronflow.backends.rabbitmq_backend.RabbitMQBackend.disconnect","title":"<code>disconnect()</code>  <code>async</code>","text":"<p>\u65ad\u5f00 RabbitMQ \u8fde\u63a5\u3002</p>"},{"location":"api/backends/#chronflow.backends.rabbitmq_backend.RabbitMQBackend.enqueue","title":"<code>enqueue(task_id, task_name, scheduled_time, payload, priority=0)</code>  <code>async</code>","text":"<p>\u5c06\u4efb\u52a1\u6dfb\u52a0\u5230 RabbitMQ \u961f\u5217\u3002</p>"},{"location":"api/backends/#chronflow.backends.rabbitmq_backend.RabbitMQBackend.dequeue","title":"<code>dequeue(limit=1)</code>  <code>async</code>","text":"<p>\u4ece RabbitMQ \u83b7\u53d6\u5c31\u7eea\u7684\u4efb\u52a1\u3002</p>"},{"location":"api/backends/#chronflow.backends.rabbitmq_backend.RabbitMQBackend.acknowledge","title":"<code>acknowledge(task_id)</code>  <code>async</code>","text":"<p>\u786e\u8ba4\u4efb\u52a1\u6210\u529f\u5b8c\u6210\u3002</p>"},{"location":"api/backends/#chronflow.backends.rabbitmq_backend.RabbitMQBackend.reject","title":"<code>reject(task_id, requeue=False)</code>  <code>async</code>","text":"<p>\u62d2\u7edd\u4efb\u52a1(\u5931\u8d25\u5904\u7406)\u3002</p>"},{"location":"api/backends/#chronflow.backends.rabbitmq_backend.RabbitMQBackend.get_queue_size","title":"<code>get_queue_size()</code>  <code>async</code>","text":"<p>\u83b7\u53d6\u961f\u5217\u4e2d\u7684\u4efb\u52a1\u6570\u91cf\u3002</p>"},{"location":"api/backends/#chronflow.backends.rabbitmq_backend.RabbitMQBackend.clear","title":"<code>clear()</code>  <code>async</code>","text":"<p>\u6e05\u7a7a\u961f\u5217\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u3002</p>"},{"location":"api/backends/#chronflow.backends.rabbitmq_backend.RabbitMQBackend.health_check","title":"<code>health_check()</code>  <code>async</code>","text":"<p>\u68c0\u67e5 RabbitMQ \u5065\u5eb7\u72b6\u6001\u3002</p>"},{"location":"api/backends/#chronflow.backends.rabbitmq_backend.RabbitMQBackend.__repr__","title":"<code>__repr__()</code>","text":"<p>\u5b57\u7b26\u4e32\u8868\u793a\u3002</p>"},{"location":"api/config/","title":"Config API","text":""},{"location":"api/config/#schedulerconfig","title":"SchedulerConfig","text":""},{"location":"api/config/#chronflow.config.SchedulerConfig","title":"<code>SchedulerConfig</code>","text":"<p>               Bases: <code>BaseSettings</code></p> <p>\u8c03\u5ea6\u5668\u4e3b\u914d\u7f6e\u7c7b\u3002</p> <p>\u652f\u6301\u4ece\u4ee5\u4e0b\u6765\u6e90\u52a0\u8f7d\u914d\u7f6e(\u4f18\u5148\u7ea7\u4ece\u9ad8\u5230\u4f4e): 1. \u76f4\u63a5\u4f20\u5165\u7684\u53c2\u6570 2. \u73af\u5883\u53d8\u91cf(\u524d\u7f00 chronflow_) 3. .env \u6587\u4ef6 4. \u9ed8\u8ba4\u503c</p> \u793a\u4f8b"},{"location":"api/config/#chronflow.config.SchedulerConfig--_1","title":"\u4f7f\u7528\u9ed8\u8ba4\u914d\u7f6e","text":"<p>config = SchedulerConfig()</p>"},{"location":"api/config/#chronflow.config.SchedulerConfig--_2","title":"\u81ea\u5b9a\u4e49\u914d\u7f6e","text":"<p>config = SchedulerConfig(max_workers=20, log_level=\"DEBUG\")</p>"},{"location":"api/config/#chronflow.config.SchedulerConfig--chronflow_max_workers20","title":"\u4ece\u73af\u5883\u53d8\u91cf(chronflow_MAX_WORKERS=20)","text":"<p>config = SchedulerConfig()</p>"},{"location":"api/config/#chronflow.config.SchedulerConfig.validate_timezone","title":"<code>validate_timezone(v)</code>  <code>classmethod</code>","text":"<p>\u9a8c\u8bc1\u65f6\u533a\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u3002</p> \u53c2\u6570 <p>v: \u65f6\u533a\u5b57\u7b26\u4e32,\u5982 'UTC', 'Asia/Shanghai'</p> \u8fd4\u56de\u503c <p>\u9a8c\u8bc1\u901a\u8fc7\u7684\u65f6\u533a\u5b57\u7b26\u4e32</p> \u629b\u51fa <p>ValueError: \u65f6\u533a\u5b57\u7b26\u4e32\u65e0\u6548</p>"},{"location":"api/config/#chronflow.config.SchedulerConfig.from_file","title":"<code>from_file(path)</code>  <code>classmethod</code>","text":"<p>\u4ece\u914d\u7f6e\u6587\u4ef6\u52a0\u8f7d\u914d\u7f6e\u3002</p> <p>\u652f\u6301\u7684\u6587\u4ef6\u683c\u5f0f: - JSON (.json) - TOML (.toml) - YAML (.yaml, .yml)</p> \u53c2\u6570 <p>path: \u914d\u7f6e\u6587\u4ef6\u8def\u5f84</p> \u8fd4\u56de\u503c <p>SchedulerConfig \u5b9e\u4f8b</p> \u629b\u51fa <p>FileNotFoundError: \u914d\u7f6e\u6587\u4ef6\u4e0d\u5b58\u5728 ValueError: \u4e0d\u652f\u6301\u7684\u6587\u4ef6\u683c\u5f0f ImportError: \u7f3a\u5c11\u5fc5\u8981\u7684\u89e3\u6790\u5e93(\u5982 PyYAML)</p> \u793a\u4f8b <p>config = SchedulerConfig.from_file(\"config.toml\")</p>"},{"location":"api/config/#taskmetrics","title":"TaskMetrics","text":""},{"location":"api/config/#chronflow.config.TaskMetrics","title":"<code>TaskMetrics</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>\u4efb\u52a1\u6267\u884c\u6307\u6807\u7c7b\u3002</p> <p>\u7528\u4e8e\u7edf\u8ba1\u548c\u8bb0\u5f55\u4efb\u52a1\u7684\u6267\u884c\u60c5\u51b5,\u5305\u62ec\u6210\u529f\u7387\u3001\u6267\u884c\u65f6\u95f4\u7b49\u5173\u952e\u6307\u6807\u3002</p> \u5c5e\u6027 <p>total_runs: \u603b\u8fd0\u884c\u6b21\u6570 successful_runs: \u6210\u529f\u8fd0\u884c\u6b21\u6570 failed_runs: \u5931\u8d25\u8fd0\u884c\u6b21\u6570 total_execution_time: \u603b\u6267\u884c\u65f6\u95f4(\u79d2) average_execution_time: \u5e73\u5747\u6267\u884c\u65f6\u95f4(\u79d2) last_run_time: \u6700\u540e\u4e00\u6b21\u8fd0\u884c\u65f6\u95f4(\u79d2) last_success_time: \u6700\u540e\u4e00\u6b21\u6210\u529f\u65f6\u95f4(\u79d2) last_failure_time: \u6700\u540e\u4e00\u6b21\u5931\u8d25\u65f6\u95f4(\u79d2) consecutive_failures: \u8fde\u7eed\u5931\u8d25\u6b21\u6570</p>"},{"location":"api/config/#chronflow.config.TaskMetrics.update_success","title":"<code>update_success(execution_time)</code>","text":"<p>\u66f4\u65b0\u6210\u529f\u6267\u884c\u7684\u6307\u6807\u3002</p> <p>\u5728\u4efb\u52a1\u6210\u529f\u6267\u884c\u540e\u8c03\u7528,\u66f4\u65b0\u76f8\u5173\u7edf\u8ba1\u6570\u636e\u3002</p> \u53c2\u6570 <p>execution_time: \u672c\u6b21\u6267\u884c\u8017\u65f6(\u79d2)</p>"},{"location":"api/config/#chronflow.config.TaskMetrics.update_failure","title":"<code>update_failure(execution_time)</code>","text":"<p>\u66f4\u65b0\u5931\u8d25\u6267\u884c\u7684\u6307\u6807\u3002</p> <p>\u5728\u4efb\u52a1\u6267\u884c\u5931\u8d25\u540e\u8c03\u7528,\u66f4\u65b0\u76f8\u5173\u7edf\u8ba1\u6570\u636e\u3002</p> \u53c2\u6570 <p>execution_time: \u672c\u6b21\u6267\u884c\u8017\u65f6(\u79d2)</p>"},{"location":"api/decorators/","title":"Decorators API","text":"<p>\u88c5\u9970\u5668 API \u63d0\u4f9b\u4e86\u7b80\u6d01\u4f18\u96c5\u7684\u4efb\u52a1\u5b9a\u4e49\u65b9\u5f0f\u3002</p>"},{"location":"api/decorators/#_1","title":"\u57fa\u7840\u88c5\u9970\u5668","text":""},{"location":"api/decorators/#scheduled","title":"scheduled","text":""},{"location":"api/decorators/#chronflow.decorators.scheduled","title":"<code>scheduled(*, name=None, cron=None, interval=None, start_time=None, end_time=None, max_instances=1, timeout=None, retry_policy=None, enabled=True, tags=None, metadata=None)</code>","text":"<p>\u901a\u7528\u5b9a\u65f6\u4efb\u52a1\u88c5\u9970\u5668\u3002</p> \u53c2\u6570 <p>name: \u4efb\u52a1\u540d\u79f0(\u9ed8\u8ba4\u4f7f\u7528\u51fd\u6570\u540d) cron: Cron \u8868\u8fbe\u5f0f interval: \u95f4\u9694\u65f6\u95f4(\u79d2\u6216 timedelta) start_time: \u5f00\u59cb\u65f6\u95f4 end_time: \u7ed3\u675f\u65f6\u95f4 max_instances: \u6700\u5927\u5e76\u53d1\u5b9e\u4f8b\u6570 timeout: \u8d85\u65f6\u65f6\u95f4(\u79d2) retry_policy: \u91cd\u8bd5\u7b56\u7565 enabled: \u662f\u5426\u542f\u7528 tags: \u6807\u7b7e\u5217\u8868 metadata: \u5143\u6570\u636e</p> \u8fd4\u56de\u503c <p>\u88c5\u9970\u5668\u51fd\u6570</p> \u793a\u4f8b <p>@scheduled(cron=\"/5 * * * * \")  # \u6bcf5\u79d2\u6267\u884c async def my_task():     print(\"\u6267\u884c\u4efb\u52a1\")</p> <p>@scheduled(interval=60, retry_policy=RetryPolicy.aggressive()) async def another_task():     print(\"\u6bcf60\u79d2\u6267\u884c\u4e00\u6b21\")</p>"},{"location":"api/decorators/#cron","title":"cron","text":""},{"location":"api/decorators/#chronflow.decorators.cron","title":"<code>cron(expression, *, name=None, retry_policy=None, timeout=None, **kwargs)</code>","text":"<p>Cron \u8868\u8fbe\u5f0f\u5b9a\u65f6\u4efb\u52a1\u88c5\u9970\u5668\u3002</p> \u53c2\u6570 <p>expression: Cron \u8868\u8fbe\u5f0f(\u652f\u6301\u79d2\u7ea7) name: \u4efb\u52a1\u540d\u79f0 retry_policy: \u91cd\u8bd5\u7b56\u7565 timeout: \u8d85\u65f6\u65f6\u95f4 **kwargs: \u5176\u4ed6\u53c2\u6570</p> \u8fd4\u56de\u503c <p>\u88c5\u9970\u5668\u51fd\u6570</p> \u793a\u4f8b <p>@cron(\"/10 * * * * \")  # \u6bcf10\u79d2\u6267\u884c async def sync_data():     await fetch_and_sync()</p> <p>@cron(\"0 0 * * *\")  # \u6bcf\u5929\u96f6\u70b9\u6267\u884c async def daily_cleanup():     await cleanup_old_data()</p>"},{"location":"api/decorators/#interval","title":"interval","text":""},{"location":"api/decorators/#chronflow.decorators.interval","title":"<code>interval(seconds, *, name=None, retry_policy=None, timeout=None, **kwargs)</code>","text":"<p>\u56fa\u5b9a\u95f4\u9694\u5b9a\u65f6\u4efb\u52a1\u88c5\u9970\u5668\u3002</p> \u53c2\u6570 <p>seconds: \u95f4\u9694\u79d2\u6570\u6216 timedelta name: \u4efb\u52a1\u540d\u79f0 retry_policy: \u91cd\u8bd5\u7b56\u7565 timeout: \u8d85\u65f6\u65f6\u95f4 **kwargs: \u5176\u4ed6\u53c2\u6570</p> \u8fd4\u56de\u503c <p>\u88c5\u9970\u5668\u51fd\u6570</p> \u793a\u4f8b <p>@interval(30)  # \u6bcf30\u79d2\u6267\u884c async def check_health():     await ping_services()</p> <p>@interval(timedelta(hours=1))  # \u6bcf\u5c0f\u65f6\u6267\u884c async def hourly_report():     await generate_report()</p>"},{"location":"api/decorators/#once","title":"once","text":""},{"location":"api/decorators/#chronflow.decorators.once","title":"<code>once(at, *, name=None, retry_policy=None, timeout=None, **kwargs)</code>","text":"<p>\u4e00\u6b21\u6027\u5b9a\u65f6\u4efb\u52a1\u88c5\u9970\u5668\u3002</p> \u53c2\u6570 <p>at: \u6267\u884c\u65f6\u95f4 name: \u4efb\u52a1\u540d\u79f0 retry_policy: \u91cd\u8bd5\u7b56\u7565 timeout: \u8d85\u65f6\u65f6\u95f4 **kwargs: \u5176\u4ed6\u53c2\u6570</p> \u8fd4\u56de\u503c <p>\u88c5\u9970\u5668\u51fd\u6570</p> \u793a\u4f8b <p>@once(datetime(2024, 12, 31, 23, 59, 59)) async def new_year_task():     print(\"\u65b0\u5e74\u5feb\u4e50!\")</p>"},{"location":"api/decorators/#_2","title":"\u4fbf\u6377\u88c5\u9970\u5668","text":""},{"location":"api/decorators/#every","title":"every","text":""},{"location":"api/decorators/#chronflow.decorators.every","title":"<code>every(seconds=None, minutes=None, hours=None, days=None, *, name=None, retry_policy=None, timeout=None, **kwargs)</code>","text":"<p>\u66f4\u76f4\u89c2\u7684\u95f4\u9694\u4efb\u52a1\u88c5\u9970\u5668\u3002</p> \u53c2\u6570 <p>seconds: \u79d2\u6570 minutes: \u5206\u949f\u6570 hours: \u5c0f\u65f6\u6570 days: \u5929\u6570 name: \u4efb\u52a1\u540d\u79f0 retry_policy: \u91cd\u8bd5\u7b56\u7565 timeout: \u8d85\u65f6\u65f6\u95f4 **kwargs: \u5176\u4ed6\u53c2\u6570</p> \u8fd4\u56de\u503c <p>\u88c5\u9970\u5668\u51fd\u6570</p> \u793a\u4f8b <p>@every(minutes=30)  # \u6bcf 30 \u5206\u949f async def half_hourly_task():     print(\"\u6bcf 30 \u5206\u949f\u6267\u884c\")</p> <p>@every(hours=2, minutes=30)  # \u6bcf 2.5 \u5c0f\u65f6 async def custom_interval():     print(\"\u6bcf 2.5 \u5c0f\u65f6\u6267\u884c\")</p>"},{"location":"api/decorators/#hourly","title":"hourly","text":""},{"location":"api/decorators/#chronflow.decorators.hourly","title":"<code>hourly(*, minute=0, name=None, retry_policy=None, timeout=None, **kwargs)</code>","text":"<p>\u6bcf\u5c0f\u65f6\u6267\u884c\u7684\u4efb\u52a1\u88c5\u9970\u5668\u3002</p> \u53c2\u6570 <p>minute: \u5728\u7b2c\u51e0\u5206\u949f\u6267\u884c (0-59),\u9ed8\u8ba4\u4e3a\u6574\u70b9 name: \u4efb\u52a1\u540d\u79f0 retry_policy: \u91cd\u8bd5\u7b56\u7565 timeout: \u8d85\u65f6\u65f6\u95f4 **kwargs: \u5176\u4ed6\u53c2\u6570</p> \u8fd4\u56de\u503c <p>\u88c5\u9970\u5668\u51fd\u6570</p> \u793a\u4f8b <p>@hourly()  # \u6bcf\u5c0f\u65f6\u6574\u70b9\u6267\u884c async def hourly_task():     print(\"\u6bcf\u5c0f\u65f6\u6267\u884c\")</p> <p>@hourly(minute=30)  # \u6bcf\u5c0f\u65f6\u7684\u7b2c 30 \u5206\u949f\u6267\u884c async def half_past():     print(\"\u6bcf\u5c0f\u65f6 30 \u5206\u6267\u884c\")</p>"},{"location":"api/decorators/#daily","title":"daily","text":""},{"location":"api/decorators/#chronflow.decorators.daily","title":"<code>daily(*, hour=0, minute=0, name=None, retry_policy=None, timeout=None, **kwargs)</code>","text":"<p>\u6bcf\u5929\u6267\u884c\u7684\u4efb\u52a1\u88c5\u9970\u5668\u3002</p> \u53c2\u6570 <p>hour: \u5c0f\u65f6 (0-23),\u9ed8\u8ba4\u4e3a 0 \u70b9 minute: \u5206\u949f (0-59),\u9ed8\u8ba4\u4e3a 0 \u5206 name: \u4efb\u52a1\u540d\u79f0 retry_policy: \u91cd\u8bd5\u7b56\u7565 timeout: \u8d85\u65f6\u65f6\u95f4 **kwargs: \u5176\u4ed6\u53c2\u6570</p> \u8fd4\u56de\u503c <p>\u88c5\u9970\u5668\u51fd\u6570</p> \u793a\u4f8b <p>@daily(hour=9, minute=30)  # \u6bcf\u5929 9:30 async def morning_task():     print(\"\u65e9\u4e0a 9:30 \u6267\u884c\")</p> <p>@daily()  # \u6bcf\u5929 0:00 async def midnight_task():     print(\"\u6bcf\u5929\u5348\u591c\u6267\u884c\")</p>"},{"location":"api/decorators/#weekly","title":"weekly","text":""},{"location":"api/decorators/#chronflow.decorators.weekly","title":"<code>weekly(*, day=0, hour=0, minute=0, name=None, retry_policy=None, timeout=None, **kwargs)</code>","text":"<p>\u6bcf\u5468\u6267\u884c\u7684\u4efb\u52a1\u88c5\u9970\u5668\u3002</p> \u53c2\u6570 <p>day: \u661f\u671f\u51e0 (0=\u5468\u65e5, 1=\u5468\u4e00, ..., 6=\u5468\u516d),\u9ed8\u8ba4\u4e3a\u5468\u65e5 hour: \u5c0f\u65f6 (0-23) minute: \u5206\u949f (0-59) name: \u4efb\u52a1\u540d\u79f0 retry_policy: \u91cd\u8bd5\u7b56\u7565 timeout: \u8d85\u65f6\u65f6\u95f4 **kwargs: \u5176\u4ed6\u53c2\u6570</p> \u8fd4\u56de\u503c <p>\u88c5\u9970\u5668\u51fd\u6570</p> \u793a\u4f8b <p>@weekly(day=1, hour=9)  # \u6bcf\u5468\u4e00 9:00 async def weekly_report():     print(\"\u5468\u4e00\u62a5\u8868\")</p> <p>@weekly(day=5, hour=18)  # \u6bcf\u5468\u4e94 18:00 async def tgif():     print(\"\u5468\u4e94\u665a\u4e0a!\")</p>"},{"location":"api/decorators/#monthly","title":"monthly","text":""},{"location":"api/decorators/#chronflow.decorators.monthly","title":"<code>monthly(*, day=1, hour=0, minute=0, name=None, retry_policy=None, timeout=None, **kwargs)</code>","text":"<p>\u6bcf\u6708\u6267\u884c\u7684\u4efb\u52a1\u88c5\u9970\u5668\u3002</p> \u53c2\u6570 <p>day: \u51e0\u53f7 (1-31),\u9ed8\u8ba4\u4e3a 1 \u53f7 hour: \u5c0f\u65f6 (0-23) minute: \u5206\u949f (0-59) name: \u4efb\u52a1\u540d\u79f0 retry_policy: \u91cd\u8bd5\u7b56\u7565 timeout: \u8d85\u65f6\u65f6\u95f4 **kwargs: \u5176\u4ed6\u53c2\u6570</p> \u8fd4\u56de\u503c <p>\u88c5\u9970\u5668\u51fd\u6570</p> \u793a\u4f8b <p>@monthly(day=1, hour=0)  # \u6bcf\u6708 1 \u53f7 0:00 async def monthly_cleanup():     print(\"\u6708\u521d\u6e05\u7406\")</p> <p>@monthly(day=15)  # \u6bcf\u6708 15 \u53f7 0:00 async def mid_month():     print(\"\u6708\u4e2d\u4efb\u52a1\")</p>"},{"location":"api/logging/","title":"Logging API","text":"<p>\u53ef\u63d2\u62d4\u65e5\u5fd7\u7cfb\u7edf\uff0c\u652f\u6301\u591a\u79cd\u65e5\u5fd7\u5e93\u3002</p>"},{"location":"api/logging/#loggeradapter","title":"LoggerAdapter (\u62bd\u8c61\u57fa\u7c7b)","text":""},{"location":"api/logging/#chronflow.logging.LoggerAdapter","title":"<code>LoggerAdapter</code>","text":"<p>               Bases: <code>ABC</code></p> <p>\u65e5\u5fd7\u9002\u914d\u5668\u62bd\u8c61\u57fa\u7c7b\u3002</p> <p>\u7528\u6237\u53ef\u4ee5\u5b9e\u73b0\u6b64\u63a5\u53e3\u6765\u9002\u914d\u81ea\u5df1\u559c\u6b22\u7684\u65e5\u5fd7\u5e93\u3002</p>"},{"location":"api/logging/#chronflow.logging.LoggerAdapter.debug","title":"<code>debug(message, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>\u8bb0\u5f55\u8c03\u8bd5\u4fe1\u606f\u3002</p>"},{"location":"api/logging/#chronflow.logging.LoggerAdapter.info","title":"<code>info(message, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>\u8bb0\u5f55\u4e00\u822c\u4fe1\u606f\u3002</p>"},{"location":"api/logging/#chronflow.logging.LoggerAdapter.warning","title":"<code>warning(message, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>\u8bb0\u5f55\u8b66\u544a\u4fe1\u606f\u3002</p>"},{"location":"api/logging/#chronflow.logging.LoggerAdapter.error","title":"<code>error(message, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>\u8bb0\u5f55\u9519\u8bef\u4fe1\u606f\u3002</p>"},{"location":"api/logging/#chronflow.logging.LoggerAdapter.exception","title":"<code>exception(message, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>\u8bb0\u5f55\u5f02\u5e38\u4fe1\u606f(\u5305\u542b\u5806\u6808)\u3002</p>"},{"location":"api/logging/#structlogadapter","title":"StructlogAdapter","text":""},{"location":"api/logging/#chronflow.logging.StructlogAdapter","title":"<code>StructlogAdapter(logger_name='chronflow')</code>","text":"<p>               Bases: <code>LoggerAdapter</code></p> <p>Structlog \u65e5\u5fd7\u9002\u914d\u5668(\u9ed8\u8ba4)\u3002</p> <p>\u521d\u59cb\u5316 structlog \u9002\u914d\u5668\u3002</p> \u53c2\u6570 <p>logger_name: \u65e5\u5fd7\u8bb0\u5f55\u5668\u540d\u79f0</p>"},{"location":"api/logging/#chronflow.logging.StructlogAdapter.debug","title":"<code>debug(message, **kwargs)</code>","text":"<p>\u8bb0\u5f55\u8c03\u8bd5\u4fe1\u606f\u3002</p>"},{"location":"api/logging/#chronflow.logging.StructlogAdapter.info","title":"<code>info(message, **kwargs)</code>","text":"<p>\u8bb0\u5f55\u4e00\u822c\u4fe1\u606f\u3002</p>"},{"location":"api/logging/#chronflow.logging.StructlogAdapter.warning","title":"<code>warning(message, **kwargs)</code>","text":"<p>\u8bb0\u5f55\u8b66\u544a\u4fe1\u606f\u3002</p>"},{"location":"api/logging/#chronflow.logging.StructlogAdapter.error","title":"<code>error(message, **kwargs)</code>","text":"<p>\u8bb0\u5f55\u9519\u8bef\u4fe1\u606f\u3002</p>"},{"location":"api/logging/#chronflow.logging.StructlogAdapter.exception","title":"<code>exception(message, **kwargs)</code>","text":"<p>\u8bb0\u5f55\u5f02\u5e38\u4fe1\u606f\u3002</p>"},{"location":"api/logging/#loguruadapter","title":"LoguruAdapter","text":""},{"location":"api/logging/#chronflow.logging.LoguruAdapter","title":"<code>LoguruAdapter(logger)</code>","text":"<p>               Bases: <code>LoggerAdapter</code></p> <p>Loguru \u65e5\u5fd7\u9002\u914d\u5668\u3002</p> \u793a\u4f8b <p>from loguru import logger from chronflow.logging import LoguruAdapter</p> <p>scheduler = Scheduler() scheduler.set_logger(LoguruAdapter(logger))</p> <p>\u521d\u59cb\u5316 loguru \u9002\u914d\u5668\u3002</p> \u53c2\u6570 <p>logger: loguru.logger \u5b9e\u4f8b</p>"},{"location":"api/logging/#chronflow.logging.LoguruAdapter.debug","title":"<code>debug(message, **kwargs)</code>","text":"<p>\u8bb0\u5f55\u8c03\u8bd5\u4fe1\u606f\u3002</p>"},{"location":"api/logging/#chronflow.logging.LoguruAdapter.info","title":"<code>info(message, **kwargs)</code>","text":"<p>\u8bb0\u5f55\u4e00\u822c\u4fe1\u606f\u3002</p>"},{"location":"api/logging/#chronflow.logging.LoguruAdapter.warning","title":"<code>warning(message, **kwargs)</code>","text":"<p>\u8bb0\u5f55\u8b66\u544a\u4fe1\u606f\u3002</p>"},{"location":"api/logging/#chronflow.logging.LoguruAdapter.error","title":"<code>error(message, **kwargs)</code>","text":"<p>\u8bb0\u5f55\u9519\u8bef\u4fe1\u606f\u3002</p>"},{"location":"api/logging/#chronflow.logging.LoguruAdapter.exception","title":"<code>exception(message, **kwargs)</code>","text":"<p>\u8bb0\u5f55\u5f02\u5e38\u4fe1\u606f\u3002</p>"},{"location":"api/logging/#stdlibadapter","title":"StdlibAdapter","text":""},{"location":"api/logging/#chronflow.logging.StdlibAdapter","title":"<code>StdlibAdapter(logger)</code>","text":"<p>               Bases: <code>LoggerAdapter</code></p> <p>Python \u6807\u51c6\u5e93 logging \u9002\u914d\u5668\u3002</p> \u793a\u4f8b <p>import logging from chronflow.logging import StdlibAdapter</p> <p>logger = logging.getLogger(\"myapp\") scheduler = Scheduler() scheduler.set_logger(StdlibAdapter(logger))</p> <p>\u521d\u59cb\u5316\u6807\u51c6\u5e93\u9002\u914d\u5668\u3002</p> \u53c2\u6570 <p>logger: logging.Logger \u5b9e\u4f8b</p>"},{"location":"api/logging/#chronflow.logging.StdlibAdapter.debug","title":"<code>debug(message, **kwargs)</code>","text":"<p>\u8bb0\u5f55\u8c03\u8bd5\u4fe1\u606f\u3002</p>"},{"location":"api/logging/#chronflow.logging.StdlibAdapter.info","title":"<code>info(message, **kwargs)</code>","text":"<p>\u8bb0\u5f55\u4e00\u822c\u4fe1\u606f\u3002</p>"},{"location":"api/logging/#chronflow.logging.StdlibAdapter.warning","title":"<code>warning(message, **kwargs)</code>","text":"<p>\u8bb0\u5f55\u8b66\u544a\u4fe1\u606f\u3002</p>"},{"location":"api/logging/#chronflow.logging.StdlibAdapter.error","title":"<code>error(message, **kwargs)</code>","text":"<p>\u8bb0\u5f55\u9519\u8bef\u4fe1\u606f\u3002</p>"},{"location":"api/logging/#chronflow.logging.StdlibAdapter.exception","title":"<code>exception(message, **kwargs)</code>","text":"<p>\u8bb0\u5f55\u5f02\u5e38\u4fe1\u606f\u3002</p>"},{"location":"api/logging/#noopadapter","title":"NoOpAdapter","text":""},{"location":"api/logging/#chronflow.logging.NoOpAdapter","title":"<code>NoOpAdapter</code>","text":"<p>               Bases: <code>LoggerAdapter</code></p> <p>\u7a7a\u64cd\u4f5c\u65e5\u5fd7\u9002\u914d\u5668,\u4e0d\u8f93\u51fa\u4efb\u4f55\u65e5\u5fd7\u3002</p> <p>\u7528\u4e8e\u5b8c\u5168\u7981\u7528\u65e5\u5fd7\u8f93\u51fa\u3002</p>"},{"location":"api/logging/#chronflow.logging.NoOpAdapter.debug","title":"<code>debug(message, **kwargs)</code>","text":"<p>\u4e0d\u8bb0\u5f55\u3002</p>"},{"location":"api/logging/#chronflow.logging.NoOpAdapter.info","title":"<code>info(message, **kwargs)</code>","text":"<p>\u4e0d\u8bb0\u5f55\u3002</p>"},{"location":"api/logging/#chronflow.logging.NoOpAdapter.warning","title":"<code>warning(message, **kwargs)</code>","text":"<p>\u4e0d\u8bb0\u5f55\u3002</p>"},{"location":"api/logging/#chronflow.logging.NoOpAdapter.error","title":"<code>error(message, **kwargs)</code>","text":"<p>\u4e0d\u8bb0\u5f55\u3002</p>"},{"location":"api/logging/#chronflow.logging.NoOpAdapter.exception","title":"<code>exception(message, **kwargs)</code>","text":"<p>\u4e0d\u8bb0\u5f55\u3002</p>"},{"location":"api/metrics/","title":"Metrics API","text":"<p>\u6027\u80fd\u6307\u6807\u6536\u96c6\u6a21\u5757,\u7528\u4e8e\u76d1\u63a7\u548c\u5206\u6790\u4efb\u52a1\u6267\u884c\u60c5\u51b5\u3002</p>"},{"location":"api/metrics/#metricscollector","title":"MetricsCollector","text":""},{"location":"api/metrics/#chronflow.metrics.MetricsCollector","title":"<code>MetricsCollector(total_executions=0, successful_executions=0, failed_executions=0, total_duration=0.0, task_stats=dict(), start_time=datetime.now())</code>  <code>dataclass</code>","text":"<p>\u6307\u6807\u6536\u96c6\u5668,\u7528\u4e8e\u6536\u96c6\u8c03\u5ea6\u5668\u6027\u80fd\u6307\u6807\u3002</p> \u793a\u4f8b <pre><code>collector = MetricsCollector()\n\n# \u8bb0\u5f55\u4efb\u52a1\u6267\u884c\ncollector.record_task_execution(\"my_task\", success=True, duration=1.5)\n\n# \u83b7\u53d6\u7edf\u8ba1\u4fe1\u606f\nstats = collector.get_stats()\nprint(f\"\u603b\u6267\u884c\u6b21\u6570: {stats['total_executions']}\")\n</code></pre>"},{"location":"api/metrics/#chronflow.metrics.MetricsCollector.record_task_execution","title":"<code>record_task_execution(task_name, success, duration)</code>","text":"<p>\u8bb0\u5f55\u4efb\u52a1\u6267\u884c\u3002</p> \u53c2\u6570 <p>task_name: \u4efb\u52a1\u540d\u79f0 success: \u662f\u5426\u6210\u529f duration: \u6267\u884c\u65f6\u957f(\u79d2)</p>"},{"location":"api/metrics/#chronflow.metrics.MetricsCollector.get_stats","title":"<code>get_stats()</code>","text":"<p>\u83b7\u53d6\u7edf\u8ba1\u4fe1\u606f\u3002</p> \u8fd4\u56de\u503c <p>\u5305\u542b\u6240\u6709\u7edf\u8ba1\u4fe1\u606f\u7684\u5b57\u5178</p>"},{"location":"api/metrics/#chronflow.metrics.MetricsCollector.export_prometheus","title":"<code>export_prometheus()</code>","text":"<p>\u5bfc\u51fa Prometheus \u683c\u5f0f\u7684\u6307\u6807\u3002</p> \u8fd4\u56de\u503c <p>Prometheus \u683c\u5f0f\u7684\u6307\u6807\u6587\u672c</p> \u793a\u4f8b <pre><code>metrics_text = collector.export_prometheus()\n# \u53ef\u4ee5\u901a\u8fc7 HTTP \u7aef\u70b9\u66b4\u9732\u7ed9 Prometheus\n</code></pre>"},{"location":"api/metrics/#chronflow.metrics.MetricsCollector.reset","title":"<code>reset()</code>","text":"<p>\u91cd\u7f6e\u6240\u6709\u7edf\u8ba1\u4fe1\u606f\u3002</p>"},{"location":"api/retry/","title":"Retry API","text":"<p>\u91cd\u8bd5\u673a\u5236\u6a21\u5757\uff0c\u63d0\u4f9b\u7075\u6d3b\u7684\u4efb\u52a1\u5931\u8d25\u91cd\u8bd5\u529f\u80fd\u3002</p>"},{"location":"api/retry/#retrypolicy","title":"RetryPolicy","text":""},{"location":"api/retry/#chronflow.retry.RetryPolicy","title":"<code>RetryPolicy</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>\u4efb\u52a1\u91cd\u8bd5\u884c\u4e3a\u7684\u914d\u7f6e\u3002</p>"},{"location":"api/retry/#chronflow.retry.RetryPolicy.create_retryer","title":"<code>create_retryer()</code>","text":"<p>\u521b\u5efa\u4e00\u4e2a tenacity \u7684 AsyncRetrying \u5b9e\u4f8b\u3002</p>"},{"location":"api/retry/#chronflow.retry.RetryPolicy.no_retry","title":"<code>no_retry()</code>  <code>staticmethod</code>","text":"<p>\u521b\u5efa\u4e0d\u91cd\u8bd5\u7b56\u7565\u3002</p>"},{"location":"api/retry/#chronflow.retry.RetryPolicy.default","title":"<code>default()</code>  <code>staticmethod</code>","text":"<p>\u521b\u5efa\u9ed8\u8ba4\u91cd\u8bd5\u7b56\u7565\u3002</p>"},{"location":"api/retry/#chronflow.retry.RetryPolicy.aggressive","title":"<code>aggressive()</code>  <code>staticmethod</code>","text":"<p>\u521b\u5efa\u66f4\u6fc0\u8fdb\u7684\u91cd\u8bd5\u7b56\u7565,\u5305\u542b\u66f4\u591a\u5c1d\u8bd5\u6b21\u6570\u3002</p>"},{"location":"api/retry/#retrystrategy","title":"RetryStrategy","text":""},{"location":"api/retry/#chronflow.retry.RetryStrategy","title":"<code>RetryStrategy</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u91cd\u8bd5\u7b56\u7565\u7c7b\u578b\u3002</p>"},{"location":"api/scheduler/","title":"Scheduler API","text":""},{"location":"api/scheduler/#chronflow.scheduler.Scheduler","title":"<code>Scheduler(config=None, backend=None, logger=None, enable_metrics=False)</code>","text":"<p>\u9ad8\u6027\u80fd\u5f02\u6b65\u4efb\u52a1\u8c03\u5ea6\u5668\u3002</p> <p>\u7279\u6027: - \u652f\u6301\u79d2\u7ea7\u7cbe\u5ea6\u7684\u5b9a\u65f6\u4efb\u52a1 - \u53ef\u63d2\u62d4\u7684\u540e\u7aef\u5b58\u50a8(\u5185\u5b58/Redis/RabbitMQ/SQLite) - \u53ef\u63d2\u62d4\u7684\u65e5\u5fd7\u7cfb\u7edf(structlog/loguru/stdlib) - \u4f18\u96c5\u5173\u95ed\u548c\u4fe1\u53f7\u5904\u7406 - \u81ea\u52a8\u91cd\u8bd5\u673a\u5236 - \u4efb\u52a1\u4f18\u5148\u7ea7\u548c\u5e76\u53d1\u63a7\u5236</p> <p>\u521d\u59cb\u5316\u8c03\u5ea6\u5668\u3002</p> \u53c2\u6570 <p>config: \u8c03\u5ea6\u5668\u914d\u7f6e,\u9ed8\u8ba4\u4f7f\u7528 SchedulerConfig() backend: \u961f\u5217\u540e\u7aef,\u9ed8\u8ba4\u4f7f\u7528 MemoryBackend logger: \u65e5\u5fd7\u9002\u914d\u5668,\u9ed8\u8ba4\u4f7f\u7528 structlog enable_metrics: \u662f\u5426\u542f\u7528\u6027\u80fd\u6307\u6807\u6536\u96c6</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.set_logger","title":"<code>set_logger(logger)</code>","text":"<p>\u8bbe\u7f6e\u65e5\u5fd7\u9002\u914d\u5668\u3002</p> \u53c2\u6570 <p>logger: \u65e5\u5fd7\u9002\u914d\u5668\u5b9e\u4f8b</p> \u793a\u4f8b <p>from loguru import logger from chronflow.logging import LoguruAdapter</p> <p>scheduler.set_logger(LoguruAdapter(logger))</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.register_task","title":"<code>register_task(task)</code>","text":"<p>\u6ce8\u518c\u4efb\u52a1\u5230\u8c03\u5ea6\u5668\u3002</p> \u53c2\u6570 <p>task: \u8981\u6ce8\u518c\u7684\u4efb\u52a1\u5b9e\u4f8b</p> \u629b\u51fa <p>ValueError: \u4efb\u52a1\u540d\u79f0\u5df2\u5b58\u5728</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.unregister_task","title":"<code>unregister_task(task_name)</code>","text":"<p>\u6ce8\u9500\u4efb\u52a1\u3002</p> \u53c2\u6570 <p>task_name: \u4efb\u52a1\u540d\u79f0</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.get_task","title":"<code>get_task(task_name)</code>","text":"<p>\u83b7\u53d6\u4efb\u52a1\u5b9e\u4f8b\u3002</p> \u53c2\u6570 <p>task_name: \u4efb\u52a1\u540d\u79f0</p> \u8fd4\u56de\u503c <p>\u4efb\u52a1\u5b9e\u4f8b,\u5982\u679c\u4e0d\u5b58\u5728\u8fd4\u56de None</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.start","title":"<code>start(daemon=False)</code>  <code>async</code>","text":"<p>\u542f\u52a8\u8c03\u5ea6\u5668\u3002</p> \u53c2\u6570 <p>daemon: \u662f\u5426\u4ee5\u5b88\u62a4\u8fdb\u7a0b\u6a21\u5f0f\u8fd0\u884c</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.stop","title":"<code>stop()</code>  <code>async</code>","text":"<p>\u505c\u6b62\u8c03\u5ea6\u5668\u3002</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.run_context","title":"<code>run_context()</code>  <code>async</code>","text":"<p>\u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u8fd0\u884c\u8c03\u5ea6\u5668\u3002</p> \u793a\u4f8b <p>async with scheduler.run_context():     # \u8c03\u5ea6\u5668\u5728\u8fd9\u91cc\u8fd0\u884c     await asyncio.sleep(60)</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.run_context--_1","title":"\u81ea\u52a8\u505c\u6b62\u8c03\u5ea6\u5668","text":""},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.get_stats","title":"<code>get_stats()</code>  <code>async</code>","text":"<p>\u83b7\u53d6\u8c03\u5ea6\u5668\u7edf\u8ba1\u4fe1\u606f\u3002</p> \u8fd4\u56de\u503c <p>\u5305\u542b\u7edf\u8ba1\u4fe1\u606f\u7684\u5b57\u5178</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.list_tasks","title":"<code>list_tasks()</code>","text":"<p>\u83b7\u53d6\u6240\u6709\u4efb\u52a1\u5217\u8868\u3002</p> \u8fd4\u56de\u503c <p>\u4efb\u52a1\u4fe1\u606f\u5217\u8868</p> \u793a\u4f8b <p>tasks = scheduler.list_tasks() for task_info in tasks:     print(f\"{task_info['name']}: {task_info['status']}\")</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.get_task_count","title":"<code>get_task_count()</code>","text":"<p>\u83b7\u53d6\u5404\u72b6\u6001\u4efb\u52a1\u6570\u91cf\u7edf\u8ba1\u3002</p> \u8fd4\u56de\u503c <p>\u4efb\u52a1\u6570\u91cf\u7edf\u8ba1\u5b57\u5178</p> \u793a\u4f8b <p>counts = scheduler.get_task_count() print(f\"\u8fd0\u884c\u4e2d: {counts['running']}\") print(f\"\u5931\u8d25: {counts['failed']}\")</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.get_task_by_status","title":"<code>get_task_by_status(status)</code>","text":"<p>\u6839\u636e\u72b6\u6001\u83b7\u53d6\u4efb\u52a1\u5217\u8868\u3002</p> \u53c2\u6570 <p>status: \u4efb\u52a1\u72b6\u6001</p> \u8fd4\u56de\u503c <p>\u7b26\u5408\u72b6\u6001\u7684\u4efb\u52a1\u5217\u8868</p> \u793a\u4f8b <p>failed_tasks = scheduler.get_task_by_status(TaskStatus.FAILED) for task in failed_tasks:     print(f\"\u5931\u8d25\u4efb\u52a1: {task.config.name}\")</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.get_task_by_tag","title":"<code>get_task_by_tag(tag)</code>","text":"<p>\u6839\u636e\u6807\u7b7e\u83b7\u53d6\u4efb\u52a1\u5217\u8868\u3002</p> \u53c2\u6570 <p>tag: \u6807\u7b7e\u540d\u79f0</p> \u8fd4\u56de\u503c <p>\u5305\u542b\u8be5\u6807\u7b7e\u7684\u4efb\u52a1\u5217\u8868</p> \u793a\u4f8b <p>critical_tasks = scheduler.get_task_by_tag(\"critical\")</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.pause_task","title":"<code>pause_task(task_name)</code>  <code>async</code>","text":"<p>\u6682\u505c\u4efb\u52a1(\u7981\u7528)\u3002</p> \u53c2\u6570 <p>task_name: \u4efb\u52a1\u540d\u79f0</p> \u8fd4\u56de\u503c <p>\u662f\u5426\u6210\u529f\u6682\u505c</p> \u793a\u4f8b <p>await scheduler.pause_task(\"my_task\")</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.resume_task","title":"<code>resume_task(task_name)</code>  <code>async</code>","text":"<p>\u6062\u590d\u4efb\u52a1(\u542f\u7528)\u3002</p> \u53c2\u6570 <p>task_name: \u4efb\u52a1\u540d\u79f0</p> \u8fd4\u56de\u503c <p>\u662f\u5426\u6210\u529f\u6062\u590d</p> \u793a\u4f8b <p>await scheduler.resume_task(\"my_task\")</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.get_metrics","title":"<code>get_metrics()</code>","text":"<p>\u83b7\u53d6\u6027\u80fd\u6307\u6807\u3002</p> \u8fd4\u56de\u503c <p>\u6027\u80fd\u6307\u6807\u5b57\u5178,\u5982\u679c\u672a\u542f\u7528\u6307\u6807\u6536\u96c6\u5219\u8fd4\u56de None</p> \u793a\u4f8b <p>if scheduler.metrics_collector:     metrics = scheduler.get_metrics()     print(f\"\u603b\u6267\u884c\u6b21\u6570: {metrics['total_executions']}\")     print(f\"\u6210\u529f\u7387: {metrics['success_rate']:.2%}\")</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.export_prometheus_metrics","title":"<code>export_prometheus_metrics()</code>","text":"<p>\u5bfc\u51fa Prometheus \u683c\u5f0f\u7684\u6307\u6807\u3002</p> \u8fd4\u56de\u503c <p>Prometheus \u683c\u5f0f\u7684\u6307\u6807\u6587\u672c,\u5982\u679c\u672a\u542f\u7528\u6307\u6807\u6536\u96c6\u5219\u8fd4\u56de None</p> \u793a\u4f8b <p>metrics_text = scheduler.export_prometheus_metrics() if metrics_text:     # \u53ef\u4ee5\u901a\u8fc7 HTTP \u7aef\u70b9\u66b4\u9732\u7ed9 Prometheus     print(metrics_text)</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.reset_metrics","title":"<code>reset_metrics()</code>","text":"<p>\u91cd\u7f6e\u6027\u80fd\u6307\u6807\u3002</p> \u793a\u4f8b <p>scheduler.reset_metrics()</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.__repr__","title":"<code>__repr__()</code>","text":"<p>\u5b57\u7b26\u4e32\u8868\u793a\u3002</p>"},{"location":"api/task/","title":"Task API","text":""},{"location":"api/task/#task","title":"Task","text":""},{"location":"api/task/#chronflow.task.Task","title":"<code>Task(func, config)</code>","text":"<p>\u8868\u793a\u4e00\u4e2a\u5e26\u6709\u6267\u884c\u903b\u8f91\u7684\u5b9a\u65f6\u4efb\u52a1\u3002</p> <p>\u521d\u59cb\u5316\u4efb\u52a1\u3002</p> \u53c2\u6570 <p>func: \u8981\u6267\u884c\u7684\u5f02\u6b65\u51fd\u6570 config: \u4efb\u52a1\u914d\u7f6e</p>"},{"location":"api/task/#chronflow.task.Task.execute","title":"<code>execute(*args, **kwargs)</code>  <code>async</code>","text":"<p>\u4f7f\u7528\u91cd\u8bd5\u903b\u8f91\u6267\u884c\u4efb\u52a1\u3002</p>"},{"location":"api/task/#chronflow.task.Task.cancel","title":"<code>cancel()</code>  <code>async</code>","text":"<p>\u53d6\u6d88\u4efb\u52a1\u3002</p>"},{"location":"api/task/#chronflow.task.Task.is_cancelled","title":"<code>is_cancelled()</code>","text":"<p>\u68c0\u67e5\u4efb\u52a1\u662f\u5426\u5df2\u88ab\u53d6\u6d88\u3002</p>"},{"location":"api/task/#chronflow.task.Task.__repr__","title":"<code>__repr__()</code>","text":"<p>\u4efb\u52a1\u7684\u5b57\u7b26\u4e32\u8868\u793a\u5f62\u5f0f\u3002</p>"},{"location":"api/task/#taskconfig","title":"TaskConfig","text":""},{"location":"api/task/#chronflow.task.TaskConfig","title":"<code>TaskConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>\u5b9a\u65f6\u4efb\u52a1\u914d\u7f6e\u3002</p>"},{"location":"api/task/#chronflow.task.TaskConfig.get_next_run_time","title":"<code>get_next_run_time(after=None)</code>","text":"<p>\u6839\u636e\u8c03\u5ea6\u8ba1\u7b97\u4e0b\u6b21\u8fd0\u884c\u65f6\u95f4\u3002</p>"},{"location":"api/task/#taskstatus","title":"TaskStatus","text":""},{"location":"api/task/#chronflow.task.TaskStatus","title":"<code>TaskStatus</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u4efb\u52a1\u6267\u884c\u72b6\u6001\u3002</p>"},{"location":"api/task/#scheduletype","title":"ScheduleType","text":""},{"location":"api/task/#chronflow.task.ScheduleType","title":"<code>ScheduleType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u4efb\u52a1\u8c03\u5ea6\u7c7b\u578b\u3002</p>"},{"location":"guides/backends/","title":"\u961f\u5217\u540e\u7aef","text":"<p>chronflow \u652f\u6301\u591a\u79cd\u961f\u5217\u540e\u7aef\uff0c\u4f60\u53ef\u4ee5\u6839\u636e\u5e94\u7528\u573a\u666f\u9009\u62e9\u5408\u9002\u7684\u540e\u7aef\u3002</p>"},{"location":"guides/backends/#_2","title":"\u540e\u7aef\u5bf9\u6bd4","text":"\u540e\u7aef \u9002\u7528\u573a\u666f \u6301\u4e45\u5316 \u5206\u5e03\u5f0f \u6027\u80fd \u4f9d\u8d56 Memory \u5f00\u53d1\u3001\u6d4b\u8bd5\u3001\u5355\u673a \u2717 \u2717 \u2b50\u2b50\u2b50\u2b50\u2b50 \u65e0 SQLite \u5355\u673a\u751f\u4ea7\u3001\u9700\u8981\u6301\u4e45\u5316 \u2713 \u2717 \u2b50\u2b50\u2b50\u2b50 \u65e0 Redis \u5206\u5e03\u5f0f\u3001\u9ad8\u6027\u80fd \u2713 \u2713 \u2b50\u2b50\u2b50\u2b50\u2b50 Redis RabbitMQ \u9ad8\u53ef\u9760\u6027\u3001\u6d88\u606f\u961f\u5217 \u2713 \u2713 \u2b50\u2b50\u2b50\u2b50 RabbitMQ"},{"location":"guides/backends/#memory-backend","title":"Memory Backend (\u5185\u5b58\u961f\u5217)","text":""},{"location":"guides/backends/#_3","title":"\u7279\u70b9","text":"<ul> <li>\u2705 \u96f6\u5916\u90e8\u4f9d\u8d56\uff0c\u5f00\u7bb1\u5373\u7528</li> <li>\u2705 \u6027\u80fd\u6700\u9ad8\uff0c\u9002\u5408\u9ad8\u9891\u4efb\u52a1</li> <li>\u2705 \u9002\u5408\u5f00\u53d1\u548c\u6d4b\u8bd5</li> <li>\u274c \u91cd\u542f\u540e\u4efb\u52a1\u4e22\u5931</li> <li>\u274c \u4e0d\u652f\u6301\u5206\u5e03\u5f0f</li> </ul>"},{"location":"guides/backends/#_4","title":"\u4f7f\u7528\u65b9\u6cd5","text":"<pre><code>from chronflow import Scheduler\n\n# \u9ed8\u8ba4\u4f7f\u7528\u5185\u5b58\u540e\u7aef\nscheduler = Scheduler()\n</code></pre>"},{"location":"guides/backends/#_5","title":"\u6027\u80fd","text":"<ul> <li>\u541e\u5410\u91cf: 10000+ tasks/s</li> <li>\u5ef6\u8fdf: &lt;1ms (p99)</li> <li>\u5185\u5b58\u5360\u7528: ~50MB</li> </ul>"},{"location":"guides/backends/#sqlite-backend","title":"SQLite Backend (\u672c\u5730\u6301\u4e45\u5316)","text":""},{"location":"guides/backends/#_6","title":"\u7279\u70b9","text":"<ul> <li>\u2705 \u672c\u5730\u6587\u4ef6\u6301\u4e45\u5316\uff0c\u91cd\u542f\u4e0d\u4e22\u4efb\u52a1</li> <li>\u2705 \u96f6\u5916\u90e8\u670d\u52a1\u4f9d\u8d56</li> <li>\u2705 \u652f\u6301\u4efb\u52a1\u5386\u53f2\u67e5\u8be2</li> <li>\u2705 WAL \u6a21\u5f0f\u63d0\u5347\u5e76\u53d1\u6027\u80fd</li> <li>\u274c \u4e0d\u652f\u6301\u5206\u5e03\u5f0f</li> </ul>"},{"location":"guides/backends/#_7","title":"\u4f7f\u7528\u65b9\u6cd5","text":"<pre><code>from chronflow import Scheduler\nfrom chronflow.backends import SQLiteBackend\n\n# \u521b\u5efa SQLite \u540e\u7aef\nbackend = SQLiteBackend(db_path=\"scheduler.db\")\nscheduler = Scheduler(backend=backend)\n</code></pre>"},{"location":"guides/backends/#_8","title":"\u914d\u7f6e\u9009\u9879","text":"<pre><code>backend = SQLiteBackend(\n    db_path=\"scheduler.db\",     # \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n    max_retries=3,               # \u6700\u5927\u91cd\u8bd5\u6b21\u6570\n    timeout=30.0                 # \u8d85\u65f6\u65f6\u95f4\uff08\u79d2\uff09\n)\n</code></pre>"},{"location":"guides/backends/#_9","title":"\u6570\u636e\u5e93\u7ed3\u6784","text":"<p>SQLiteBackend \u4f1a\u81ea\u52a8\u521b\u5efa\u4ee5\u4e0b\u8868\u7ed3\u6784\uff1a</p> <pre><code>CREATE TABLE task_queue (\n    task_id TEXT PRIMARY KEY,\n    task_name TEXT NOT NULL,\n    scheduled_time REAL NOT NULL,\n    priority INTEGER DEFAULT 0,\n    status TEXT DEFAULT 'pending',\n    retry_count INTEGER DEFAULT 0,\n    task_data TEXT NOT NULL,\n    created_at REAL DEFAULT (julianday('now')),\n    updated_at REAL DEFAULT (julianday('now'))\n);\n\nCREATE INDEX idx_scheduled_time ON task_queue(scheduled_time);\nCREATE INDEX idx_status ON task_queue(status);\n</code></pre>"},{"location":"guides/backends/#_10","title":"\u6027\u80fd","text":"<ul> <li>\u541e\u5410\u91cf: 5000+ tasks/s</li> <li>\u5ef6\u8fdf: &lt;5ms (p99)</li> <li>\u5185\u5b58\u5360\u7528: ~80MB</li> </ul>"},{"location":"guides/backends/#_11","title":"\u6e05\u7406\u5386\u53f2\u6570\u636e","text":"<pre><code>from chronflow.backends import SQLiteBackend\n\nbackend = SQLiteBackend(\"scheduler.db\")\n\n# \u6e05\u74067\u5929\u524d\u7684\u5df2\u5b8c\u6210\u4efb\u52a1\nawait backend.cleanup_old_tasks(days=7)\n</code></pre>"},{"location":"guides/backends/#redis-backend","title":"Redis Backend (\u5206\u5e03\u5f0f\u961f\u5217)","text":""},{"location":"guides/backends/#_12","title":"\u7279\u70b9","text":"<ul> <li>\u2705 \u652f\u6301\u5206\u5e03\u5f0f\u90e8\u7f72\uff08\u591a\u4e2a\u8c03\u5ea6\u5668\u5b9e\u4f8b\uff09</li> <li>\u2705 \u9ad8\u6027\u80fd\uff0c\u4f4e\u5ef6\u8fdf</li> <li>\u2705 \u6570\u636e\u6301\u4e45\u5316\uff08\u53d6\u51b3\u4e8e Redis \u914d\u7f6e\uff09</li> <li>\u2705 \u652f\u6301\u96c6\u7fa4\u6a21\u5f0f</li> <li>\u274c \u9700\u8981 Redis \u670d\u52a1</li> </ul>"},{"location":"guides/backends/#_13","title":"\u5b89\u88c5","text":"<pre><code>pip install chronflow[redis]\n</code></pre>"},{"location":"guides/backends/#_14","title":"\u4f7f\u7528\u65b9\u6cd5","text":"<pre><code>from chronflow import Scheduler\nfrom chronflow.backends import RedisBackend\n\n# \u521b\u5efa Redis \u540e\u7aef\nbackend = RedisBackend(url=\"redis://localhost:6379/0\")\nscheduler = Scheduler(backend=backend)\n</code></pre>"},{"location":"guides/backends/#_15","title":"\u914d\u7f6e\u9009\u9879","text":"<pre><code>backend = RedisBackend(\n    url=\"redis://localhost:6379/0\",     # Redis \u8fde\u63a5 URL\n    key_prefix=\"chronflow:\",            # \u952e\u524d\u7f00\n    max_connections=10,                  # \u6700\u5927\u8fde\u63a5\u6570\n    socket_timeout=5.0,                  # Socket \u8d85\u65f6\n    socket_connect_timeout=5.0,          # \u8fde\u63a5\u8d85\u65f6\n)\n</code></pre>"},{"location":"guides/backends/#redis-url","title":"Redis URL \u683c\u5f0f","text":"<pre><code># \u57fa\u7840\u8fde\u63a5\n\"redis://localhost:6379/0\"\n\n# \u5e26\u5bc6\u7801\n\"redis://:password@localhost:6379/0\"\n\n# \u5e26\u7528\u6237\u540d\u548c\u5bc6\u7801\n\"redis://username:password@localhost:6379/0\"\n\n# Redis Sentinel\n\"redis+sentinel://sentinel-host:26379/mymaster/0\"\n\n# Redis Cluster\n\"redis://localhost:7000,localhost:7001,localhost:7002/0\"\n</code></pre>"},{"location":"guides/backends/#_16","title":"\u6027\u80fd","text":"<ul> <li>\u541e\u5410\u91cf: 8000+ tasks/s</li> <li>\u5ef6\u8fdf: &lt;3ms (p99)</li> <li>\u5185\u5b58\u5360\u7528: ~60MB</li> </ul>"},{"location":"guides/backends/#_17","title":"\u6570\u636e\u7ed3\u6784","text":"<p>RedisBackend \u4f7f\u7528\u4ee5\u4e0b Redis \u6570\u636e\u7ed3\u6784\uff1a</p> <ul> <li>Sorted Set (zset): \u5b58\u50a8\u4efb\u52a1\u961f\u5217\uff0c\u6309\u8c03\u5ea6\u65f6\u95f4\u6392\u5e8f</li> <li>Set: \u5b58\u50a8\u6b63\u5728\u6267\u884c\u7684\u4efb\u52a1 ID</li> </ul> <pre><code># \u4efb\u52a1\u961f\u5217 (zset)\n# Key: chronflow:queue\n# Score: scheduled_time - priority*1000\n# Member: JSON \u5e8f\u5217\u5316\u7684\u4efb\u52a1\u6570\u636e\n\n# \u6b63\u5728\u6267\u884c\u7684\u4efb\u52a1 (set)\n# Key: chronflow:pending\n# Members: task IDs\n</code></pre>"},{"location":"guides/backends/#rabbitmq-backend","title":"RabbitMQ Backend (\u6d88\u606f\u961f\u5217)","text":""},{"location":"guides/backends/#_18","title":"\u7279\u70b9","text":"<ul> <li>\u2705 \u9ad8\u53ef\u9760\u6027\u6d88\u606f\u961f\u5217</li> <li>\u2705 \u652f\u6301\u5206\u5e03\u5f0f\u90e8\u7f72</li> <li>\u2705 \u652f\u6301\u6d88\u606f\u6301\u4e45\u5316</li> <li>\u2705 \u652f\u6301\u6d88\u606f\u786e\u8ba4\u673a\u5236</li> <li>\u274c \u9700\u8981 RabbitMQ \u670d\u52a1</li> </ul>"},{"location":"guides/backends/#_19","title":"\u5b89\u88c5","text":"<pre><code>pip install chronflow[rabbitmq]\n</code></pre>"},{"location":"guides/backends/#_20","title":"\u4f7f\u7528\u65b9\u6cd5","text":"<pre><code>from chronflow import Scheduler\nfrom chronflow.backends import RabbitMQBackend\n\n# \u521b\u5efa RabbitMQ \u540e\u7aef\nbackend = RabbitMQBackend(url=\"amqp://guest:guest@localhost:5672/\")\nscheduler = Scheduler(backend=backend)\n</code></pre>"},{"location":"guides/backends/#_21","title":"\u914d\u7f6e\u9009\u9879","text":"<pre><code>backend = RabbitMQBackend(\n    url=\"amqp://guest:guest@localhost:5672/\",  # RabbitMQ \u8fde\u63a5 URL\n    queue_name=\"chronflow_tasks\",             # \u961f\u5217\u540d\u79f0\n    exchange_name=\"chronflow\",                # \u4ea4\u6362\u673a\u540d\u79f0\n    durable=True,                              # \u6301\u4e45\u5316\u961f\u5217\n    max_priority=10,                           # \u6700\u5927\u4f18\u5148\u7ea7\n)\n</code></pre>"},{"location":"guides/backends/#rabbitmq-url","title":"RabbitMQ URL \u683c\u5f0f","text":"<pre><code># \u57fa\u7840\u8fde\u63a5\n\"amqp://guest:guest@localhost:5672/\"\n\n# \u6307\u5b9a\u865a\u62df\u4e3b\u673a\n\"amqp://user:password@localhost:5672/my_vhost\"\n\n# \u4f7f\u7528 TLS/SSL\n\"amqps://user:password@localhost:5671/\"\n</code></pre>"},{"location":"guides/backends/#_22","title":"\u6027\u80fd","text":"<ul> <li>\u541e\u5410\u91cf: 6000+ tasks/s</li> <li>\u5ef6\u8fdf: &lt;5ms (p99)</li> <li>\u5185\u5b58\u5360\u7528: ~70MB</li> </ul>"},{"location":"guides/backends/#_23","title":"\u81ea\u5b9a\u4e49\u540e\u7aef","text":"<p>\u4f60\u53ef\u4ee5\u5b9e\u73b0\u81ea\u5df1\u7684\u961f\u5217\u540e\u7aef\uff1a</p> <pre><code>from chronflow.backends import QueueBackend\nfrom chronflow.task import Task\nfrom datetime import datetime\nfrom typing import Optional\n\nclass MyCustomBackend(QueueBackend):\n    \"\"\"\u81ea\u5b9a\u4e49\u961f\u5217\u540e\u7aef\u3002\"\"\"\n\n    async def connect(self) -&gt; None:\n        \"\"\"\u8fde\u63a5\u5230\u540e\u7aef\u3002\"\"\"\n        # \u521d\u59cb\u5316\u8fde\u63a5\n        pass\n\n    async def disconnect(self) -&gt; None:\n        \"\"\"\u65ad\u5f00\u8fde\u63a5\u3002\"\"\"\n        # \u5173\u95ed\u8fde\u63a5\n        pass\n\n    async def enqueue(self, task: Task, scheduled_time: datetime,\n                     priority: int = 0) -&gt; None:\n        \"\"\"\u5c06\u4efb\u52a1\u52a0\u5165\u961f\u5217\u3002\"\"\"\n        # \u5b9e\u73b0\u5165\u961f\u903b\u8f91\n        pass\n\n    async def dequeue(self, max_items: int = 1) -&gt; list[Task]:\n        \"\"\"\u4ece\u961f\u5217\u53d6\u51fa\u5c31\u7eea\u4efb\u52a1\u3002\"\"\"\n        # \u5b9e\u73b0\u51fa\u961f\u903b\u8f91\n        pass\n\n    async def acknowledge(self, task: Task) -&gt; None:\n        \"\"\"\u786e\u8ba4\u4efb\u52a1\u5b8c\u6210\u3002\"\"\"\n        # \u5b9e\u73b0\u786e\u8ba4\u903b\u8f91\n        pass\n\n    async def reject(self, task: Task, requeue: bool = False) -&gt; None:\n        \"\"\"\u62d2\u7edd\u4efb\u52a1\uff08\u5931\u8d25\u5904\u7406\uff09\u3002\"\"\"\n        # \u5b9e\u73b0\u62d2\u7edd\u903b\u8f91\n        pass\n\n    async def get_queue_size(self) -&gt; int:\n        \"\"\"\u83b7\u53d6\u961f\u5217\u5927\u5c0f\u3002\"\"\"\n        # \u8fd4\u56de\u961f\u5217\u4e2d\u7684\u4efb\u52a1\u6570\n        return 0\n\n    async def clear(self) -&gt; None:\n        \"\"\"\u6e05\u7a7a\u961f\u5217\u3002\"\"\"\n        # \u6e05\u7a7a\u6240\u6709\u4efb\u52a1\n        pass\n\n    async def health_check(self) -&gt; bool:\n        \"\"\"\u5065\u5eb7\u68c0\u67e5\u3002\"\"\"\n        # \u68c0\u67e5\u540e\u7aef\u662f\u5426\u6b63\u5e38\n        return True\n\n# \u4f7f\u7528\u81ea\u5b9a\u4e49\u540e\u7aef\nbackend = MyCustomBackend()\nscheduler = Scheduler(backend=backend)\n</code></pre>"},{"location":"guides/backends/#_24","title":"\u540e\u7aef\u9009\u62e9\u5efa\u8bae","text":""},{"location":"guides/backends/#_25","title":"\u5f00\u53d1\u548c\u6d4b\u8bd5","text":"<p>\u63a8\u8350\u4f7f\u7528 Memory Backend\uff0c\u96f6\u914d\u7f6e\uff0c\u6027\u80fd\u6700\u9ad8\u3002</p>"},{"location":"guides/backends/#_26","title":"\u5355\u673a\u751f\u4ea7\u73af\u5883","text":"<ul> <li>\u4e0d\u9700\u8981\u6301\u4e45\u5316 \u2192 Memory Backend</li> <li>\u9700\u8981\u6301\u4e45\u5316 \u2192 SQLite Backend</li> </ul>"},{"location":"guides/backends/#_27","title":"\u5206\u5e03\u5f0f\u751f\u4ea7\u73af\u5883","text":"<ul> <li>\u9ad8\u6027\u80fd\u8981\u6c42 \u2192 Redis Backend</li> <li>\u9ad8\u53ef\u9760\u6027\u8981\u6c42 \u2192 RabbitMQ Backend</li> </ul>"},{"location":"guides/backends/#_28","title":"\u7279\u6b8a\u573a\u666f","text":"<ul> <li>\u5df2\u6709 Redis \u2192 Redis Backend</li> <li>\u5df2\u6709 RabbitMQ \u2192 RabbitMQ Backend</li> <li>\u5b8c\u5168\u79bb\u7ebf\u73af\u5883 \u2192 SQLite Backend</li> <li>\u6781\u81f4\u6027\u80fd \u2192 Memory Backend</li> </ul>"},{"location":"guides/backends/#_29","title":"\u540e\u7aef\u8fc1\u79fb","text":"<p>\u4ece\u4e00\u4e2a\u540e\u7aef\u8fc1\u79fb\u5230\u53e6\u4e00\u4e2a\u540e\u7aef\uff1a</p> <pre><code>from chronflow import Scheduler\nfrom chronflow.backends import MemoryBackend, SQLiteBackend\n\n# \u65e7\u8c03\u5ea6\u5668\uff08\u5185\u5b58\u540e\u7aef\uff09\nold_scheduler = Scheduler(backend=MemoryBackend())\n\n# \u65b0\u8c03\u5ea6\u5668\uff08SQLite \u540e\u7aef\uff09\nnew_backend = SQLiteBackend(\"scheduler.db\")\nnew_scheduler = Scheduler(backend=new_backend)\n\n# \u8fc1\u79fb\u4efb\u52a1\nfor task_name in old_scheduler._tasks:\n    task = old_scheduler.get_task(task_name)\n    new_scheduler.register_task(task)\n\n# \u505c\u6b62\u65e7\u8c03\u5ea6\u5668\uff0c\u542f\u52a8\u65b0\u8c03\u5ea6\u5668\nawait old_scheduler.stop()\nawait new_scheduler.start()\n</code></pre>"},{"location":"guides/logging/","title":"\u65e5\u5fd7\u7cfb\u7edf","text":"<p>chronflow \u63d0\u4f9b\u4e86\u53ef\u63d2\u62d4\u7684\u65e5\u5fd7\u7cfb\u7edf\uff0c\u5141\u8bb8\u4f60\u4f7f\u7528\u81ea\u5df1\u559c\u6b22\u7684\u65e5\u5fd7\u5e93\u3002</p>"},{"location":"guides/logging/#_2","title":"\u652f\u6301\u7684\u65e5\u5fd7\u5e93","text":""},{"location":"guides/logging/#structlog","title":"Structlog (\u9ed8\u8ba4)","text":"<p>\u5982\u679c\u5b89\u88c5\u4e86 structlog\uff0cchronflow \u4f1a\u9ed8\u8ba4\u4f7f\u7528\u5b83\uff1a</p> <pre><code>from chronflow import Scheduler\n\n# \u81ea\u52a8\u4f7f\u7528 structlog\uff08\u5982\u679c\u5df2\u5b89\u88c5\uff09\nscheduler = Scheduler()\n</code></pre> <p>\u5b89\u88c5 structlog\uff1a</p> <pre><code>pip install chronflow[structlog]\n</code></pre>"},{"location":"guides/logging/#loguru","title":"Loguru","text":"<p>\u4f7f\u7528 loguru \u4f5c\u4e3a\u65e5\u5fd7\u5e93\uff1a</p> <pre><code>from loguru import logger\nfrom chronflow import Scheduler\nfrom chronflow.logging import LoguruAdapter\n\n# \u914d\u7f6e loguru\nlogger.add(\"scheduler.log\", rotation=\"1 day\", retention=\"7 days\")\n\n# \u4f7f\u7528 loguru \u9002\u914d\u5668\nscheduler = Scheduler(logger=LoguruAdapter(logger))\n</code></pre> <p>\u5b89\u88c5 loguru\uff1a</p> <pre><code>pip install chronflow[loguru]\n</code></pre>"},{"location":"guides/logging/#python-logging","title":"Python \u6807\u51c6\u5e93 logging","text":"<p>\u4f7f\u7528 Python \u5185\u7f6e\u7684 logging \u6a21\u5757\uff1a</p> <pre><code>import logging\nfrom chronflow import Scheduler\nfrom chronflow.logging import StdlibAdapter\n\n# \u914d\u7f6e\u6807\u51c6\u5e93\u65e5\u5fd7\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n)\nlogger = logging.getLogger(\"chronflow\")\n\n# \u4f7f\u7528\u6807\u51c6\u5e93\u9002\u914d\u5668\nscheduler = Scheduler(logger=StdlibAdapter(logger))\n</code></pre>"},{"location":"guides/logging/#_3","title":"\u7981\u7528\u65e5\u5fd7","text":"<p>\u5982\u679c\u4e0d\u9700\u8981\u65e5\u5fd7\u8f93\u51fa\uff1a</p> <pre><code>from chronflow import Scheduler\nfrom chronflow.logging import NoOpAdapter\n\nscheduler = Scheduler(logger=NoOpAdapter())\n</code></pre>"},{"location":"guides/logging/#_4","title":"\u81ea\u5b9a\u4e49\u65e5\u5fd7\u9002\u914d\u5668","text":"<p>\u4f60\u53ef\u4ee5\u5b9e\u73b0\u81ea\u5df1\u7684\u65e5\u5fd7\u9002\u914d\u5668\uff1a</p> <pre><code>from chronflow.logging import LoggerAdapter\n\nclass MyCustomLogger(LoggerAdapter):\n    \"\"\"\u81ea\u5b9a\u4e49\u65e5\u5fd7\u9002\u914d\u5668\u3002\"\"\"\n\n    def __init__(self, logger):\n        self._logger = logger\n\n    def debug(self, message: str, **kwargs):\n        self._logger.debug(f\"{message} - {kwargs}\")\n\n    def info(self, message: str, **kwargs):\n        self._logger.info(f\"{message} - {kwargs}\")\n\n    def warning(self, message: str, **kwargs):\n        self._logger.warning(f\"{message} - {kwargs}\")\n\n    def error(self, message: str, **kwargs):\n        self._logger.error(f\"{message} - {kwargs}\")\n\n    def critical(self, message: str, **kwargs):\n        self._logger.critical(f\"{message} - {kwargs}\")\n\n# \u4f7f\u7528\u81ea\u5b9a\u4e49\u9002\u914d\u5668\nscheduler = Scheduler(logger=MyCustomLogger(my_logger))\n</code></pre>"},{"location":"guides/logging/#_5","title":"\u65e5\u5fd7\u7ea7\u522b\u914d\u7f6e","text":"<p>\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u63a7\u5236\u65e5\u5fd7\u7ea7\u522b\uff1a</p> <pre><code># config.toml\nenable_logging = true\nlog_level = \"DEBUG\"  # DEBUG, INFO, WARNING, ERROR, CRITICAL\n</code></pre> <pre><code>from chronflow import Scheduler, SchedulerConfig\n\nconfig = SchedulerConfig.from_file(\"config.toml\")\nscheduler = Scheduler(config=config)\n</code></pre>"},{"location":"guides/logging/#_6","title":"\u65e5\u5fd7\u8f93\u51fa\u793a\u4f8b","text":"<p>\u5178\u578b\u7684\u65e5\u5fd7\u8f93\u51fa\uff1a</p> <pre><code>2025-10-22 10:30:00 - chronflow - INFO - Scheduler started\n2025-10-22 10:30:05 - chronflow - INFO - Task 'health_check' scheduled\n2025-10-22 10:30:05 - chronflow - INFO - Task 'health_check' started\n2025-10-22 10:30:06 - chronflow - INFO - Task 'health_check' completed in 1.23s\n2025-10-22 10:30:10 - chronflow - WARNING - Task 'sync_data' failed, retry attempt 1/3\n2025-10-22 10:30:12 - chronflow - INFO - Task 'sync_data' completed after retry\n</code></pre>"},{"location":"guides/logging/#_7","title":"\u65e5\u5fd7\u4e0a\u4e0b\u6587","text":"<p>\u65e5\u5fd7\u9002\u914d\u5668\u652f\u6301\u7ed3\u6784\u5316\u4e0a\u4e0b\u6587\u6570\u636e\uff1a</p> <pre><code>from loguru import logger\nfrom chronflow.logging import LoguruAdapter\n\nlogger.configure(\n    handlers=[\n        {\n            \"sink\": \"scheduler.log\",\n            \"format\": \"{time} {level} {message} {extra}\",\n            \"serialize\": True  # JSON \u683c\u5f0f\n        }\n    ]\n)\n\nscheduler = Scheduler(logger=LoguruAdapter(logger))\n</code></pre> <p>\u8fd9\u6837\u6bcf\u6761\u65e5\u5fd7\u90fd\u4f1a\u5305\u542b\u4efb\u52a1\u540d\u79f0\u3001\u6267\u884c\u65f6\u95f4\u7b49\u7ed3\u6784\u5316\u4fe1\u606f\u3002</p>"},{"location":"guides/metrics/","title":"\u6027\u80fd\u76d1\u63a7\u548c\u6307\u6807\u5bfc\u51fa","text":"<p>chronflow \u63d0\u4f9b\u4e86\u5185\u7f6e\u7684\u6027\u80fd\u6307\u6807\u6536\u96c6\u529f\u80fd,\u53ef\u4ee5\u5e2e\u52a9\u4f60\u76d1\u63a7\u4efb\u52a1\u6267\u884c\u60c5\u51b5,\u5206\u6790\u6027\u80fd\u74f6\u9888,\u5e76\u4e0e Prometheus \u7b49\u76d1\u63a7\u7cfb\u7edf\u96c6\u6210\u3002</p>"},{"location":"guides/metrics/#_2","title":"\u5feb\u901f\u5f00\u59cb","text":""},{"location":"guides/metrics/#_3","title":"\u542f\u7528\u6307\u6807\u6536\u96c6","text":"<p>\u5728\u521b\u5efa\u8c03\u5ea6\u5668\u65f6,\u8bbe\u7f6e <code>enable_metrics=True</code> \u5373\u53ef\u542f\u7528\u6307\u6807\u6536\u96c6:</p> <pre><code>from chronflow import Scheduler\n\n# \u521b\u5efa\u542f\u7528\u6307\u6807\u7684\u8c03\u5ea6\u5668\nscheduler = Scheduler(enable_metrics=True)\n</code></pre>"},{"location":"guides/metrics/#_4","title":"\u83b7\u53d6\u6027\u80fd\u6307\u6807","text":"<pre><code># \u83b7\u53d6\u6027\u80fd\u6307\u6807\nmetrics = scheduler.get_metrics()\n\nprint(f\"\u603b\u6267\u884c\u6b21\u6570: {metrics['total_executions']}\")\nprint(f\"\u6210\u529f\u7387: {metrics['success_rate']:.2%}\")\nprint(f\"\u5e73\u5747\u6267\u884c\u65f6\u95f4: {metrics['average_duration']:.3f}\u79d2\")\n</code></pre>"},{"location":"guides/metrics/#_5","title":"\u6307\u6807\u8bf4\u660e","text":""},{"location":"guides/metrics/#_6","title":"\u5168\u5c40\u6307\u6807","text":"<p><code>get_metrics()</code> \u8fd4\u56de\u7684\u5b57\u5178\u5305\u542b\u4ee5\u4e0b\u5168\u5c40\u6307\u6807:</p> <ul> <li><code>uptime_seconds</code>: \u8c03\u5ea6\u5668\u8fd0\u884c\u65f6\u957f(\u79d2)</li> <li><code>total_executions</code>: \u603b\u6267\u884c\u6b21\u6570</li> <li><code>successful_executions</code>: \u6210\u529f\u6267\u884c\u6b21\u6570</li> <li><code>failed_executions</code>: \u5931\u8d25\u6267\u884c\u6b21\u6570</li> <li><code>success_rate</code>: \u6210\u529f\u7387 (0.0 ~ 1.0)</li> <li><code>total_duration</code>: \u603b\u6267\u884c\u65f6\u95f4(\u79d2)</li> <li><code>average_duration</code>: \u5e73\u5747\u6267\u884c\u65f6\u95f4(\u79d2)</li> <li><code>executions_per_second</code>: \u6bcf\u79d2\u6267\u884c\u6b21\u6570</li> </ul>"},{"location":"guides/metrics/#_7","title":"\u4efb\u52a1\u7ea7\u522b\u6307\u6807","text":"<p>\u6bcf\u4e2a\u4efb\u52a1\u90fd\u6709\u72ec\u7acb\u7684\u7edf\u8ba1\u4fe1\u606f:</p> <pre><code>metrics = scheduler.get_metrics()\n\nfor task_name, stats in metrics[\"task_stats\"].items():\n    print(f\"\u4efb\u52a1: {task_name}\")\n    print(f\"  \u6267\u884c\u6b21\u6570: {stats['executions']}\")\n    print(f\"  \u6210\u529f\u6b21\u6570: {stats['successes']}\")\n    print(f\"  \u5931\u8d25\u6b21\u6570: {stats['failures']}\")\n    print(f\"  \u6210\u529f\u7387: {stats['success_rate']:.2%}\")\n    print(f\"  \u5e73\u5747\u65f6\u957f: {stats['average_duration']:.3f}\u79d2\")\n    print(f\"  \u6700\u5c0f\u65f6\u957f: {stats['min_duration']:.3f}\u79d2\")\n    print(f\"  \u6700\u5927\u65f6\u957f: {stats['max_duration']:.3f}\u79d2\")\n</code></pre>"},{"location":"guides/metrics/#prometheus","title":"Prometheus \u96c6\u6210","text":""},{"location":"guides/metrics/#prometheus_1","title":"\u5bfc\u51fa Prometheus \u683c\u5f0f","text":"<p>chronflow \u652f\u6301\u5bfc\u51fa\u6807\u51c6\u7684 Prometheus \u6587\u672c\u683c\u5f0f:</p> <pre><code># \u5bfc\u51fa Prometheus \u683c\u5f0f\u7684\u6307\u6807\nprometheus_text = scheduler.export_prometheus_metrics()\nprint(prometheus_text)\n</code></pre> <p>\u8f93\u51fa\u793a\u4f8b:</p> <pre><code># HELP chronflow_uptime_seconds Uptime in seconds\n# TYPE chronflow_uptime_seconds gauge\nchronflow_uptime_seconds 125.5\n\n# HELP chronflow_executions_total Total task executions\n# TYPE chronflow_executions_total counter\nchronflow_executions_total 150\n\n# HELP chronflow_executions_success Successful executions\n# TYPE chronflow_executions_success counter\nchronflow_executions_success 145\n\n# HELP chronflow_executions_failed Failed executions\n# TYPE chronflow_executions_failed counter\nchronflow_executions_failed 5\n\n# HELP chronflow_task_executions Task executions by name\n# TYPE chronflow_task_executions counter\nchronflow_task_executions{task=\"my_task\"} 75\n\n# HELP chronflow_task_duration_seconds Task duration by name\n# TYPE chronflow_task_duration_seconds gauge\nchronflow_task_duration_seconds{task=\"my_task\",stat=\"avg\"} 0.523\nchronflow_task_duration_seconds{task=\"my_task\",stat=\"min\"} 0.105\nchronflow_task_duration_seconds{task=\"my_task\",stat=\"max\"} 1.250\n</code></pre>"},{"location":"guides/metrics/#http","title":"\u521b\u5efa HTTP \u7aef\u70b9","text":"<p>\u4f7f\u7528 <code>aiohttp</code> \u521b\u5efa Prometheus \u6293\u53d6\u7aef\u70b9:</p> <pre><code>from aiohttp import web\nfrom chronflow import Scheduler\n\nscheduler = Scheduler(enable_metrics=True)\n\n# \u5b9a\u4e49\u6307\u6807\u7aef\u70b9\nasync def metrics_handler(request):\n    \"\"\"\u8fd4\u56de Prometheus \u683c\u5f0f\u7684\u6307\u6807\u3002\"\"\"\n    metrics_text = scheduler.export_prometheus_metrics()\n    return web.Response(text=metrics_text or \"\", content_type=\"text/plain\")\n\n# \u521b\u5efa web \u5e94\u7528\napp = web.Application()\napp.router.add_get(\"/metrics\", metrics_handler)\n\n# \u542f\u52a8\u670d\u52a1\u5668\nrunner = web.AppRunner(app)\nawait runner.setup()\nsite = web.TCPSite(runner, \"localhost\", 9090)\nawait site.start()\n\nprint(\"Prometheus \u7aef\u70b9: http://localhost:9090/metrics\")\n</code></pre>"},{"location":"guides/metrics/#prometheus_2","title":"\u914d\u7f6e Prometheus \u6293\u53d6","text":"<p>\u5728 <code>prometheus.yml</code> \u4e2d\u6dfb\u52a0\u6293\u53d6\u914d\u7f6e:</p> <pre><code>scrape_configs:\n  - job_name: 'chronflow'\n    scrape_interval: 15s\n    static_configs:\n      - targets: ['localhost:9090']\n</code></pre>"},{"location":"guides/metrics/#_8","title":"\u6307\u6807\u7ba1\u7406","text":""},{"location":"guides/metrics/#_9","title":"\u91cd\u7f6e\u6307\u6807","text":"<p>\u5728\u67d0\u4e9b\u573a\u666f\u4e0b,\u4f60\u53ef\u80fd\u9700\u8981\u91cd\u7f6e\u6307\u6807(\u4f8b\u5982\u6d4b\u8bd5\u6216\u5b9a\u671f\u6e05\u7406):</p> <pre><code># \u91cd\u7f6e\u6240\u6709\u6307\u6807\nscheduler.reset_metrics()\n</code></pre> <p>\u91cd\u7f6e\u540e,\u6240\u6709\u8ba1\u6570\u5668\u548c\u7edf\u8ba1\u4fe1\u606f\u5c06\u5f52\u96f6,\u5f00\u59cb\u65f6\u95f4\u4f1a\u66f4\u65b0\u4e3a\u5f53\u524d\u65f6\u95f4\u3002</p>"},{"location":"guides/metrics/#_10","title":"\u68c0\u67e5\u662f\u5426\u542f\u7528","text":"<pre><code>if scheduler.metrics_collector is not None:\n    print(\"\u6307\u6807\u6536\u96c6\u5df2\u542f\u7528\")\n    metrics = scheduler.get_metrics()\nelse:\n    print(\"\u6307\u6807\u6536\u96c6\u672a\u542f\u7528\")\n</code></pre>"},{"location":"guides/metrics/#_11","title":"\u6027\u80fd\u8003\u8651","text":""},{"location":"guides/metrics/#_12","title":"\u5f00\u9500","text":"<p>\u6307\u6807\u6536\u96c6\u7684\u6027\u80fd\u5f00\u9500\u975e\u5e38\u5c0f:</p> <ul> <li>\u6bcf\u6b21\u4efb\u52a1\u6267\u884c\u589e\u52a0\u7ea6 0.1-0.5 \u5fae\u79d2\u5f00\u9500</li> <li>\u5185\u5b58\u5f00\u9500:\u6bcf\u4e2a\u4efb\u52a1\u7ea6 200 \u5b57\u8282(\u7528\u4e8e\u7edf\u8ba1\u4fe1\u606f)</li> <li>\u5bf9\u4e8e\u5927\u591a\u6570\u5e94\u7528,\u5f00\u9500\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1</li> </ul>"},{"location":"guides/metrics/#_13","title":"\u6700\u4f73\u5b9e\u8df5","text":"<ol> <li>\u751f\u4ea7\u73af\u5883\u5efa\u8bae\u542f\u7528: \u6307\u6807\u5bf9\u4e8e\u76d1\u63a7\u548c\u6545\u969c\u6392\u67e5\u975e\u5e38\u6709\u4ef7\u503c</li> <li>\u5b9a\u671f\u5bfc\u51fa: \u5c06\u6307\u6807\u6570\u636e\u5bfc\u51fa\u5230\u76d1\u63a7\u7cfb\u7edf,\u907f\u514d\u5185\u5b58\u79ef\u7d2f</li> <li>\u5173\u6ce8\u5173\u952e\u6307\u6807: \u91cd\u70b9\u5173\u6ce8\u6210\u529f\u7387\u3001\u5e73\u5747\u6267\u884c\u65f6\u95f4\u3001\u5931\u8d25\u6b21\u6570</li> <li>\u8bbe\u7f6e\u544a\u8b66: \u57fa\u4e8e\u6307\u6807\u8bbe\u7f6e\u544a\u8b66\u89c4\u5219(\u5982\u5931\u8d25\u7387\u8d85\u8fc7\u9608\u503c)</li> </ol>"},{"location":"guides/metrics/#_14","title":"\u5b8c\u6574\u793a\u4f8b","text":"<pre><code>import asyncio\nfrom chronflow import Scheduler\nfrom chronflow.decorators import interval\n\nasync def main():\n    # \u521b\u5efa\u542f\u7528\u6307\u6807\u7684\u8c03\u5ea6\u5668\n    scheduler = Scheduler(enable_metrics=True)\n\n    # \u5b9a\u4e49\u4efb\u52a1\n    @interval(seconds=5)\n    async def health_check():\n        \"\"\"\u5065\u5eb7\u68c0\u67e5\u4efb\u52a1\u3002\"\"\"\n        await asyncio.sleep(0.1)\n        return \"healthy\"\n\n    @interval(seconds=10)\n    async def data_sync():\n        \"\"\"\u6570\u636e\u540c\u6b65\u4efb\u52a1\u3002\"\"\"\n        await asyncio.sleep(1.5)\n        return \"synced\"\n\n    # \u6ce8\u518c\u4efb\u52a1\n    scheduler.register_task(health_check.__chronflow_task__)\n    scheduler.register_task(data_sync.__chronflow_task__)\n\n    # \u8fd0\u884c\u8c03\u5ea6\u5668\n    async with scheduler.run_context():\n        # \u5b9a\u671f\u6253\u5370\u6307\u6807\n        for _ in range(6):  # \u8fd0\u884c 1 \u5206\u949f\n            await asyncio.sleep(10)\n\n            metrics = scheduler.get_metrics()\n            print(f\"\\n=== \u6027\u80fd\u62a5\u544a ({metrics['uptime_seconds']:.0f}\u79d2) ===\")\n            print(f\"\u603b\u6267\u884c: {metrics['total_executions']}\")\n            print(f\"\u6210\u529f\u7387: {metrics['success_rate']:.1%}\")\n            print(f\"\u5e73\u5747\u65f6\u957f: {metrics['average_duration']:.3f}\u79d2\")\n\n            # \u5bfc\u51fa Prometheus \u6307\u6807\n            prometheus_text = scheduler.export_prometheus_metrics()\n            # \u53d1\u9001\u5230\u76d1\u63a7\u7cfb\u7edf...\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"guides/metrics/#_15","title":"\u4e0e\u5176\u4ed6\u76d1\u63a7\u7cfb\u7edf\u96c6\u6210","text":""},{"location":"guides/metrics/#statsd","title":"StatsD","text":"<p>\u867d\u7136\u76ee\u524d\u53ea\u5185\u7f6e\u4e86 Prometheus \u683c\u5f0f\u5bfc\u51fa,\u4f46\u4f60\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u6307\u6807\u53d1\u9001\u5230 StatsD:</p> <pre><code>import aiostatsysd\n\nasync def send_to_statsd(scheduler):\n    \"\"\"\u53d1\u9001\u6307\u6807\u5230 StatsD\u3002\"\"\"\n    client = aiostatsysd.Client(\"localhost\", 8125)\n\n    metrics = scheduler.get_metrics()\n\n    # \u53d1\u9001\u8ba1\u6570\u5668\n    await client.counter(\"chronflow.executions.total\", metrics[\"total_executions\"])\n    await client.counter(\"chronflow.executions.success\", metrics[\"successful_executions\"])\n    await client.counter(\"chronflow.executions.failed\", metrics[\"failed_executions\"])\n\n    # \u53d1\u9001 gauge\n    await client.gauge(\"chronflow.duration.avg\", metrics[\"average_duration\"])\n    await client.gauge(\"chronflow.success_rate\", metrics[\"success_rate\"] * 100)\n\n    await client.close()\n</code></pre>"},{"location":"guides/metrics/#_16","title":"\u81ea\u5b9a\u4e49\u5bfc\u51fa","text":"<p>\u4f60\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u81ea\u5df1\u7684\u6307\u6807\u5bfc\u51fa\u5668:</p> <pre><code>class CustomMetricsExporter:\n    \"\"\"\u81ea\u5b9a\u4e49\u6307\u6807\u5bfc\u51fa\u5668\u3002\"\"\"\n\n    def __init__(self, scheduler):\n        self.scheduler = scheduler\n\n    def export_json(self):\n        \"\"\"\u5bfc\u51fa JSON \u683c\u5f0f\u3002\"\"\"\n        import json\n        metrics = self.scheduler.get_metrics()\n        return json.dumps(metrics, indent=2)\n\n    def export_influxdb_line_protocol(self):\n        \"\"\"\u5bfc\u51fa InfluxDB \u884c\u534f\u8bae\u683c\u5f0f\u3002\"\"\"\n        metrics = self.scheduler.get_metrics()\n        lines = [\n            f\"chronflow,host=localhost executions={metrics['total_executions']}\",\n            f\"chronflow,host=localhost success_rate={metrics['success_rate']}\",\n            f\"chronflow,host=localhost avg_duration={metrics['average_duration']}\",\n        ]\n        return \"\\n\".join(lines)\n\n# \u4f7f\u7528\nexporter = CustomMetricsExporter(scheduler)\njson_metrics = exporter.export_json()\nprint(json_metrics)\n</code></pre>"},{"location":"guides/metrics/#_17","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u67e5\u770b \u793a\u4f8b\u4ee3\u7801</li> <li>\u4e86\u89e3 \u65e5\u5fd7\u7cfb\u7edf</li> <li>\u4e86\u89e3 \u76d1\u63a7\u4e0e\u7edf\u8ba1</li> </ul>"},{"location":"guides/monitoring/","title":"\u76d1\u63a7\u4e0e\u7edf\u8ba1","text":"<p>chronflow \u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u76d1\u63a7\u529f\u80fd\uff0c\u5e2e\u52a9\u4f60\u4e86\u89e3\u8c03\u5ea6\u5668\u548c\u4efb\u52a1\u7684\u8fd0\u884c\u72b6\u6001\u3002</p>"},{"location":"guides/monitoring/#_2","title":"\u83b7\u53d6\u8c03\u5ea6\u5668\u7edf\u8ba1\u4fe1\u606f","text":"<pre><code>from chronflow import Scheduler\n\nscheduler = Scheduler()\n\n# \u83b7\u53d6\u8c03\u5ea6\u5668\u7edf\u8ba1\nstats = await scheduler.get_stats()\nprint(stats)\n</code></pre> <p>\u8f93\u51fa\u793a\u4f8b\uff1a</p> <pre><code>{\n    \"running\": True,\n    \"total_tasks\": 10,\n    \"queue_size\": 5,\n    \"active_workers\": 8,\n    \"max_workers\": 10,\n    \"backend\": \"MemoryBackend\",\n    \"tasks\": [\n        {\n            \"name\": \"health_check\",\n            \"status\": \"running\",\n            \"total_runs\": 120,\n            \"successful_runs\": 118,\n            \"failed_runs\": 2,\n            \"success_rate\": 98.3,\n            \"avg_execution_time\": 0.5\n        },\n        # ... \u66f4\u591a\u4efb\u52a1\n    ]\n}\n</code></pre>"},{"location":"guides/monitoring/#_3","title":"\u4efb\u52a1\u5217\u8868","text":"<p>\u83b7\u53d6\u6240\u6709\u5df2\u6ce8\u518c\u7684\u4efb\u52a1\uff1a</p> <pre><code>tasks = scheduler.list_tasks()\n\nfor task in tasks:\n    print(f\"\u4efb\u52a1: {task['name']}\")\n    print(f\"\u72b6\u6001: {task['status']}\")\n    print(f\"\u6210\u529f\u7387: {task['success_rate']:.1f}%\")\n    print(f\"\u5e73\u5747\u6267\u884c\u65f6\u95f4: {task['avg_execution_time']:.2f}s\")\n    print(\"---\")\n</code></pre>"},{"location":"guides/monitoring/#_4","title":"\u4efb\u52a1\u8ba1\u6570","text":"<p>\u6309\u72b6\u6001\u7edf\u8ba1\u4efb\u52a1\u6570\u91cf\uff1a</p> <pre><code>counts = scheduler.get_task_count()\nprint(counts)\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>{\n    \"total\": 10,\n    \"pending\": 2,\n    \"running\": 3,\n    \"completed\": 4,\n    \"failed\": 1,\n    \"cancelled\": 0\n}\n</code></pre>"},{"location":"guides/monitoring/#_5","title":"\u83b7\u53d6\u5355\u4e2a\u4efb\u52a1","text":"<pre><code># \u6309\u540d\u79f0\u83b7\u53d6\u4efb\u52a1\ntask = scheduler.get_task(\"health_check\")\n\nif task:\n    print(f\"\u4efb\u52a1\u540d\u79f0: {task.config.name}\")\n    print(f\"\u5f53\u524d\u72b6\u6001: {task.status}\")\n    print(f\"\u603b\u8fd0\u884c\u6b21\u6570: {task.metrics.total_runs}\")\n    print(f\"\u6210\u529f\u6b21\u6570: {task.metrics.successful_runs}\")\n    print(f\"\u5931\u8d25\u6b21\u6570: {task.metrics.failed_runs}\")\n    print(f\"\u5e73\u5747\u6267\u884c\u65f6\u95f4: {task.metrics.average_execution_time:.2f}s\")\n</code></pre>"},{"location":"guides/monitoring/#_6","title":"\u6309\u72b6\u6001\u7b5b\u9009\u4efb\u52a1","text":"<pre><code>from chronflow import TaskStatus\n\n# \u83b7\u53d6\u5931\u8d25\u7684\u4efb\u52a1\nfailed_tasks = scheduler.get_task_by_status(TaskStatus.FAILED)\n\nfor task in failed_tasks:\n    print(f\"\u5931\u8d25\u4efb\u52a1: {task.config.name}\")\n    print(f\"\u8fde\u7eed\u5931\u8d25\u6b21\u6570: {task.metrics.consecutive_failures}\")\n    print(f\"\u6700\u540e\u5931\u8d25\u65f6\u95f4: {task.metrics.last_failure_time}\")\n</code></pre>"},{"location":"guides/monitoring/#_7","title":"\u6309\u6807\u7b7e\u7b5b\u9009\u4efb\u52a1","text":"<pre><code># \u5b9a\u4e49\u5e26\u6807\u7b7e\u7684\u4efb\u52a1\n@interval(60, tags=[\"critical\", \"monitoring\"])\nasync def critical_task():\n    pass\n\n@interval(120, tags=[\"maintenance\"])\nasync def cleanup_task():\n    pass\n\n# \u83b7\u53d6\u5e26 \"critical\" \u6807\u7b7e\u7684\u4efb\u52a1\ncritical_tasks = scheduler.get_task_by_tag(\"critical\")\n\nfor task in critical_tasks:\n    print(f\"\u5173\u952e\u4efb\u52a1: {task.config.name}\")\n</code></pre>"},{"location":"guides/monitoring/#_8","title":"\u4efb\u52a1\u63a7\u5236","text":""},{"location":"guides/monitoring/#_9","title":"\u6682\u505c\u4efb\u52a1","text":"<pre><code># \u6682\u505c\u4efb\u52a1\uff08\u7981\u7528\u8c03\u5ea6\uff09\nsuccess = await scheduler.pause_task(\"health_check\")\n\nif success:\n    print(\"\u4efb\u52a1\u5df2\u6682\u505c\")\n</code></pre>"},{"location":"guides/monitoring/#_10","title":"\u6062\u590d\u4efb\u52a1","text":"<pre><code># \u6062\u590d\u4efb\u52a1\uff08\u542f\u7528\u8c03\u5ea6\uff09\nsuccess = await scheduler.resume_task(\"health_check\")\n\nif success:\n    print(\"\u4efb\u52a1\u5df2\u6062\u590d\")\n</code></pre>"},{"location":"guides/monitoring/#_11","title":"\u5b9e\u65f6\u76d1\u63a7\u793a\u4f8b","text":"<p>\u521b\u5efa\u4e00\u4e2a\u76d1\u63a7\u4eea\u8868\u677f\uff1a</p> <pre><code>import asyncio\nfrom chronflow import Scheduler, interval\n\nscheduler = Scheduler()\n\n@interval(5)  # \u6bcf5\u79d2\u76d1\u63a7\u4e00\u6b21\nasync def monitor_dashboard():\n    \"\"\"\u76d1\u63a7\u4eea\u8868\u677f\u4efb\u52a1\u3002\"\"\"\n    stats = await scheduler.get_stats()\n    counts = scheduler.get_task_count()\n\n    print(\"\\n\" + \"=\"*50)\n    print(f\"\u8c03\u5ea6\u5668\u72b6\u6001: {'\u8fd0\u884c\u4e2d' if stats['running'] else '\u5df2\u505c\u6b62'}\")\n    print(f\"\u961f\u5217\u5927\u5c0f: {stats['queue_size']}\")\n    print(f\"\u6d3b\u8dc3\u5de5\u4f5c\u534f\u7a0b: {stats['active_workers']}/{stats['max_workers']}\")\n    print(f\"\\n\u4efb\u52a1\u7edf\u8ba1:\")\n    print(f\"  \u603b\u8ba1: {counts['total']}\")\n    print(f\"  \u8fd0\u884c\u4e2d: {counts['running']}\")\n    print(f\"  \u5df2\u5b8c\u6210: {counts['completed']}\")\n    print(f\"  \u5931\u8d25: {counts['failed']}\")\n\n    # \u663e\u793a\u5931\u8d25\u4efb\u52a1\u8be6\u60c5\n    from chronflow import TaskStatus\n    failed = scheduler.get_task_by_status(TaskStatus.FAILED)\n    if failed:\n        print(f\"\\n\u5931\u8d25\u4efb\u52a1:\")\n        for task in failed:\n            print(f\"  - {task.config.name}: {task.metrics.consecutive_failures} \u6b21\u8fde\u7eed\u5931\u8d25\")\n    print(\"=\"*50)\n\nasync def main():\n    await scheduler.start()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"guides/monitoring/#_12","title":"\u4efb\u52a1\u6307\u6807\u8be6\u89e3","text":""},{"location":"guides/monitoring/#taskmetrics","title":"TaskMetrics \u6307\u6807\u8bf4\u660e","text":"<p>\u6bcf\u4e2a\u4efb\u52a1\u90fd\u6709\u4e00\u4e2a <code>TaskMetrics</code> \u5bf9\u8c61\uff0c\u5305\u542b\u4ee5\u4e0b\u6307\u6807\uff1a</p> <ul> <li><code>total_runs</code>: \u603b\u8fd0\u884c\u6b21\u6570</li> <li><code>successful_runs</code>: \u6210\u529f\u6b21\u6570</li> <li><code>failed_runs</code>: \u5931\u8d25\u6b21\u6570</li> <li><code>total_execution_time</code>: \u603b\u6267\u884c\u65f6\u95f4\uff08\u79d2\uff09</li> <li><code>average_execution_time</code>: \u5e73\u5747\u6267\u884c\u65f6\u95f4\uff08\u79d2\uff09</li> <li><code>last_run_time</code>: \u6700\u540e\u4e00\u6b21\u8fd0\u884c\u65f6\u95f4\uff08\u79d2\uff09</li> <li><code>last_success_time</code>: \u6700\u540e\u4e00\u6b21\u6210\u529f\u65f6\u95f4\uff08\u79d2\uff09</li> <li><code>last_failure_time</code>: \u6700\u540e\u4e00\u6b21\u5931\u8d25\u65f6\u95f4\uff08\u79d2\uff09</li> <li><code>consecutive_failures</code>: \u8fde\u7eed\u5931\u8d25\u6b21\u6570</li> <li><code>last_error</code>: \u6700\u540e\u4e00\u6b21\u9519\u8bef\u4fe1\u606f</li> </ul> <pre><code>task = scheduler.get_task(\"my_task\")\nmetrics = task.metrics\n\n# \u8ba1\u7b97\u6210\u529f\u7387\nsuccess_rate = (metrics.successful_runs / metrics.total_runs * 100\n                if metrics.total_runs &gt; 0 else 0.0)\n\nprint(f\"\u6210\u529f\u7387: {success_rate:.1f}%\")\nprint(f\"\u5e73\u5747\u6267\u884c\u65f6\u95f4: {metrics.average_execution_time:.2f}s\")\nprint(f\"\u8fde\u7eed\u5931\u8d25: {metrics.consecutive_failures} \u6b21\")\n</code></pre>"},{"location":"guides/monitoring/#_13","title":"\u96c6\u6210\u5230\u76d1\u63a7\u7cfb\u7edf","text":""},{"location":"guides/monitoring/#prometheus","title":"Prometheus \u96c6\u6210\u793a\u4f8b","text":"<pre><code>from prometheus_client import Gauge, Counter, Histogram\nfrom chronflow import Scheduler, interval\n\n# \u5b9a\u4e49 Prometheus \u6307\u6807\ntask_total = Counter('chronflow_task_total', 'Total tasks', ['task_name'])\ntask_success = Counter('chronflow_task_success', 'Successful tasks', ['task_name'])\ntask_failure = Counter('chronflow_task_failure', 'Failed tasks', ['task_name'])\ntask_duration = Histogram('chronflow_task_duration_seconds', 'Task duration', ['task_name'])\n\nscheduler = Scheduler()\n\n@interval(30)  # \u6bcf30\u79d2\u66f4\u65b0\u6307\u6807\nasync def update_metrics():\n    \"\"\"\u66f4\u65b0 Prometheus \u6307\u6807\u3002\"\"\"\n    tasks = scheduler.list_tasks()\n\n    for task_info in tasks:\n        task = scheduler.get_task(task_info['name'])\n        metrics = task.metrics\n\n        task_total.labels(task_name=task.config.name).inc(metrics.total_runs)\n        task_success.labels(task_name=task.config.name).inc(metrics.successful_runs)\n        task_failure.labels(task_name=task.config.name).inc(metrics.failed_runs)\n\n        if metrics.last_run_time:\n            task_duration.labels(task_name=task.config.name).observe(metrics.last_run_time)\n</code></pre>"},{"location":"guides/monitoring/#_14","title":"\u544a\u8b66\u914d\u7f6e","text":"<p>\u57fa\u4e8e\u6307\u6807\u8bbe\u7f6e\u544a\u8b66\uff1a</p> <pre><code>from chronflow import Scheduler, interval, TaskStatus\n\nscheduler = Scheduler()\n\n@interval(60)  # \u6bcf\u5206\u949f\u68c0\u67e5\u4e00\u6b21\nasync def check_alerts():\n    \"\"\"\u68c0\u67e5\u544a\u8b66\u6761\u4ef6\u3002\"\"\"\n    tasks = scheduler.list_tasks()\n\n    for task_info in tasks:\n        task = scheduler.get_task(task_info['name'])\n        metrics = task.metrics\n\n        # \u544a\u8b66\u6761\u4ef61: \u8fde\u7eed\u5931\u8d25\u8d85\u8fc73\u6b21\n        if metrics.consecutive_failures &gt;= 3:\n            await send_alert(\n                f\"\u4efb\u52a1 {task.config.name} \u8fde\u7eed\u5931\u8d25 {metrics.consecutive_failures} \u6b21\"\n            )\n\n        # \u544a\u8b66\u6761\u4ef62: \u5e73\u5747\u6267\u884c\u65f6\u95f4\u8d85\u8fc7\u9608\u503c\n        if metrics.average_execution_time &gt; 30.0:\n            await send_alert(\n                f\"\u4efb\u52a1 {task.config.name} \u6267\u884c\u65f6\u95f4\u8fc7\u957f: {metrics.average_execution_time:.2f}s\"\n            )\n\n        # \u544a\u8b66\u6761\u4ef63: \u6210\u529f\u7387\u4f4e\u4e8e90%\n        if metrics.total_runs &gt; 10:\n            success_rate = metrics.successful_runs / metrics.total_runs\n            if success_rate &lt; 0.9:\n                await send_alert(\n                    f\"\u4efb\u52a1 {task.config.name} \u6210\u529f\u7387\u8fc7\u4f4e: {success_rate*100:.1f}%\"\n                )\n\nasync def send_alert(message: str):\n    \"\"\"\u53d1\u9001\u544a\u8b66\uff08\u793a\u4f8b\uff09\u3002\"\"\"\n    print(f\"\u26a0\ufe0f  \u544a\u8b66: {message}\")\n    # \u5b9e\u9645\u573a\u666f\u53ef\u4ee5\u53d1\u9001\u90ae\u4ef6\u3001\u77ed\u4fe1\u3001\u9489\u9489\u6d88\u606f\u7b49\n</code></pre>"}]}