{"config":{"lang":["zh","en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6982\u89c8","text":"<p>chronflow \u200b\u662f\u200b\u4e00\u4e2a\u200b\u9ad8\u6027\u80fd\u200b\u7684\u200b Python \u200b\u5f02\u6b65\u200b\u5b9a\u65f6\u200b\u4efb\u52a1\u8c03\u5ea6\u200b\u5e93\u200b\uff0c\u200b\u4e13\u200b\u4e3a\u200b Python 3.11+ \u200b\u8bbe\u8ba1\u200b\u3002\u200b\u5b83\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u7b80\u6d01\u200b\u7684\u200b\u88c5\u9970\u200b\u5668\u200b API\u3001\u200b\u591a\u79cd\u200b\u961f\u5217\u200b\u540e\u200b\u7aef\u200b\u652f\u6301\u200b\u3001\u200b\u667a\u80fd\u200b\u91cd\u8bd5\u200b\u673a\u5236\u200b\u4ee5\u53ca\u200b\u5b8c\u6574\u200b\u7684\u200b\u7c7b\u578b\u200b\u5b89\u5168\u200b\u4fdd\u969c\u200b\u3002</p> <p> </p> <ul> <li>\u200b\u57fa\u4e8e\u200b asyncio \u200b\u7684\u200b\u539f\u751f\u200b\u5f02\u6b65\u200b\u652f\u6301\u200b\uff0c\u200b\u9ad8\u200b\u5e76\u53d1\u200b\u3001\u200b\u4f4e\u200b\u5ef6\u8fdf\u200b</li> <li>\u200b\u652f\u6301\u200b\u79d2\u7ea7\u200b Cron \u200b\u8868\u8fbe\u5f0f\u200b\u5b9a\u65f6\u200b\u4efb\u52a1\u200b</li> <li>\u200b\u53ef\u200b\u63d2\u62d4\u200b\u7684\u200b\u961f\u5217\u200b\u540e\u200b\u7aef\u200b\uff1a\u200b\u5185\u5b58\u200b\u3001SQLite\u3001Redis\u3001RabbitMQ</li> <li>\u200b\u667a\u80fd\u200b\u91cd\u8bd5\u200b\u673a\u5236\u200b\uff0c\u200b\u652f\u6301\u200b\u6307\u6570\u200b\u9000\u907f\u200b\u3001\u200b\u56fa\u5b9a\u200b\u95f4\u9694\u200b\u7b49\u200b\u7b56\u7565\u200b</li> <li>\u200b\u5b8c\u6574\u200b\u7684\u200b\u7c7b\u578b\u200b\u63d0\u793a\u200b\uff0cIDE \u200b\u53cb\u597d\u200b</li> <li>\u200b\u96f6\u200b\u4f9d\u8d56\u200b\u542f\u52a8\u200b\uff0c\u200b\u53ef\u200b\u9009\u200b\u5916\u90e8\u200b\u670d\u52a1\u200b\u652f\u6301\u200b</li> </ul> <p>\u200b\u6700\u65b0\u200b\u7248\u672c\u200b: v0.3.0</p> <p>2025-10-24 \u200b\u53d1\u5e03\u200b - \u200b\u65b0\u589e\u200b\u4efb\u52a1\u200b\u81ea\u52a8\u200b\u53d1\u73b0\u200b\u529f\u80fd\u200b,\u200b\u4fee\u590d\u200b Cron \u200b\u79d2\u7ea7\u200b\u7cbe\u5ea6\u200b\u652f\u6301\u200b | \u200b\u67e5\u770b\u200b\u66f4\u65b0\u200b\u65e5\u5fd7\u200b</p> <p>\u200b\u73af\u5883\u200b\u8981\u6c42\u200b\uff1aPython &gt;= 3.11</p> <p>\u200b\u66f4\u200b\u591a\u200b\u5feb\u901f\u200b\u793a\u4f8b\u200b\u53ef\u200b\u53c2\u8003\u200b\u4ed3\u5e93\u200b\u4e2d\u200b\u7684\u200b <code>examples/</code> \u200b\u76ee\u5f55\u200b\u3002</p>"},{"location":"#_2","title":"\u6838\u5fc3\u200b\u7279\u6027","text":""},{"location":"#_3","title":"\u9ad8\u6027\u80fd\u200b\u5f02\u6b65","text":"<p>\u200b\u57fa\u4e8e\u200b Python asyncio\uff0c\u200b\u539f\u751f\u200b\u5f02\u6b65\u200b\u652f\u6301\u200b\uff0c\u200b\u65e0\u200b\u540c\u6b65\u200b\u8f6c\u200b\u5f02\u6b65\u200b\u5f00\u9500\u200b\u3002\u200b\u652f\u6301\u200b\u9ad8\u200b\u5e76\u53d1\u200b\u4efb\u52a1\u200b\u6267\u884c\u200b\uff0c\u200b\u541e\u5410\u91cf\u200b\u53ef\u200b\u8fbe\u200b 10000+ tasks/s\u3002</p>"},{"location":"#_4","title":"\u79d2\u7ea7\u200b\u7cbe\u5ea6","text":"<p>\u200b\u652f\u6301\u200b\u6807\u51c6\u200b Cron \u200b\u8868\u8fbe\u5f0f\u200b\u5e76\u200b\u6269\u5c55\u200b\u5230\u200b\u79d2\u200b\u7ea7\u200b\u7cbe\u5ea6\u200b\uff0c\u200b\u6ee1\u8db3\u200b\u5404\u79cd\u200b\u5b9a\u65f6\u200b\u4efb\u52a1\u200b\u9700\u6c42\u200b\u3002</p>"},{"location":"#_5","title":"\u591a\u79cd\u200b\u540e\u200b\u7aef","text":"<ul> <li>Memory - \u200b\u96f6\u200b\u4f9d\u8d56\u200b\uff0c\u200b\u5f00\u7bb1\u200b\u5373\u7528\u200b</li> <li>SQLite - \u200b\u672c\u5730\u200b\u6301\u4e45\u200b\u5316\u200b\uff0c\u200b\u91cd\u542f\u200b\u4e0d\u200b\u4e22\u200b\u4efb\u52a1\u200b</li> <li>Redis - \u200b\u5206\u5e03\u5f0f\u200b\u90e8\u7f72\u200b\uff0c\u200b\u9ad8\u6027\u80fd\u200b</li> <li>RabbitMQ - \u200b\u9ad8\u53ef\u9760\u6027\u200b\u6d88\u606f\u200b\u961f\u5217\u200b</li> </ul>"},{"location":"#api","title":"\u7b80\u6d01\u200b API","text":"<p>\u200b\u88c5\u9970\u200b\u5668\u200b\u6a21\u5f0f\u200b\uff0c\u200b\u4e00\u884c\u200b\u4ee3\u7801\u200b\u5b9a\u4e49\u200b\u4efb\u52a1\u200b\uff1a</p> <pre><code>@cron(\"*/5 * * * * *\")  # \u200b\u6bcf\u200b5\u200b\u79d2\u200b\u6267\u884c\u200b\nasync def my_task():\n    print(\"\u200b\u4efb\u52a1\u200b\u6267\u884c\u200b\u4e2d\u200b...\")\n</code></pre>"},{"location":"#_6","title":"\u667a\u80fd\u200b\u91cd\u8bd5","text":"<p>\u200b\u5185\u7f6e\u200b\u57fa\u4e8e\u200b tenacity \u200b\u7684\u200b\u91cd\u8bd5\u200b\u673a\u5236\u200b\uff0c\u200b\u652f\u6301\u200b\u591a\u79cd\u200b\u7b56\u7565\u200b\uff1a - \u200b\u6307\u6570\u200b\u9000\u907f\u200b\uff08\u200b\u9002\u5408\u200b\u7f51\u7edc\u200b\u8bf7\u6c42\u200b\uff09 - \u200b\u56fa\u5b9a\u200b\u95f4\u9694\u200b\uff08\u200b\u9002\u5408\u200b\u8f6e\u8be2\u200b\uff09 - \u200b\u968f\u673a\u200b\u95f4\u9694\u200b\uff08\u200b\u907f\u514d\u200b\u96ea\u5d29\u200b\uff09</p>"},{"location":"#_7","title":"\u7c7b\u578b\u200b\u5b89\u5168","text":"<p>100% \u200b\u7c7b\u578b\u200b\u63d0\u793a\u200b\u8986\u76d6\u200b\uff0c\u200b\u914d\u5408\u200b IDE \u200b\u63d0\u4f9b\u200b\u5b8c\u6574\u200b\u7684\u200b\u4ee3\u7801\u200b\u8865\u5168\u200b\u548c\u200b\u7c7b\u578b\u200b\u68c0\u67e5\u200b\u3002</p>"},{"location":"#_8","title":"\u5feb\u901f\u200b\u5b89\u88c5","text":"<pre><code># \u200b\u57fa\u7840\u200b\u5b89\u88c5\u200b\uff08\u200b\u5185\u5b58\u200b/SQLite \u200b\u540e\u200b\u7aef\u200b\uff09\npip install chronflow\n\n# \u200b\u4f7f\u7528\u200b Redis\npip install chronflow[redis]\n\n# \u200b\u4f7f\u7528\u200b RabbitMQ\npip install chronflow[rabbitmq]\n\n# \u200b\u5b8c\u6574\u200b\u5b89\u88c5\u200b\uff08\u200b\u6240\u6709\u200b\u540e\u200b\u7aef\u200b\uff09\npip install chronflow[all]\n</code></pre>"},{"location":"#5","title":"5 \u200b\u5206\u949f\u200b\u4e0a\u200b\u624b","text":"<pre><code>import asyncio\nfrom chronflow import Scheduler, cron, interval\n\nscheduler = Scheduler()\n\n@cron(\"*/5 * * * * *\")  # \u200b\u6bcf\u200b5\u200b\u79d2\u200b\nasync def health_check():\n    print(\"\u200b\u5065\u5eb7\u68c0\u67e5\u200b...\")\n\n@interval(60)  # \u200b\u6bcf\u200b60\u200b\u79d2\u200b\nasync def sync_data():\n    print(\"\u200b\u540c\u6b65\u200b\u6570\u636e\u200b...\")\n\nasync def main():\n    await scheduler.start()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>\u200b\u66f4\u200b\u591a\u200b\u8be6\u7ec6\u200b\u793a\u4f8b\u200b\u8bf7\u200b\u67e5\u770b\u200b \u200b\u5feb\u901f\u200b\u5f00\u59cb\u200b \u200b\u6587\u6863\u200b\u3002</p>"},{"location":"#chronflow","title":"\u4e3a\u4ec0\u4e48\u200b\u9009\u62e9\u200b chronflow\uff1f","text":""},{"location":"#vs-celery","title":"vs Celery","text":"<ul> <li>\u2705 \u200b\u66f4\u200b\u8f7b\u91cf\u200b - \u200b\u65e0\u9700\u200b Redis/RabbitMQ \u200b\u5373\u53ef\u200b\u8fd0\u884c\u200b</li> <li>\u2705 \u200b\u66f4\u200b\u7b80\u5355\u200b - \u200b\u88c5\u9970\u200b\u5668\u5373\u200b\u7528\u200b\uff0c\u200b\u65e0\u9700\u200b\u989d\u5916\u200b\u914d\u7f6e\u200b</li> <li>\u2705 \u200b\u66f4\u200b\u5feb\u901f\u200b - \u200b\u7eaf\u200b asyncio\uff0c\u200b\u65e0\u200b\u8fdb\u7a0b\u200b\u5f00\u9500\u200b</li> <li>\u2705 \u200b\u66f4\u200b\u73b0\u4ee3\u200b - Python 3.11+ \u200b\u65b0\u200b\u7279\u6027\u200b</li> </ul>"},{"location":"#vs-apscheduler","title":"vs APScheduler","text":"<ul> <li>\u2705 \u200b\u66f4\u200b\u9ad8\u6027\u80fd\u200b - \u200b\u539f\u751f\u200b\u5f02\u6b65\u200b\uff0c\u200b\u4e0d\u662f\u200b\u540c\u6b65\u200b\u8f6c\u200b\u5f02\u6b65\u200b</li> <li>\u2705 \u200b\u66f4\u200b\u53ef\u9760\u200b - \u200b\u4f18\u5316\u200b\u7684\u200b\u5185\u5b58\u200b\u7ba1\u7406\u200b</li> <li>\u2705 \u200b\u66f4\u200b\u7075\u6d3b\u200b - \u200b\u53ef\u200b\u63d2\u62d4\u200b\u540e\u200b\u7aef\u200b</li> <li>\u2705 \u200b\u66f4\u597d\u200b\u7684\u200b\u53ef\u200b\u89c2\u6d4b\u200b\u6027\u200b - \u200b\u5185\u7f6e\u200b\u6307\u6807\u200b\u548c\u200b\u76d1\u63a7\u200b</li> </ul>"},{"location":"#_9","title":"\u8bb8\u53ef\u8bc1","text":"<p>MIT License</p>"},{"location":"changelog/","title":"\u66f4\u65b0\u200b\u65e5\u5fd7","text":"<p>\u200b\u672c\u200b\u6587\u6863\u200b\u8bb0\u5f55\u200b chronflow \u200b\u7684\u200b\u6240\u6709\u200b\u91cd\u8981\u200b\u53d8\u66f4\u200b\u3002</p> <p>\u200b\u683c\u5f0f\u200b\u57fa\u4e8e\u200b Keep a Changelog, \u200b\u7248\u672c\u53f7\u200b\u9075\u5faa\u200b \u200b\u8bed\u4e49\u200b\u5316\u200b\u7248\u672c\u200b\u3002</p>"},{"location":"changelog/#030-2025-10-24","title":"[0.3.0] - 2025-10-24","text":""},{"location":"changelog/#_2","title":"\u65b0\u589e\u200b \u2728","text":""},{"location":"changelog/#_3","title":"\u4efb\u52a1\u200b\u81ea\u52a8\u200b\u53d1\u73b0\u200b\u529f\u80fd","text":"<ul> <li>\ud83d\udd0d \u200b\u6dfb\u52a0\u200b <code>TaskDiscovery</code> \u200b\u7c7b\u200b,\u200b\u652f\u6301\u200b\u81ea\u52a8\u200b\u626b\u63cf\u200b\u548c\u200b\u6ce8\u518c\u200b\u5b9a\u65f6\u200b\u4efb\u52a1\u200b</li> <li>\ud83d\udcc1 \u200b\u652f\u6301\u200b\u6309\u200b\u76ee\u5f55\u200b\u626b\u63cf\u200b - <code>discover_tasks_from_directory()</code></li> <li>\ud83d\udce6 \u200b\u652f\u6301\u200b\u6309\u200b\u5305\u540d\u200b\u626b\u63cf\u200b - <code>discover_tasks_from_package()</code></li> <li>\ud83d\udcdd \u200b\u652f\u6301\u200b\u6a21\u5757\u200b\u5217\u8868\u200b\u5bfc\u5165\u200b - <code>discover_tasks_from_modules()</code></li> <li>\ud83c\udfaf \u200b\u652f\u6301\u200b\u901a\u914d\u7b26\u200b\u6587\u4ef6\u540d\u200b\u5339\u914d\u200b (\u200b\u5982\u200b <code>task.py</code>, <code>*_tasks.py</code>)</li> <li>\u267b\ufe0f \u200b\u652f\u6301\u200b\u9012\u5f52\u200b\u626b\u63cf\u200b\u5b50\u76ee\u5f55\u200b</li> <li>\ud83d\udeab \u200b\u652f\u6301\u200b\u6392\u9664\u200b\u7279\u5b9a\u200b\u6587\u4ef6\u200b\u6a21\u5f0f\u200b</li> <li>\u2705 \u200b\u81ea\u52a8\u200b\u6ce8\u518c\u200b\u53d1\u73b0\u200b\u7684\u200b\u4efb\u52a1\u200b\u5230\u200b\u8c03\u5ea6\u200b\u5668\u200b</li> <li>\ud83d\udee1\ufe0f \u200b\u9519\u8bef\u200b\u5bb9\u9519\u200b,\u200b\u5bfc\u5165\u200b\u5931\u8d25\u200b\u7684\u200b\u6a21\u5757\u200b\u4f1a\u200b\u88ab\u200b\u8df3\u200b\u8fc7\u200b</li> </ul>"},{"location":"changelog/#scheduler","title":"Scheduler \u200b\u96c6\u6210","text":"<ul> <li>\u200b\u6dfb\u52a0\u200b <code>discover_tasks_from_directory()</code> \u200b\u4fbf\u6377\u200b\u65b9\u6cd5\u200b</li> <li>\u200b\u6dfb\u52a0\u200b <code>discover_tasks_from_package()</code> \u200b\u4fbf\u6377\u200b\u65b9\u6cd5\u200b</li> <li>\u200b\u6dfb\u52a0\u200b <code>discover_tasks_from_modules()</code> \u200b\u4fbf\u6377\u200b\u65b9\u6cd5\u200b</li> </ul>"},{"location":"changelog/#_4","title":"\u4fee\u590d\u200b \ud83d\udc1b","text":"<ul> <li>\ud83d\udd27 \u200b\u4fee\u590d\u200b Cron \u200b\u8868\u8fbe\u5f0f\u200b\u79d2\u7ea7\u200b\u7cbe\u5ea6\u200b\u652f\u6301\u200b\u95ee\u9898\u200b</li> <li>\u200b\u5728\u200b <code>croniter</code> \u200b\u8c03\u7528\u200b\u4e2d\u200b\u6dfb\u52a0\u200b <code>second_at_beginning=True</code> \u200b\u53c2\u6570\u200b</li> <li>\u200b\u786e\u4fdd\u200b 6 \u200b\u6bb5\u200b\u5f0f\u200b Cron \u200b\u8868\u8fbe\u5f0f\u200b\u6b63\u5e38\u200b\u5de5\u4f5c\u200b (<code>\u200b\u79d2\u200b \u200b\u5206\u200b \u200b\u65f6\u200b \u200b\u65e5\u200b \u200b\u6708\u200b \u200b\u5468\u200b</code>)</li> <li>\u200b\u4fee\u590d\u200b <code>@daily()</code>, <code>@hourly()</code>, <code>@weekly()</code>, <code>@monthly()</code> \u200b\u88c5\u9970\u200b\u5668\u200b</li> </ul>"},{"location":"changelog/#_5","title":"\u6539\u8fdb\u200b \ud83d\udd27","text":"<ul> <li>\ud83d\udcda \u200b\u66f4\u65b0\u200b MkDocs \u200b\u914d\u7f6e\u200b,\u200b\u6dfb\u52a0\u200b\u4efb\u52a1\u200b\u81ea\u52a8\u200b\u53d1\u73b0\u200b\u6587\u6863\u200b</li> <li>\ud83d\udcdd \u200b\u6dfb\u52a0\u200b\u8be6\u7ec6\u200b\u7684\u200b\u4efb\u52a1\u200b\u81ea\u52a8\u200b\u53d1\u73b0\u200b\u4f7f\u7528\u200b\u6587\u6863\u200b\u548c\u200b\u793a\u4f8b\u200b</li> <li>\ud83c\udfaf \u200b\u4f18\u5316\u200b\u9879\u76ee\u200b\u96c6\u6210\u200b\u793a\u4f8b\u200b,\u200b\u6dfb\u52a0\u200b\u77ed\u200b\u95f4\u9694\u200b\u4efb\u52a1\u200b\u6f14\u793a\u200b</li> </ul>"},{"location":"changelog/#_6","title":"\u793a\u4f8b","text":"<ul> <li>\u200b\u6dfb\u52a0\u200b <code>examples/task_discovery_example.py</code> - \u200b\u4efb\u52a1\u200b\u81ea\u52a8\u200b\u53d1\u73b0\u200b\u57fa\u7840\u200b\u793a\u4f8b\u200b</li> <li>\u200b\u6dfb\u52a0\u200b <code>examples/project_integration_example.py</code> - \u200b\u5b9e\u9645\u200b\u9879\u76ee\u200b\u96c6\u6210\u200b\u793a\u4f8b\u200b</li> </ul>"},{"location":"changelog/#_7","title":"\u6587\u6863","text":"<ul> <li>\u200b\u6dfb\u52a0\u200b <code>docs/task_discovery.md</code> - \u200b\u4efb\u52a1\u200b\u81ea\u52a8\u200b\u53d1\u73b0\u200b\u5b8c\u6574\u200b\u6587\u6863\u200b</li> <li>\u200b\u66f4\u65b0\u200b <code>README.md</code> \u200b\u6dfb\u52a0\u200b\u81ea\u52a8\u200b\u53d1\u73b0\u200b\u529f\u80fd\u200b\u4ecb\u7ecd\u200b</li> <li>\u200b\u6dfb\u52a0\u200b <code>TASK_DISCOVERY_SUMMARY.md</code> - \u200b\u529f\u80fd\u200b\u5b9e\u73b0\u200b\u603b\u7ed3\u200b</li> </ul>"},{"location":"changelog/#_8","title":"\u6d4b\u8bd5","text":"<ul> <li>\u200b\u6dfb\u52a0\u200b <code>tests/test_discovery.py</code> - 13 \u200b\u4e2a\u200b\u6d4b\u8bd5\u7528\u4f8b\u200b,\u200b\u8986\u76d6\u200b\u6240\u6709\u200b\u53d1\u73b0\u200b\u529f\u80fd\u200b</li> <li>\u2705 \u200b\u6240\u6709\u200b 301 \u200b\u4e2a\u200b\u6d4b\u8bd5\u901a\u8fc7\u200b</li> </ul>"},{"location":"changelog/#010-2025-10-22","title":"[0.1.0] - 2025-10-22","text":""},{"location":"changelog/#_9","title":"\u65b0\u589e\u200b \u2728","text":""},{"location":"changelog/#_10","title":"\u53ef\u200b\u63d2\u62d4\u200b\u65e5\u5fd7\u200b\u7cfb\u7edf","text":"<ul> <li>\u200b\u6dfb\u52a0\u200b\u65e5\u5fd7\u200b\u9002\u914d\u5668\u200b\u63a5\u53e3\u200b <code>LoggerAdapter</code></li> <li>\u200b\u5185\u7f6e\u200b\u652f\u6301\u200b structlog\u3001loguru\u3001Python \u200b\u6807\u51c6\u200b\u5e93\u200b logging</li> <li>\u200b\u53ef\u4ee5\u200b\u5b8c\u5168\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u5b9e\u73b0\u200b</li> <li>\u200b\u652f\u6301\u200b\u7981\u7528\u200b\u65e5\u5fd7\u200b\u8f93\u51fa\u200b (<code>NoOpAdapter</code>)</li> <li>structlog \u200b\u4ece\u200b\u6838\u5fc3\u200b\u4f9d\u8d56\u200b\u53d8\u4e3a\u200b\u53ef\u200b\u9009\u200b\u4f9d\u8d56\u200b</li> </ul>"},{"location":"changelog/#_11","title":"\u589e\u5f3a\u200b\u7684\u200b\u76d1\u63a7\u200b\u529f\u80fd","text":"<ul> <li><code>list_tasks()</code> - \u200b\u83b7\u53d6\u200b\u6240\u6709\u200b\u4efb\u52a1\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\u5217\u8868\u200b</li> <li><code>get_task_count()</code> - \u200b\u83b7\u53d6\u200b\u5404\u200b\u72b6\u6001\u200b\u4efb\u52a1\u200b\u6570\u91cf\u200b\u7edf\u8ba1\u200b</li> <li><code>get_task_by_status()</code> - \u200b\u6309\u200b\u72b6\u6001\u200b\u7b5b\u9009\u200b\u4efb\u52a1\u200b</li> <li><code>get_task_by_tag()</code> - \u200b\u6309\u200b\u6807\u7b7e\u200b\u7b5b\u9009\u200b\u4efb\u52a1\u200b</li> <li><code>pause_task()</code> - \u200b\u6682\u505c\u200b\u6307\u5b9a\u200b\u4efb\u52a1\u200b</li> <li><code>resume_task()</code> - \u200b\u6062\u590d\u200b\u6307\u5b9a\u200b\u4efb\u52a1\u200b</li> <li>\u200b\u4efb\u52a1\u200b\u5217\u8868\u200b\u5305\u542b\u200b\u6210\u529f\u7387\u200b\u3001\u200b\u5e73\u5747\u200b\u6267\u884c\u200b\u65f6\u95f4\u200b\u7b49\u200b\u6307\u6807\u200b</li> </ul>"},{"location":"changelog/#_12","title":"\u65b0\u200b\u7684\u200b\u4fbf\u6377\u200b\u88c5\u9970\u200b\u5668","text":"<ul> <li><code>@every()</code> - \u200b\u66f4\u200b\u76f4\u89c2\u200b\u7684\u200b\u95f4\u9694\u200b\u4efb\u52a1\u200b (<code>@every(minutes=30)</code>)</li> <li><code>@hourly()</code> - \u200b\u6bcf\u200b\u5c0f\u65f6\u200b\u6267\u884c\u200b (<code>@hourly(minute=30)</code>)</li> <li><code>@daily()</code> - \u200b\u6bcf\u5929\u200b\u6267\u884c\u200b (<code>@daily(hour=9, minute=30)</code>)</li> <li><code>@weekly()</code> - \u200b\u6bcf\u5468\u200b\u6267\u884c\u200b (<code>@weekly(day=1, hour=10)</code>)</li> <li><code>@monthly()</code> - \u200b\u6bcf\u6708\u200b\u6267\u884c\u200b (<code>@monthly(day=1)</code>)</li> </ul>"},{"location":"changelog/#python","title":"Python \u200b\u7248\u672c\u200b\u652f\u6301","text":"<ul> <li>\u200b\u6dfb\u52a0\u200b Python 3.13 \u200b\u5b98\u65b9\u200b\u652f\u6301\u200b</li> <li>\u200b\u7ee7\u7eed\u200b\u652f\u6301\u200b Python 3.11 \u200b\u548c\u200b 3.12</li> </ul>"},{"location":"changelog/#_13","title":"\u6539\u8fdb\u200b \ud83d\udd27","text":"<ul> <li>\u200b\u4f9d\u8d56\u200b\u4f18\u5316\u200b: structlog \u200b\u53d8\u4e3a\u200b\u53ef\u200b\u9009\u200b\u4f9d\u8d56\u200b,\u200b\u51cf\u5c11\u200b\u9ed8\u8ba4\u200b\u5b89\u88c5\u200b\u4f53\u79ef\u200b</li> <li>\u200b\u7c7b\u578b\u200b\u63d0\u793a\u200b: \u200b\u6240\u6709\u200b\u65b0\u200b\u529f\u80fd\u200b\u90fd\u200b\u6709\u200b\u5b8c\u6574\u200b\u7684\u200b\u7c7b\u578b\u200b\u63d0\u793a\u200b</li> <li>\u200b\u6587\u6863\u200b: \u200b\u6dfb\u52a0\u200b\u8be6\u7ec6\u200b\u7684\u200b\u65b0\u200b\u529f\u80fd\u200b\u6587\u6863\u200b\u548c\u200b\u793a\u4f8b\u200b</li> <li>\u200b\u65e5\u5fd7\u200b\u8f93\u51fa\u200b: \u200b\u4f18\u5316\u200b\u65e5\u5fd7\u200b\u683c\u5f0f\u200b,\u200b\u652f\u6301\u200b\u7ed3\u6784\u5316\u200b\u65e5\u5fd7\u200b</li> </ul>"},{"location":"changelog/#_14","title":"\u793a\u4f8b","text":"<ul> <li>\u200b\u6dfb\u52a0\u200b <code>examples/advanced_features.py</code> - \u200b\u9ad8\u7ea7\u200b\u529f\u80fd\u200b\u6f14\u793a\u200b</li> <li>\u200b\u6dfb\u52a0\u200b <code>examples/custom_logger.py</code> - \u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u6f14\u793a\u200b</li> </ul>"},{"location":"changelog/#_15","title":"\u6280\u672f\u7ec6\u8282","text":""},{"location":"changelog/#_16","title":"\u65e5\u5fd7\u200b\u7cfb\u7edf\u200b\u67b6\u6784","text":"<pre><code>LoggerAdapter (\u200b\u62bd\u8c61\u200b\u57fa\u7c7b\u200b)\n    \u251c\u2500\u2500 StructlogAdapter (\u200b\u9ed8\u8ba4\u200b,\u200b\u53ef\u200b\u9009\u200b)\n    \u251c\u2500\u2500 LoguruAdapter (\u200b\u53ef\u200b\u9009\u200b)\n    \u251c\u2500\u2500 StdlibAdapter (\u200b\u5185\u7f6e\u200b)\n    \u2514\u2500\u2500 NoOpAdapter (\u200b\u5185\u7f6e\u200b)\n</code></pre>"},{"location":"changelog/#_17","title":"\u65b0\u200b\u7684\u200b\u88c5\u9970\u200b\u5668\u200b\u6620\u5c04","text":"\u88c5\u9970\u200b\u5668\u200b \u200b\u7b49\u4ef7\u200b Cron \u200b\u8bf4\u660e\u200b <code>@hourly()</code> <code>0 0 * * * *</code> \u200b\u6bcf\u200b\u5c0f\u65f6\u200b\u6574\u70b9\u200b <code>@daily()</code> <code>0 0 0 * * *</code> \u200b\u6bcf\u5929\u200b 0:00 <code>@weekly()</code> <code>0 0 0 * * 0</code> \u200b\u6bcf\u5468\u65e5\u200b 0:00 <code>@monthly()</code> <code>0 0 0 1 * *</code> \u200b\u6bcf\u6708\u200b 1 \u200b\u53f7\u200b 0:00"},{"location":"changelog/#_18","title":"\u7834\u574f\u6027\u200b\u53d8\u66f4\u200b \u26a0\ufe0f","text":"<p>\u200b\u65e0\u200b\u3002\u200b\u6b64\u200b\u7248\u672c\u200b\u5b8c\u5168\u200b\u5411\u200b\u540e\u200b\u517c\u5bb9\u200b\u3002</p>"},{"location":"changelog/#_19","title":"\u5df2\u77e5\u200b\u95ee\u9898","text":"<p>\u200b\u65e0\u200b\u3002</p>"},{"location":"changelog/#_20","title":"\u5b89\u5168\u6027","text":"<p>\u200b\u65e0\u200b\u5b89\u5168\u200b\u76f8\u5173\u200b\u66f4\u65b0\u200b\u3002</p>"},{"location":"changelog/#021-2025-10-24","title":"[0.2.1] - 2025-10-24","text":""},{"location":"changelog/#_21","title":"\u4fee\u590d\u200b \ud83d\udc1b","text":""},{"location":"changelog/#_22","title":"\u4fe1\u53f7\u5904\u7406","text":"<ul> <li>\u200b\u4fee\u590d\u200b\u524d\u53f0\u200b\u8fd0\u884c\u200b\u65f6\u200b\u65e0\u6cd5\u200b\u54cd\u5e94\u200b Ctrl+C \u200b\u7684\u200b\u95ee\u9898\u200b (#BUG-001)</li> <li>\u200b\u5728\u200b\u975e\u200b\u5b88\u62a4\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\u6dfb\u52a0\u200b\u4fe1\u53f7\u5904\u7406\u5668\u200b\u6ce8\u518c\u200b</li> <li>\u200b\u652f\u6301\u200b SIGINT (Ctrl+C) \u200b\u548c\u200b SIGTERM \u200b\u4f18\u96c5\u200b\u505c\u6b62\u200b</li> <li>\u200b\u4f7f\u7528\u200b <code>loop.call_soon_threadsafe()</code> \u200b\u786e\u4fdd\u200b\u7ebf\u7a0b\u200b\u5b89\u5168\u200b</li> <li>\u200b\u6587\u4ef6\u200b: <code>chronflow/scheduler.py:709-726</code></li> </ul>"},{"location":"changelog/#_23","title":"\u65e5\u5fd7\u200b\u7cfb\u7edf","text":"<ul> <li>\u200b\u4fee\u590d\u200b LogRecord 'exc_info' \u200b\u5b57\u200b\u6bb5\u200b\u8986\u76d6\u200b\u9519\u8bef\u200b (#BUG-002)</li> <li>\u200b\u5728\u200b\u5404\u200b\u65e5\u5fd7\u200b\u9002\u914d\u5668\u200b\u4e2d\u200b\u4ece\u200b kwargs \u200b\u63d0\u53d6\u200b exc_info \u200b\u53c2\u6570\u200b</li> <li>\u200b\u907f\u514d\u200b\u4e0e\u200b Python \u200b\u6807\u51c6\u200b\u5e93\u200b logging.LogRecord \u200b\u5b57\u200b\u6bb5\u200b\u51b2\u7a81\u200b</li> <li>\u200b\u6539\u7528\u200b <code>exception()</code> \u200b\u65b9\u6cd5\u200b\u8bb0\u5f55\u200b\u5f02\u5e38\u200b,\u200b\u800c\u200b\u4e0d\u662f\u200b <code>error(..., exc_info=True)</code></li> <li>\u200b\u6587\u4ef6\u200b: <code>chronflow/logging.py</code>, <code>chronflow/scheduler.py</code></li> </ul>"},{"location":"changelog/#_24","title":"\u4efb\u52a1\u8c03\u5ea6","text":"<ul> <li>\u200b\u4fee\u590d\u200b\u4efb\u52a1\u200b\u91cd\u590d\u200b\u6267\u884c\u200b\u5bfc\u81f4\u200b\u8fde\u63a5\u6570\u200b\u8fc7\u591a\u200b\u7684\u200b\u95ee\u9898\u200b (#BUG-003)</li> <li>\u200b\u5728\u200b\u88c5\u9970\u200b\u5668\u4e2d\u200b\u6dfb\u52a0\u200b\u91cd\u590d\u200b\u4efb\u52a1\u200b\u68c0\u67e5\u200b\u673a\u5236\u200b</li> <li>\u200b\u9632\u6b62\u200b\u6a21\u5757\u200b\u91cd\u65b0\u200b\u52a0\u8f7d\u200b\u65f6\u200b\u4efb\u52a1\u200b\u88ab\u200b\u91cd\u590d\u200b\u6ce8\u518c\u200b</li> <li>\u200b\u907f\u514d\u200b Redis \"Too many connections\" \u200b\u9519\u8bef\u200b</li> <li>\u200b\u6587\u4ef6\u200b: <code>chronflow/decorators.py:167-170</code></li> </ul>"},{"location":"changelog/#_25","title":"\u5b88\u62a4\u200b\u8fdb\u7a0b","text":"<ul> <li>\u200b\u4fee\u590d\u200b\u540e\u53f0\u200b\u8fd0\u884c\u200b\u65f6\u200b\u8f93\u51fa\u200b\u5230\u200b\u7ec8\u7aef\u200b\u7684\u200b\u95ee\u9898\u200b (#BUG-004)</li> <li>\u200b\u5728\u200b\u5b88\u62a4\u200b\u8fdb\u7a0b\u200b\u5b50\u200b\u8fdb\u7a0b\u200b\u4e2d\u200b\u91cd\u5b9a\u5411\u200b\u6807\u51c6\u200b\u8f93\u5165\u200b/\u200b\u8f93\u51fa\u200b/\u200b\u9519\u8bef\u200b\u5230\u200b <code>/dev/null</code></li> <li>\u200b\u9632\u6b62\u200b\u5b88\u62a4\u200b\u8fdb\u7a0b\u200b\u65e5\u5fd7\u200b\u5e72\u6270\u200b\u542f\u52a8\u200b\u7ec8\u7aef\u200b</li> <li>\u200b\u6587\u4ef6\u200b: <code>chronflow/daemon.py:131-135</code></li> </ul>"},{"location":"changelog/#_26","title":"\u6539\u8fdb\u200b \ud83d\udd27","text":""},{"location":"changelog/#_27","title":"\u6d4b\u8bd5\u200b\u8986\u76d6\u7387","text":"<ul> <li>\u200b\u63d0\u5347\u200b\u6d4b\u8bd5\u200b\u8986\u76d6\u7387\u200b\u4ece\u200b 87% \u200b\u5230\u200b 91% (#IMPROVE-001)</li> <li>\u200b\u65b0\u589e\u200b <code>tests/test_coverage_improvement.py</code> \u200b\u8865\u5145\u200b\u6d4b\u8bd5\u200b</li> <li>\u200b\u65b0\u589e\u200b <code>tests/test_decorators_advanced.py</code> \u200b\u88c5\u9970\u200b\u5668\u200b\u9ad8\u7ea7\u200b\u6d4b\u8bd5\u200b</li> <li>\u200b\u4f18\u5316\u200b <code>.coveragerc</code> \u200b\u914d\u7f6e\u200b,\u200b\u6392\u9664\u200b\u53ef\u89c6\u5316\u200b\u76f8\u5173\u200b\u4ee3\u7801\u200b</li> <li>\u200b\u603b\u8ba1\u200b 288+ \u200b\u4e2a\u200b\u6d4b\u8bd5\u7528\u4f8b\u200b</li> </ul>"},{"location":"changelog/#_28","title":"\u6587\u6863","text":"<ul> <li>\u200b\u65b0\u589e\u200b\u8be6\u7ec6\u200b\u7684\u200b\u96c6\u6210\u200b\u6307\u5357\u200b (#IMPROVE-002)</li> <li>\u200b\u96c6\u6210\u200b\u6307\u5357\u200b: \u200b\u5e2e\u52a9\u200b\u7528\u6237\u200b\u6b63\u786e\u200b\u96c6\u6210\u200b Chronflow</li> <li>\u200b\u5e38\u89c1\u200b\u95ee\u9898\u89e3\u7b54\u200b\u548c\u200b\u6700\u4f73\u200b\u5b9e\u8df5\u200b</li> <li>\u200b\u5b8c\u5584\u200b\u7684\u200b\u4f7f\u7528\u200b\u793a\u4f8b\u200b</li> </ul>"},{"location":"changelog/#_29","title":"\u7834\u574f\u6027\u200b\u53d8\u66f4\u200b \u26a0\ufe0f","text":"<p>\u200b\u65e0\u200b\u3002\u200b\u6b64\u200b\u7248\u672c\u200b\u5b8c\u5168\u200b\u5411\u200b\u540e\u200b\u517c\u5bb9\u200b 0.2.0\u3002</p>"},{"location":"changelog/#_30","title":"\u5b89\u5168\u6027","text":"<ul> <li>\u200b\u6539\u8fdb\u200b\u4fe1\u53f7\u5904\u7406\u200b\u7684\u200b\u7ebf\u7a0b\u200b\u5b89\u5168\u6027\u200b</li> <li>\u200b\u589e\u5f3a\u200b\u5b88\u62a4\u200b\u8fdb\u7a0b\u200b\u7684\u200b\u5b89\u5168\u200b\u6743\u9650\u200b\u8bbe\u7f6e\u200b</li> </ul>"},{"location":"changelog/#_31","title":"\u5347\u7ea7\u200b\u5efa\u8bae","text":"<p>\u200b\u4ece\u200b 0.2.0 \u200b\u5347\u7ea7\u200b\u5230\u200b 0.2.1:</p> <ol> <li>\u200b\u5982\u679c\u200b\u9047\u5230\u200b\u4efb\u52a1\u200b\u91cd\u590d\u200b\u6267\u884c\u200b\u95ee\u9898\u200b:</li> <li>\u200b\u68c0\u67e5\u200b\u6a21\u5757\u200b\u662f\u5426\u200b\u88ab\u200b\u591a\u6b21\u200b\u5bfc\u5165\u200b</li> <li>\u200b\u786e\u4fdd\u200b\u88c5\u9970\u200b\u5668\u200b\u5728\u200b\u6a21\u5757\u200b\u7ea7\u522b\u200b\u4f7f\u7528\u200b,\u200b\u4e0d\u200b\u5728\u200b\u51fd\u6570\u200b/\u200b\u65b9\u6cd5\u200b\u4e2d\u200b</li> <li> <p>\u200b\u53c2\u8003\u200b\u96c6\u6210\u200b\u6307\u5357\u200b\u4e86\u89e3\u200b\u6700\u4f73\u200b\u5b9e\u8df5\u200b</p> </li> <li> <p>\u200b\u5982\u679c\u200b\u4f7f\u7528\u200b Loguru \u200b\u6216\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b:</p> </li> <li> <p>\u200b\u65e0\u9700\u200b\u4fee\u6539\u200b,\u200b\u5df2\u200b\u81ea\u52a8\u200b\u517c\u5bb9\u200b exc_info \u200b\u53c2\u6570\u200b</p> </li> <li> <p>\u200b\u5982\u679c\u200b\u4f7f\u7528\u200b\u5b88\u62a4\u200b\u8fdb\u7a0b\u200b\u6a21\u5f0f\u200b:</p> </li> <li>\u200b\u65e5\u5fd7\u200b\u5c06\u200b\u4e0d\u518d\u200b\u8f93\u51fa\u200b\u5230\u200b\u7ec8\u7aef\u200b,\u200b\u5efa\u8bae\u200b\u914d\u7f6e\u200b\u65e5\u5fd7\u200b\u6587\u4ef6\u200b</li> </ol>"},{"location":"changelog/#020-2025-10-23","title":"[0.2.0] - 2025-10-23","text":"<p>\u200b\u672c\u6b21\u200b\u53d1\u5e03\u200b\u5305\u542b\u200b\u65b0\u200b\u7279\u6027\u200b\u4e0e\u200b\u6539\u8fdb\u200b\uff1a - \u200b\u65b0\u589e\u200b <code>chronflow/daemon.py</code>\uff0c\u200b\u652f\u6301\u200b\u5b88\u62a4\u200b\u8fdb\u7a0b\u200b\u8fd0\u884c\u200b\u8c03\u5ea6\u200b\u5668\u200b - \u200b\u589e\u5f3a\u200b\u6307\u6807\u200b\u91c7\u96c6\u200b\u4e0e\u200b\u53ef\u89c6\u5316\u200b\u793a\u4f8b\u200b\uff08<code>examples/metrics_visualization.py</code>\uff09 - \u200b\u5b8c\u5584\u200b\u88c5\u9970\u200b\u5668\u200b\u4e0e\u200b\u914d\u7f6e\u200b\u6620\u5c04\u200b\uff0c\u200b\u63d0\u5347\u200b\u6d4b\u8bd5\u200b\u8986\u76d6\u7387\u200b - \u200b\u652f\u6301\u200b Python 3.13\uff08CI \u200b\u9a8c\u8bc1\u200b\uff09\uff0c\u200b\u4fdd\u6301\u200b\u7c7b\u578b\u200b\u5b89\u5168\u200b - \u200b\u6587\u6863\u200b\u4e0e\u200b\u793a\u4f8b\u200b\u66f4\u65b0\u200b</p>"},{"location":"changelog/#_32","title":"\u7834\u574f\u6027\u200b\u53d8\u66f4\u200b \u26a0\ufe0f","text":"<p>\u200b\u65e0\u200b\u3002\u200b\u6b64\u200b\u7248\u672c\u200b\u5411\u200b\u540e\u200b\u517c\u5bb9\u200b\u3002</p>"},{"location":"changelog/#_33","title":"\u5df2\u77e5\u200b\u95ee\u9898","text":"<p>\u200b\u65e0\u200b\u3002</p>"},{"location":"changelog/#_34","title":"[\u200b\u672a\u200b\u53d1\u5e03\u200b]","text":""},{"location":"changelog/#_35","title":"\u8ba1\u5212\u200b\u4e2d\u200b\u7684\u200b\u529f\u80fd","text":"<ul> <li>[ ] Web \u200b\u7ba1\u7406\u200b\u754c\u9762\u200b</li> <li>[ ] Prometheus \u200b\u6307\u6807\u200b\u5bfc\u51fa\u200b</li> <li>[ ] \u200b\u4efb\u52a1\u200b\u4f9d\u8d56\u200b\u5173\u7cfb\u200b</li> <li>[ ] \u200b\u52a8\u6001\u200b\u6dfb\u52a0\u200b/\u200b\u5220\u9664\u200b\u4efb\u52a1\u200b</li> <li>[ ] \u200b\u5206\u5e03\u5f0f\u200b\u9501\u200b\u652f\u6301\u200b</li> <li>[ ] PostgreSQL \u200b\u540e\u200b\u7aef\u200b\u652f\u6301\u200b</li> </ul>"},{"location":"changelog/#_36","title":"\u7248\u672c\u200b\u8bf4\u660e","text":""},{"location":"changelog/#010-beta","title":"[0.1.0] - \u200b\u9996\u4e2a\u200b Beta \u200b\u7248\u672c","text":"<p>\u200b\u8fd9\u662f\u200b chronflow \u200b\u7684\u200b\u9996\u4e2a\u200b\u516c\u5f00\u200b Beta \u200b\u7248\u672c\u200b,\u200b\u5305\u542b\u200b\u4ee5\u4e0b\u200b\u6838\u5fc3\u200b\u529f\u80fd\u200b:</p> <p>\u200b\u6838\u5fc3\u200b\u7279\u6027\u200b: - \u200b\u9ad8\u6027\u80fd\u200b\u5f02\u6b65\u200b\u8c03\u5ea6\u200b\u5668\u200b - \u200b\u591a\u79cd\u200b\u961f\u5217\u200b\u540e\u200b\u7aef\u200b(\u200b\u5185\u5b58\u200b/SQLite/Redis/RabbitMQ) - \u200b\u667a\u80fd\u200b\u91cd\u8bd5\u200b\u673a\u5236\u200b - \u200b\u79d2\u7ea7\u200b Cron \u200b\u8868\u8fbe\u5f0f\u200b\u652f\u6301\u200b - \u200b\u88c5\u9970\u200b\u5668\u200b API - \u200b\u5b8c\u6574\u200b\u7684\u200b\u7c7b\u578b\u200b\u63d0\u793a\u200b - \u200b\u53ef\u200b\u63d2\u62d4\u200b\u65e5\u5fd7\u200b\u7cfb\u7edf\u200b - \u200b\u4e30\u5bcc\u200b\u7684\u200b\u76d1\u63a7\u200b\u529f\u80fd\u200b</p> <p>\u200b\u961f\u5217\u200b\u540e\u200b\u7aef\u200b: - MemoryBackend - \u200b\u5185\u5b58\u200b\u961f\u5217\u200b,\u200b\u96f6\u200b\u4f9d\u8d56\u200b - SQLiteBackend - \u200b\u672c\u5730\u200b\u6301\u4e45\u200b\u5316\u200b - RedisBackend - \u200b\u5206\u5e03\u5f0f\u200b\u961f\u5217\u200b - RabbitMQBackend - \u200b\u9ad8\u53ef\u9760\u6027\u200b\u6d88\u606f\u200b\u961f\u5217\u200b</p> <p>\u200b\u88c5\u9970\u200b\u5668\u200b: - <code>@scheduled</code> - \u200b\u901a\u7528\u200b\u8c03\u5ea6\u200b\u5668\u200b - <code>@cron</code> - Cron \u200b\u8868\u8fbe\u5f0f\u200b - <code>@interval</code> - \u200b\u56fa\u5b9a\u200b\u95f4\u9694\u200b - <code>@once</code> - \u200b\u4e00\u6b21\u6027\u200b\u4efb\u52a1\u200b - <code>@every</code> - \u200b\u76f4\u89c2\u200b\u95f4\u9694\u200b - <code>@hourly</code> - \u200b\u6bcf\u200b\u5c0f\u65f6\u200b - <code>@daily</code> - \u200b\u6bcf\u5929\u200b - <code>@weekly</code> - \u200b\u6bcf\u5468\u200b - <code>@monthly</code> - \u200b\u6bcf\u6708\u200b</p> <p>\u200b\u76d1\u63a7\u200b\u529f\u80fd\u200b: - \u200b\u4efb\u52a1\u200b\u5217\u8868\u200b\u67e5\u8be2\u200b - \u200b\u72b6\u6001\u200b\u7edf\u8ba1\u200b - \u200b\u6807\u7b7e\u200b\u7b5b\u9009\u200b - \u200b\u4efb\u52a1\u200b\u63a7\u5236\u200b(\u200b\u6682\u505c\u200b/\u200b\u6062\u590d\u200b) - \u200b\u8be6\u7ec6\u200b\u6307\u6807\u200b</p> <p>\u200b\u65e5\u5fd7\u200b\u652f\u6301\u200b: - Structlog - Loguru - Python logging - \u200b\u81ea\u5b9a\u4e49\u200b\u9002\u914d\u5668\u200b - \u200b\u7981\u7528\u200b\u65e5\u5fd7\u200b</p> <p>\u200b\u6d4b\u8bd5\u200b\u8986\u76d6\u200b: - 60+ \u200b\u5355\u5143\u6d4b\u8bd5\u200b - \u200b\u9ad8\u200b\u6d4b\u8bd5\u200b\u8986\u76d6\u7387\u200b - \u200b\u591a\u4e2a\u200b\u5b9e\u7528\u200b\u793a\u4f8b\u200b</p>"},{"location":"changelog/#_37","title":"\u8d21\u732e","text":"<p>\u200b\u53d1\u73b0\u200b Bug \u200b\u6216\u200b\u6709\u200b\u65b0\u200b\u529f\u80fd\u200b\u5efa\u8bae\u200b?\u200b\u6b22\u8fce\u200b\u63d0\u4ea4\u200b Issue!</p>"},{"location":"changelog/#_38","title":"\u8bb8\u53ef\u8bc1","text":"<p>MIT License - \u200b\u8be6\u89c1\u200b LICENSE</p>"},{"location":"contributing/","title":"\u8d21\u732e\u200b\u6307\u5357","text":"<p>\u200b\u611f\u8c22\u200b\u4f60\u200b\u5bf9\u200b chronflow \u200b\u7684\u200b\u5174\u8da3\u200b\uff01\u200b\u672c\u200b\u6307\u5357\u200b\u5c06\u200b\u5e2e\u52a9\u200b\u4f60\u200b\u4e86\u89e3\u200b\u5982\u4f55\u200b\u4e3a\u200b\u9879\u76ee\u200b\u505a\u51fa\u200b\u8d21\u732e\u200b\u3002</p>"},{"location":"contributing/#_2","title":"\u5f00\u53d1\u200b\u73af\u5883\u200b\u8bbe\u7f6e","text":""},{"location":"contributing/#1-fork-clone","title":"1. Fork \u200b\u548c\u200b Clone","text":"<pre><code># Fork \u200b\u9879\u76ee\u200b\u5230\u200b\u4f60\u200b\u7684\u200b GitHub \u200b\u8d26\u53f7\u200b\n# \u200b\u7136\u540e\u200b clone \u200b\u5230\u200b\u672c\u5730\u200b\ngit clone https://github.com/your-username/chronflow.git\ncd chronflow\n\n# \u200b\u6dfb\u52a0\u200b\u4e0a\u6e38\u200b\u4ed3\u5e93\u200b\ngit remote add upstream https://github.com/getaix/chronflow.git\n</code></pre>"},{"location":"contributing/#2-uv","title":"2. \u200b\u5b89\u88c5\u200b uv","text":"<pre><code># macOS/Linux\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Windows\npowershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre>"},{"location":"contributing/#3","title":"3. \u200b\u5b89\u88c5\u200b\u4f9d\u8d56","text":"<pre><code># \u200b\u521b\u5efa\u200b\u865a\u62df\u73af\u5883\u200b\u5e76\u200b\u5b89\u88c5\u200b\u6240\u6709\u200b\u4f9d\u8d56\u200b\nuv sync --all-groups --extra all\n</code></pre>"},{"location":"contributing/#4","title":"4. \u200b\u5b89\u88c5\u200b\u5f00\u53d1\u200b\u94a9\u5b50","text":"<pre><code># \u200b\u5b89\u88c5\u200b pre-commit hooks\uff08\u200b\u53ef\u200b\u9009\u200b\uff09\nuv run pre-commit install\n</code></pre>"},{"location":"contributing/#_3","title":"\u5f00\u53d1\u200b\u6d41\u7a0b","text":""},{"location":"contributing/#1","title":"1. \u200b\u521b\u5efa\u200b\u5206\u652f","text":"<pre><code>git checkout -b feature/your-feature-name\n# \u200b\u6216\u200b\ngit checkout -b fix/your-bug-fix\n</code></pre>"},{"location":"contributing/#2","title":"2. \u200b\u7f16\u5199\u200b\u4ee3\u7801","text":"<ul> <li>\u200b\u9075\u5faa\u200b\u73b0\u6709\u200b\u7684\u200b\u4ee3\u7801\u200b\u98ce\u683c\u200b</li> <li>\u200b\u6dfb\u52a0\u200b\u5fc5\u8981\u200b\u7684\u200b\u7c7b\u578b\u200b\u63d0\u793a\u200b</li> <li>\u200b\u7f16\u5199\u200b\u4e2d\u6587\u200b\u6ce8\u91ca\u200b\u548c\u200b\u6587\u6863\u200b\u5b57\u7b26\u4e32\u200b</li> <li>\u200b\u786e\u4fdd\u200b\u4ee3\u7801\u200b\u901a\u8fc7\u200b\u6240\u6709\u200b\u6d4b\u8bd5\u200b</li> </ul>"},{"location":"contributing/#3_1","title":"3. \u200b\u8fd0\u884c\u200b\u6d4b\u8bd5","text":"<pre><code># \u200b\u8fd0\u884c\u200b\u6240\u6709\u200b\u6d4b\u8bd5\u200b\nuv run pytest\n\n# \u200b\u8fd0\u884c\u200b\u6d4b\u8bd5\u200b\u5e76\u200b\u751f\u6210\u200b\u8986\u76d6\u7387\u200b\u62a5\u544a\u200b\nuv run pytest --cov=chronflow --cov-report=html\n\n# \u200b\u67e5\u770b\u200b\u8986\u76d6\u7387\u200b\u62a5\u544a\u200b\nopen htmlcov/index.html\n</code></pre>"},{"location":"contributing/#4_1","title":"4. \u200b\u4ee3\u7801\u200b\u68c0\u67e5","text":"<pre><code># Ruff \u200b\u68c0\u67e5\u200b\nuv run ruff check chronflow/\n\n# Ruff \u200b\u683c\u5f0f\u5316\u200b\u68c0\u67e5\u200b\nuv run ruff format --check chronflow/\n\n# \u200b\u81ea\u52a8\u200b\u4fee\u590d\u200b\nuv run ruff check --fix chronflow/\nuv run ruff format chronflow/\n\n# \u200b\u7c7b\u578b\u200b\u68c0\u67e5\u200b\nuv run mypy chronflow/\n</code></pre>"},{"location":"contributing/#5","title":"5. \u200b\u63d0\u4ea4\u200b\u4ee3\u7801","text":"<pre><code># \u200b\u6dfb\u52a0\u200b\u66f4\u6539\u200b\ngit add .\n\n# \u200b\u63d0\u4ea4\u200b\uff08\u200b\u4f7f\u7528\u200b\u6709\u200b\u610f\u4e49\u200b\u7684\u200b\u63d0\u4ea4\u200b\u4fe1\u606f\u200b\uff09\ngit commit -m \"feat: \u200b\u6dfb\u52a0\u200b\u65b0\u200b\u529f\u80fd\u200b XXX\"\n# \u200b\u6216\u200b\ngit commit -m \"fix: \u200b\u4fee\u590d\u200b XXX \u200b\u95ee\u9898\u200b\"\n</code></pre> <p>\u200b\u63d0\u4ea4\u200b\u4fe1\u606f\u683c\u5f0f\u200b\uff1a - <code>feat:</code> - \u200b\u65b0\u200b\u529f\u80fd\u200b - <code>fix:</code> - \u200b\u4fee\u590d\u200b bug - <code>docs:</code> - \u200b\u6587\u6863\u200b\u66f4\u65b0\u200b - <code>test:</code> - \u200b\u6d4b\u8bd5\u200b\u76f8\u5173\u200b - <code>refactor:</code> - \u200b\u91cd\u6784\u200b\u4ee3\u7801\u200b - <code>chore:</code> - \u200b\u6784\u5efa\u200b/\u200b\u5de5\u5177\u200b\u76f8\u5173\u200b</p>"},{"location":"contributing/#6-pr","title":"6. \u200b\u63a8\u9001\u200b\u5e76\u200b\u521b\u5efa\u200b PR","text":"<pre><code># \u200b\u63a8\u9001\u200b\u5230\u200b\u4f60\u200b\u7684\u200b fork\ngit push origin feature/your-feature-name\n\n# \u200b\u7136\u540e\u200b\u5728\u200b GitHub \u200b\u4e0a\u200b\u521b\u5efa\u200b Pull Request\n</code></pre>"},{"location":"contributing/#_4","title":"\u4ee3\u7801\u200b\u89c4\u8303","text":""},{"location":"contributing/#python","title":"Python \u200b\u4ee3\u7801","text":"<ul> <li>\u200b\u4f7f\u7528\u200b Python 3.11+ \u200b\u8bed\u6cd5\u200b</li> <li>100% \u200b\u7c7b\u578b\u200b\u63d0\u793a\u200b\u8986\u76d6\u200b</li> <li>\u200b\u9075\u5faa\u200b PEP 8 \u200b\u89c4\u8303\u200b</li> <li>\u200b\u884c\u200b\u957f\u5ea6\u200b\u9650\u5236\u200b\uff1a100 \u200b\u5b57\u7b26\u200b</li> </ul>"},{"location":"contributing/#_5","title":"\u6ce8\u91ca\u200b\u548c\u200b\u6587\u6863","text":"<ul> <li>\u200b\u6240\u6709\u200b\u516c\u5171\u200b API \u200b\u5fc5\u987b\u200b\u6709\u200b\u6587\u6863\u200b\u5b57\u7b26\u4e32\u200b</li> <li>\u200b\u6587\u6863\u200b\u5b57\u7b26\u4e32\u200b\u4f7f\u7528\u200b\u4e2d\u6587\u200b</li> <li>\u200b\u4f7f\u7528\u200b Google \u200b\u98ce\u683c\u200b\u7684\u200b\u6587\u6863\u200b\u5b57\u7b26\u4e32\u200b\u683c\u5f0f\u200b</li> </ul> <p>\u200b\u793a\u4f8b\u200b\uff1a</p> <pre><code>def my_function(param1: str, param2: int) -&gt; bool:\n    \"\"\"\u200b\u51fd\u6570\u200b\u7b80\u77ed\u200b\u63cf\u8ff0\u200b\u3002\n\n    \u200b\u8be6\u7ec6\u200b\u8bf4\u660e\u200b\u51fd\u6570\u200b\u7684\u200b\u529f\u80fd\u200b\u548c\u200b\u7528\u9014\u200b\u3002\n\n    Args:\n        param1: \u200b\u7b2c\u4e00\u4e2a\u200b\u53c2\u6570\u200b\u7684\u200b\u8bf4\u660e\u200b\n        param2: \u200b\u7b2c\u4e8c\u4e2a\u200b\u53c2\u6570\u200b\u7684\u200b\u8bf4\u660e\u200b\n\n    Returns:\n        \u200b\u8fd4\u56de\u503c\u200b\u7684\u200b\u8bf4\u660e\u200b\n\n    Raises:\n        ValueError: \u200b\u4f55\u65f6\u200b\u629b\u51fa\u200b\u6b64\u200b\u5f02\u5e38\u200b\n\n    \u200b\u793a\u4f8b\u200b:\n        &gt;&gt;&gt; result = my_function(\"test\", 42)\n        &gt;&gt;&gt; print(result)\n        True\n    \"\"\"\n    pass\n</code></pre>"},{"location":"contributing/#_6","title":"\u6d4b\u8bd5","text":"<ul> <li>\u200b\u6240\u6709\u200b\u65b0\u200b\u529f\u80fd\u200b\u5fc5\u987b\u200b\u5305\u542b\u200b\u6d4b\u8bd5\u200b</li> <li>\u200b\u6d4b\u8bd5\u200b\u8986\u76d6\u7387\u200b\u5e94\u200b\u4fdd\u6301\u200b\u5728\u200b 80% \u200b\u4ee5\u4e0a\u200b</li> <li>\u200b\u4f7f\u7528\u200b pytest \u200b\u548c\u200b pytest-asyncio</li> <li>\u200b\u6d4b\u8bd5\u51fd\u6570\u200b\u540d\u200b\u4f7f\u7528\u200b\u4e2d\u6587\u200b\u63cf\u8ff0\u200b</li> </ul> <p>\u200b\u793a\u4f8b\u200b\uff1a</p> <pre><code>import pytest\nfrom chronflow import Scheduler\n\nclass TestScheduler:\n    \"\"\"\u200b\u8c03\u5ea6\u200b\u5668\u200b\u6d4b\u8bd5\u200b\u7c7b\u200b\u3002\"\"\"\n\n    def test_scheduler_creation(self):\n        \"\"\"\u200b\u6d4b\u8bd5\u200b\u8c03\u5ea6\u200b\u5668\u200b\u521b\u5efa\u200b\u3002\"\"\"\n        scheduler = Scheduler()\n        assert scheduler is not None\n\n    @pytest.mark.asyncio\n    async def test_scheduler_start_stop(self):\n        \"\"\"\u200b\u6d4b\u8bd5\u200b\u8c03\u5ea6\u200b\u5668\u200b\u542f\u52a8\u200b\u548c\u200b\u505c\u6b62\u200b\u3002\"\"\"\n        scheduler = Scheduler()\n        # \u200b\u6d4b\u8bd5\u200b\u903b\u8f91\u200b\n</code></pre>"},{"location":"contributing/#_7","title":"\u6587\u6863\u200b\u7f16\u5199","text":""},{"location":"contributing/#_8","title":"\u672c\u5730\u200b\u9884\u89c8\u200b\u6587\u6863","text":"<pre><code># \u200b\u5b89\u88c5\u200b\u6587\u6863\u200b\u4f9d\u8d56\u200b\nuv pip install -e '.[docs]'\n\n# \u200b\u542f\u52a8\u200b\u6587\u6863\u200b\u670d\u52a1\u5668\u200b\nuv run mkdocs serve\n\n# \u200b\u6d4f\u89c8\u5668\u200b\u8bbf\u95ee\u200b http://127.0.0.1:8000\n</code></pre>"},{"location":"contributing/#_9","title":"\u6784\u5efa\u200b\u6587\u6863","text":"<pre><code>uv run mkdocs build\n</code></pre>"},{"location":"contributing/#_10","title":"\u6587\u6863\u200b\u7ed3\u6784","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md                 # \u200b\u6982\u89c8\u200b\u9875\u9762\u200b\n\u251c\u2500\u2500 quickstart.md            # \u200b\u5feb\u901f\u200b\u5f00\u59cb\u200b\n\u251c\u2500\u2500 guides/                  # \u200b\u4f7f\u7528\u6307\u5357\u200b\n\u2502   \u251c\u2500\u2500 logging.md\n\u2502   \u251c\u2500\u2500 monitoring.md\n\u2502   \u2514\u2500\u2500 backends.md\n\u251c\u2500\u2500 api/                     # API \u200b\u6587\u6863\u200b\n\u2502   \u251c\u2500\u2500 scheduler.md\n\u2502   \u251c\u2500\u2500 task.md\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 changelog.md             # \u200b\u66f4\u65b0\u200b\u65e5\u5fd7\u200b\n</code></pre>"},{"location":"contributing/#_11","title":"\u53d1\u5e03\u200b\u6d41\u7a0b\u200b\uff08\u200b\u7ef4\u62a4\u8005\u200b\uff09","text":""},{"location":"contributing/#1_1","title":"1. \u200b\u66f4\u65b0\u200b\u7248\u672c\u53f7","text":"<p>\u200b\u7f16\u8f91\u200b <code>pyproject.toml</code>:</p> <pre><code>[project]\nversion = \"0.2.0\"  # \u200b\u66f4\u65b0\u200b\u7248\u672c\u53f7\u200b\n</code></pre>"},{"location":"contributing/#2-changelog","title":"2. \u200b\u66f4\u65b0\u200b CHANGELOG","text":"<p>\u200b\u5728\u200b <code>CHANGELOG.md</code> \u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u65b0\u200b\u7248\u672c\u200b\u7684\u200b\u66f4\u65b0\u200b\u5185\u5bb9\u200b\u3002</p>"},{"location":"contributing/#3_2","title":"3. \u200b\u521b\u5efa\u200b\u6807\u7b7e","text":"<pre><code>git tag -a v0.2.0 -m \"Release version 0.2.0\"\ngit push origin v0.2.0\n</code></pre>"},{"location":"contributing/#4_2","title":"4. \u200b\u81ea\u52a8\u200b\u53d1\u5e03","text":"<p>\u200b\u63a8\u9001\u200b\u6807\u7b7e\u200b\u540e\u200b\uff0cGitHub Actions \u200b\u4f1a\u200b\u81ea\u52a8\u200b\uff1a - \u200b\u8fd0\u884c\u200b\u6240\u6709\u200b\u6d4b\u8bd5\u200b - \u200b\u6784\u5efa\u200b\u5206\u53d1\u200b\u5305\u200b - \u200b\u53d1\u5e03\u200b\u5230\u200b PyPI</p>"},{"location":"contributing/#5_1","title":"5. \u200b\u624b\u52a8\u200b\u53d1\u5e03\u200b\uff08\u200b\u53ef\u200b\u9009\u200b\uff09","text":"<pre><code># \u200b\u6784\u5efa\u200b\u5206\u53d1\u200b\u5305\u200b\nuv build\n\n# \u200b\u68c0\u67e5\u200b\u5206\u53d1\u200b\u5305\u200b\ntwine check dist/*\n\n# \u200b\u4e0a\u200b\u4f20\u5230\u200b PyPI\ntwine upload dist/*\n</code></pre>"},{"location":"contributing/#_12","title":"\u62a5\u544a\u200b\u95ee\u9898","text":""},{"location":"contributing/#bug","title":"Bug \u200b\u62a5\u544a","text":"<p>\u200b\u521b\u5efa\u200b Issue \u200b\u65f6\u8bf7\u200b\u5305\u542b\u200b\uff1a</p> <ol> <li>\u200b\u95ee\u9898\u200b\u63cf\u8ff0\u200b - \u200b\u6e05\u6670\u200b\u7b80\u6d01\u200b\u5730\u200b\u63cf\u8ff0\u200b\u95ee\u9898\u200b</li> <li>\u200b\u590d\u73b0\u200b\u6b65\u9aa4\u200b - \u200b\u8be6\u7ec6\u200b\u7684\u200b\u590d\u73b0\u200b\u6b65\u9aa4\u200b</li> <li>\u200b\u671f\u671b\u200b\u884c\u4e3a\u200b - \u200b\u4f60\u200b\u671f\u671b\u200b\u53d1\u751f\u200b\u4ec0\u4e48\u200b</li> <li>\u200b\u5b9e\u9645\u200b\u884c\u4e3a\u200b - \u200b\u5b9e\u9645\u200b\u53d1\u751f\u200b\u4e86\u200b\u4ec0\u4e48\u200b</li> <li>\u200b\u73af\u5883\u200b\u4fe1\u606f\u200b:</li> <li>Python \u200b\u7248\u672c\u200b</li> <li>chronflow \u200b\u7248\u672c\u200b</li> <li>\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b</li> <li>\u200b\u76f8\u5173\u200b\u65e5\u5fd7\u200b - \u200b\u9519\u8bef\u4fe1\u606f\u200b\u3001\u200b\u5806\u6808\u200b\u8ddf\u8e2a\u200b\u7b49\u200b</li> </ol>"},{"location":"contributing/#_13","title":"\u529f\u80fd\u200b\u8bf7\u6c42","text":"<p>\u200b\u521b\u5efa\u200b Issue \u200b\u65f6\u8bf7\u200b\u8bf4\u660e\u200b\uff1a</p> <ol> <li>\u200b\u529f\u80fd\u200b\u63cf\u8ff0\u200b - \u200b\u4f60\u200b\u5e0c\u671b\u200b\u6dfb\u52a0\u200b\u4ec0\u4e48\u200b\u529f\u80fd\u200b</li> <li>\u200b\u4f7f\u7528\u200b\u573a\u666f\u200b - \u200b\u4e3a\u4ec0\u4e48\u200b\u9700\u8981\u200b\u8fd9\u4e2a\u200b\u529f\u80fd\u200b</li> <li>\u200b\u5efa\u8bae\u200b\u5b9e\u73b0\u200b - \u200b\u4f60\u200b\u5bf9\u200b\u5b9e\u73b0\u200b\u65b9\u5f0f\u200b\u7684\u200b\u60f3\u6cd5\u200b\uff08\u200b\u53ef\u200b\u9009\u200b\uff09</li> </ol>"},{"location":"contributing/#_14","title":"\u884c\u4e3a\u51c6\u5219","text":"<ul> <li>\u200b\u5c0a\u91cd\u200b\u6240\u6709\u200b\u8d21\u732e\u8005\u200b</li> <li>\u200b\u4fdd\u6301\u200b\u53cb\u597d\u200b\u548c\u200b\u5efa\u8bbe\u6027\u200b\u7684\u200b\u8ba8\u8bba\u200b</li> <li>\u200b\u6b22\u8fce\u200b\u65b0\u624b\u200b\u63d0\u95ee\u200b</li> <li>\u200b\u53ca\u65f6\u200b\u56de\u5e94\u200b PR \u200b\u548c\u200b Issue</li> </ul>"},{"location":"contributing/#_15","title":"\u83b7\u5f97\u200b\u5e2e\u52a9","text":"<p>\u200b\u5982\u679c\u200b\u4f60\u200b\u6709\u200b\u4efb\u4f55\u200b\u95ee\u9898\u200b\uff1a</p> <ol> <li>\u200b\u67e5\u770b\u200b \u200b\u6587\u6863\u200b</li> <li>\u200b\u641c\u7d22\u200b\u73b0\u6709\u200b\u7684\u200b Issues</li> <li>\u200b\u521b\u5efa\u200b\u65b0\u200b\u7684\u200b Issue \u200b\u63d0\u95ee\u200b</li> </ol>"},{"location":"contributing/#_16","title":"\u81f4\u8c22","text":"<p>\u200b\u611f\u8c22\u200b\u6240\u6709\u200b\u4e3a\u200b chronflow \u200b\u505a\u51fa\u200b\u8d21\u732e\u200b\u7684\u200b\u5f00\u53d1\u8005\u200b\uff01\u200b\u4f60\u4eec\u200b\u7684\u200b\u8d21\u732e\u200b\u8ba9\u200b\u8fd9\u4e2a\u200b\u9879\u76ee\u200b\u53d8\u5f97\u200b\u66f4\u597d\u200b\u3002</p> <p>\u200b\u518d\u6b21\u200b\u611f\u8c22\u200b\u4f60\u200b\u7684\u200b\u8d21\u732e\u200b\uff01\ud83c\udf89</p>"},{"location":"quickstart/","title":"chronflow \u200b\u5feb\u901f\u200b\u5f00\u59cb\u200b\u6307\u5357","text":""},{"location":"quickstart/#5","title":"5 \u200b\u5206\u949f\u200b\u4e0a\u200b\u624b","text":""},{"location":"quickstart/#1","title":"1. \u200b\u5b89\u88c5","text":"<p>\u200b\u4f7f\u7528\u200b uv (\u200b\u63a8\u8350\u200b): <pre><code>uv pip install chronflow\n</code></pre></p> <p>\u200b\u4f7f\u7528\u200b pip: <pre><code>pip install chronflow\n</code></pre></p>"},{"location":"quickstart/#2","title":"2. \u200b\u7b2c\u4e00\u4e2a\u200b\u5b9a\u65f6\u200b\u4efb\u52a1","text":"<p>\u200b\u521b\u5efa\u200b <code>app.py</code>:</p> <pre><code>import asyncio\nfrom chronflow import Scheduler, interval\n\n# \u200b\u521b\u5efa\u200b\u8c03\u5ea6\u200b\u5668\u200b\nscheduler = Scheduler()\n\n# \u200b\u5b9a\u4e49\u200b\u4efb\u52a1\u200b - \u200b\u6bcf\u200b 5 \u200b\u79d2\u200b\u6267\u884c\u200b\u4e00\u6b21\u200b\n@interval(5)\nasync def hello_task():\n    print(\"Hello, chronflow!\")\n\n# \u200b\u8fd0\u884c\u200b\u8c03\u5ea6\u200b\u5668\u200b\nasync def main():\n    await scheduler.start()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>\u200b\u8fd0\u884c\u200b: <pre><code>python app.py\n</code></pre></p>"},{"location":"quickstart/#3-cron","title":"3. \u200b\u4f7f\u7528\u200b Cron \u200b\u8868\u8fbe\u5f0f","text":"<pre><code>from chronflow import cron\n\n# \u200b\u6bcf\u5929\u200b\u4e0a\u5348\u200b 9 \u200b\u70b9\u200b\u6267\u884c\u200b\n@cron(\"0 0 9 * * *\")\nasync def daily_report():\n    print(\"\u200b\u751f\u6210\u200b\u6bcf\u65e5\u200b\u62a5\u8868\u200b...\")\n    # \u200b\u4f60\u200b\u7684\u200b\u4e1a\u52a1\u200b\u903b\u8f91\u200b\n\n# \u200b\u6bcf\u200b 5 \u200b\u79d2\u200b\u6267\u884c\u200b\n@cron(\"*/5 * * * * *\")\nasync def health_check():\n    print(\"\u200b\u5065\u5eb7\u68c0\u67e5\u200b...\")\n</code></pre>"},{"location":"quickstart/#4","title":"4. \u200b\u6dfb\u52a0\u200b\u91cd\u8bd5\u200b\u673a\u5236","text":"<pre><code>from chronflow import interval, RetryPolicy\n\n@interval(\n    30,\n    retry_policy=RetryPolicy(\n        max_attempts=5,\n        strategy=\"exponential\",\n        wait_min=1.0,\n        wait_max=60.0,\n    )\n)\nasync def important_task():\n    # \u200b\u8fd9\u4e2a\u200b\u4efb\u52a1\u200b\u5931\u8d25\u200b\u540e\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u91cd\u8bd5\u200b\u6700\u200b\u591a\u200b 5 \u200b\u6b21\u200b\n    await do_something_critical()\n</code></pre>"},{"location":"quickstart/#5_1","title":"5. \u200b\u4f7f\u7528\u200b\u6301\u4e45\u200b\u5316\u200b\u961f\u5217","text":"<pre><code>from chronflow import Scheduler\nfrom chronflow.backends import SQLiteBackend\n\n# \u200b\u4f7f\u7528\u200b SQLite \u200b\u6301\u4e45\u200b\u5316\u200b\nbackend = SQLiteBackend(db_path=\"tasks.db\")\nscheduler = Scheduler(backend=backend)\n\n# \u200b\u4efb\u52a1\u200b\u4f1a\u200b\u4fdd\u5b58\u200b\u5230\u200b\u6570\u636e\u5e93\u200b,\u200b\u91cd\u542f\u200b\u540e\u200b\u4e0d\u4f1a\u200b\u4e22\u5931\u200b\n@interval(60)\nasync def persistent_task():\n    print(\"\u200b\u8fd9\u4e2a\u200b\u4efb\u52a1\u200b\u4f1a\u200b\u88ab\u200b\u6301\u4e45\u200b\u5316\u200b!\")\n</code></pre>"},{"location":"quickstart/#6-redis","title":"6. \u200b\u5206\u5e03\u5f0f\u200b\u90e8\u7f72\u200b (Redis)","text":"<pre><code># \u200b\u5b89\u88c5\u200b Redis \u200b\u652f\u6301\u200b\nuv pip install chronflow[redis]\n</code></pre> <pre><code>from chronflow import Scheduler, SchedulerConfig\nfrom chronflow.backends import RedisBackend\n\n# \u200b\u914d\u7f6e\u200b Redis \u200b\u540e\u200b\u7aef\u200b\nbackend = RedisBackend(url=\"redis://localhost:6379/0\")\nconfig = SchedulerConfig(max_workers=20)\n\nscheduler = Scheduler(config=config, backend=backend)\n\n# \u200b\u591a\u4e2a\u200b\u5b9e\u4f8b\u200b\u5171\u4eab\u200b\u540c\u4e00\u4e2a\u200b Redis \u200b\u961f\u5217\u200b\n@interval(10)\nasync def distributed_task():\n    print(\"\u200b\u5206\u5e03\u5f0f\u200b\u4efb\u52a1\u200b\u6267\u884c\u200b\u4e2d\u200b...\")\n</code></pre>"},{"location":"quickstart/#_1","title":"\u5e38\u7528\u200b\u573a\u666f","text":""},{"location":"quickstart/#_2","title":"\u6570\u636e\u200b\u540c\u6b65","text":"<pre><code>@interval(300)  # \u200b\u6bcf\u200b 5 \u200b\u5206\u949f\u200b\nasync def sync_data():\n    \"\"\"\u200b\u4ece\u200b API \u200b\u540c\u6b65\u200b\u6570\u636e\u200b\"\"\"\n    data = await fetch_from_api()\n    await save_to_database(data)\n</code></pre>"},{"location":"quickstart/#_3","title":"\u5b9a\u65f6\u200b\u6e05\u7406","text":"<pre><code>@cron(\"0 0 2 * * *\")  # \u200b\u6bcf\u5929\u200b\u51cc\u6668\u200b 2 \u200b\u70b9\u200b\nasync def cleanup():\n    \"\"\"\u200b\u6e05\u7406\u200b\u8fc7\u671f\u6570\u636e\u200b\"\"\"\n    await delete_old_records()\n</code></pre>"},{"location":"quickstart/#_4","title":"\u5065\u5eb7\u200b\u76d1\u63a7","text":"<pre><code>@interval(30)\nasync def monitor_services():\n    \"\"\"\u200b\u76d1\u63a7\u200b\u670d\u52a1\u200b\u5065\u5eb7\u200b\u72b6\u6001\u200b\"\"\"\n    for service in services:\n        if not await service.is_healthy():\n            await send_alert(f\"{service.name} \u200b\u5f02\u5e38\u200b!\")\n</code></pre>"},{"location":"quickstart/#_5","title":"\u62a5\u8868\u200b\u751f\u6210","text":"<pre><code>@cron(\"0 0 18 * * 1-5\")  # \u200b\u5de5\u4f5c\u65e5\u200b\u4e0b\u5348\u200b 6 \u200b\u70b9\u200b\nasync def daily_report():\n    \"\"\"\u200b\u751f\u6210\u200b\u6bcf\u65e5\u200b\u62a5\u8868\u200b\"\"\"\n    report = await generate_report()\n    await send_email(report)\n</code></pre>"},{"location":"quickstart/#_6","title":"\u914d\u7f6e\u6587\u4ef6\u200b\u65b9\u5f0f","text":"<p>\u200b\u521b\u5efa\u200b <code>config.toml</code>:</p> <pre><code>max_workers = 20\nqueue_size = 5000\nlog_level = \"INFO\"\ntimezone = \"Asia/Shanghai\"\n</code></pre> <p>\u200b\u4f7f\u7528\u200b\u914d\u7f6e\u200b:</p> <pre><code>from chronflow import Scheduler, SchedulerConfig\n\nconfig = SchedulerConfig.from_file(\"config.toml\")\nscheduler = Scheduler(config=config)\n</code></pre>"},{"location":"quickstart/#_7","title":"\u76d1\u63a7\u200b\u548c\u200b\u8c03\u8bd5","text":"<pre><code># \u200b\u83b7\u53d6\u200b\u8c03\u5ea6\u200b\u5668\u200b\u72b6\u6001\u200b\nstats = await scheduler.get_stats()\nprint(f\"\u200b\u8fd0\u884c\u200b\u4e2d\u200b: {stats['running']}\")\nprint(f\"\u200b\u4efb\u52a1\u200b\u6570\u200b: {stats['total_tasks']}\")\nprint(f\"\u200b\u961f\u5217\u200b\u5927\u5c0f\u200b: {stats['queue_size']}\")\n\n# \u200b\u83b7\u53d6\u200b\u4efb\u52a1\u200b\u6307\u6807\u200b\ntask = scheduler.get_task(\"my_task\")\nprint(f\"\u200b\u603b\u200b\u8fd0\u884c\u200b\u6b21\u6570\u200b: {task.metrics.total_runs}\")\nprint(f\"\u200b\u6210\u529f\u7387\u200b: {task.metrics.successful_runs / task.metrics.total_runs * 100}%\")\n</code></pre>"},{"location":"quickstart/#_8","title":"\u4e0b\u200b\u4e00\u6b65","text":"<ul> <li>\u200b\u67e5\u770b\u200b README.md \u200b\u4e86\u89e3\u200b\u5b8c\u6574\u200b\u529f\u80fd\u200b</li> <li>\u200b\u67e5\u770b\u200b examples/ \u200b\u76ee\u5f55\u200b\u7684\u200b\u793a\u4f8b\u200b\u4ee3\u7801\u200b</li> <li>\u200b\u9605\u8bfb\u200b CONTRIBUTING.md \u200b\u4e86\u89e3\u200b\u5982\u4f55\u200b\u8d21\u732e\u200b\u4ee3\u7801\u200b</li> </ul>"},{"location":"quickstart/#_9","title":"\u5e38\u89c1\u95ee\u9898","text":"<p>Q: \u200b\u5982\u4f55\u200b\u4f18\u96c5\u200b\u5730\u200b\u5173\u95ed\u200b\u8c03\u5ea6\u200b\u5668\u200b?</p> <p>A: \u200b\u4f7f\u7528\u200b <code>Ctrl+C</code> \u200b\u6216\u200b\u8c03\u7528\u200b <code>await scheduler.stop()</code>,\u200b\u8c03\u5ea6\u200b\u5668\u4f1a\u200b\u7b49\u5f85\u200b\u6240\u6709\u200b\u8fd0\u884c\u200b\u4e2d\u200b\u7684\u200b\u4efb\u52a1\u200b\u5b8c\u6210\u200b\u3002</p> <p>Q: \u200b\u4efb\u52a1\u200b\u6267\u884c\u200b\u5931\u8d25\u200b\u600e\u4e48\u529e\u200b?</p> <p>A: \u200b\u914d\u7f6e\u200b\u91cd\u8bd5\u200b\u7b56\u7565\u200b,\u200b\u5931\u8d25\u200b\u7684\u200b\u4efb\u52a1\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u91cd\u8bd5\u200b\u3002\u200b\u67e5\u770b\u200b\u4efb\u52a1\u200b\u6307\u6807\u200b\u4e86\u89e3\u200b\u5931\u8d25\u200b\u539f\u56e0\u200b\u3002</p> <p>Q: \u200b\u652f\u6301\u200b\u5206\u5e03\u5f0f\u200b\u90e8\u7f72\u200b\u5417\u200b?</p> <p>A: \u200b\u652f\u6301\u200b!\u200b\u4f7f\u7528\u200b Redis \u200b\u6216\u200b RabbitMQ \u200b\u540e\u200b\u7aef\u200b\u5373\u53ef\u200b\u5b9e\u73b0\u200b\u591a\u200b\u5b9e\u4f8b\u200b\u90e8\u7f72\u200b\u3002</p> <p>Q: \u200b\u6027\u80fd\u200b\u5982\u4f55\u200b?</p> <p>A: \u200b\u57fa\u4e8e\u200b\u539f\u751f\u200b asyncio,\u200b\u4f4e\u200b\u5ef6\u8fdf\u200b\u9ad8\u200b\u541e\u5410\u200b\u3002\u200b\u5185\u5b58\u200b\u540e\u7aef\u200b\u53ef\u200b\u652f\u6301\u200b 10000+ \u200b\u4efb\u52a1\u200b/\u200b\u79d2\u200b\u3002</p>"},{"location":"api/backends/","title":"Backends API","text":"<p>chronflow \u200b\u63d0\u4f9b\u200b\u591a\u79cd\u200b\u961f\u5217\u200b\u540e\u200b\u7aef\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u652f\u6301\u200b\u4e0d\u540c\u200b\u7684\u200b\u4f7f\u7528\u200b\u573a\u666f\u200b\u3002</p>"},{"location":"api/backends/#queuebackend","title":"QueueBackend (\u200b\u62bd\u8c61\u200b\u57fa\u7c7b\u200b)","text":""},{"location":"api/backends/#chronflow.backends.base.QueueBackend","title":"<code>QueueBackend</code>","text":"<p>               Bases: <code>ABC</code></p> <p>\u200b\u961f\u5217\u200b\u540e\u200b\u7aef\u7684\u200b\u62bd\u8c61\u200b\u57fa\u7c7b\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.base.QueueBackend.connect","title":"<code>connect()</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u200b\u5efa\u7acb\u200b\u4e0e\u200b\u540e\u200b\u7aef\u7684\u200b\u8fde\u63a5\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.base.QueueBackend.disconnect","title":"<code>disconnect()</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u200b\u5173\u95ed\u200b\u4e0e\u200b\u540e\u200b\u7aef\u7684\u200b\u8fde\u63a5\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.base.QueueBackend.enqueue","title":"<code>enqueue(task_id, task_name, scheduled_time, payload, priority=0)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u200b\u5c06\u200b\u4efb\u52a1\u200b\u52a0\u5165\u200b\u961f\u5217\u200b\u3002</p> <p>\u200b\u53c2\u6570\u200b\uff1a</p> \u200b\u540d\u79f0\u200b \u200b\u7c7b\u578b\u200b \u200b\u63cf\u8ff0\u200b \u200b\u9ed8\u8ba4\u200b <code>task_id</code> <code>str</code> <p>\u200b\u4efb\u52a1\u200b\u7684\u200b\u552f\u4e00\u200b\u6807\u8bc6\u200b</p> \u200b\u5fc5\u9700\u200b <code>task_name</code> <code>str</code> <p>\u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b</p> \u200b\u5fc5\u9700\u200b <code>scheduled_time</code> <code>datetime</code> <p>\u200b\u4efb\u52a1\u200b\u8ba1\u5212\u200b\u6267\u884c\u200b\u65f6\u95f4\u200b</p> \u200b\u5fc5\u9700\u200b <code>payload</code> <code>dict[str, Any]</code> <p>\u200b\u4efb\u52a1\u200b\u6570\u636e\u200b\u548c\u200b\u53c2\u6570\u200b</p> \u200b\u5fc5\u9700\u200b <code>priority</code> <code>int</code> <p>\u200b\u4efb\u52a1\u200b\u4f18\u5148\u7ea7\u200b(\u200b\u6570\u503c\u200b\u8d8a\u5927\u8d8a\u200b\u4f18\u5148\u200b)</p> <code>0</code>"},{"location":"api/backends/#chronflow.backends.base.QueueBackend.dequeue","title":"<code>dequeue(limit=1)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u200b\u4ece\u200b\u961f\u5217\u200b\u4e2d\u200b\u83b7\u53d6\u200b\u5c31\u7eea\u200b\u4efb\u52a1\u200b\u3002</p> <p>\u200b\u53c2\u6570\u200b\uff1a</p> \u200b\u540d\u79f0\u200b \u200b\u7c7b\u578b\u200b \u200b\u63cf\u8ff0\u200b \u200b\u9ed8\u8ba4\u200b <code>limit</code> <code>int</code> <p>\u200b\u6700\u200b\u591a\u200b\u83b7\u53d6\u200b\u7684\u200b\u4efb\u52a1\u200b\u6570\u91cf\u200b</p> <code>1</code> <p>\u200b\u8fd4\u56de\u200b\uff1a</p> \u200b\u7c7b\u578b\u200b \u200b\u63cf\u8ff0\u200b <code>list[dict[str, Any]]</code> <p>\u200b\u5df2\u200b\u51c6\u5907\u200b\u6267\u884c\u200b\u7684\u200b\u4efb\u52a1\u200b\u8d1f\u8f7d\u200b\u5217\u8868\u200b</p>"},{"location":"api/backends/#chronflow.backends.base.QueueBackend.acknowledge","title":"<code>acknowledge(task_id)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u200b\u6807\u8bb0\u200b\u4efb\u52a1\u200b\u6210\u529f\u200b\u5b8c\u6210\u200b\u3002</p> <p>\u200b\u53c2\u6570\u200b\uff1a</p> \u200b\u540d\u79f0\u200b \u200b\u7c7b\u578b\u200b \u200b\u63cf\u8ff0\u200b \u200b\u9ed8\u8ba4\u200b <code>task_id</code> <code>str</code> <p>\u200b\u5df2\u200b\u5b8c\u6210\u200b\u4efb\u52a1\u200b\u7684\u200b\u6807\u8bc6\u200b</p> \u200b\u5fc5\u9700"},{"location":"api/backends/#chronflow.backends.base.QueueBackend.reject","title":"<code>reject(task_id, requeue=False)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u200b\u6807\u8bb0\u200b\u4efb\u52a1\u200b\u6267\u884c\u200b\u5931\u8d25\u200b\u3002</p> <p>\u200b\u53c2\u6570\u200b\uff1a</p> \u200b\u540d\u79f0\u200b \u200b\u7c7b\u578b\u200b \u200b\u63cf\u8ff0\u200b \u200b\u9ed8\u8ba4\u200b <code>task_id</code> <code>str</code> <p>\u200b\u5931\u8d25\u200b\u4efb\u52a1\u200b\u7684\u200b\u6807\u8bc6\u200b</p> \u200b\u5fc5\u9700\u200b <code>requeue</code> <code>bool</code> <p>\u200b\u662f\u5426\u200b\u5c06\u200b\u4efb\u52a1\u200b\u91cd\u65b0\u200b\u5165\u961f\u200b</p> <code>False</code>"},{"location":"api/backends/#chronflow.backends.base.QueueBackend.get_queue_size","title":"<code>get_queue_size()</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u200b\u83b7\u53d6\u200b\u961f\u5217\u200b\u4e2d\u200b\u7684\u200b\u5f85\u5904\u7406\u200b\u4efb\u52a1\u200b\u6570\u91cf\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.base.QueueBackend.clear","title":"<code>clear()</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u200b\u6e05\u7a7a\u200b\u961f\u5217\u200b\u4e2d\u200b\u7684\u200b\u6240\u6709\u200b\u4efb\u52a1\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.base.QueueBackend.health_check","title":"<code>health_check()</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>\u200b\u68c0\u67e5\u200b\u540e\u200b\u7aef\u200b\u662f\u5426\u200b\u5065\u5eb7\u200b\u4e14\u200b\u53ef\u200b\u8bbf\u95ee\u200b\u3002</p>"},{"location":"api/backends/#memorybackend","title":"MemoryBackend","text":""},{"location":"api/backends/#chronflow.backends.memory.MemoryBackend","title":"<code>MemoryBackend(max_size=10000)</code>","text":"<p>               Bases: <code>QueueBackend</code></p> <p>\u200b\u57fa\u4e8e\u200b heapq \u200b\u7684\u200b\u5185\u5b58\u200b\u4f18\u5148\u200b\u961f\u5217\u200b\u5b9e\u73b0\u200b\u3002</p> <p>\u200b\u7279\u70b9\u200b: - \u200b\u9ed8\u8ba4\u200b\u540e\u200b\u7aef\u200b,\u200b\u65e0\u9700\u200b\u4efb\u4f55\u200b\u5916\u90e8\u200b\u4f9d\u8d56\u200b - \u200b\u9002\u7528\u200b\u4e8e\u5355\u200b\u8fdb\u7a0b\u200b\u5e94\u7528\u200b\u548c\u200b\u6d4b\u8bd5\u200b\u573a\u666f\u200b</p> <p>\u200b\u521d\u59cb\u5316\u200b\u5185\u5b58\u200b\u540e\u200b\u7aef\u200b\u3002</p> <p>\u200b\u53c2\u6570\u200b\uff1a</p> \u200b\u540d\u79f0\u200b \u200b\u7c7b\u578b\u200b \u200b\u63cf\u8ff0\u200b \u200b\u9ed8\u8ba4\u200b <code>max_size</code> <code>int</code> <p>\u200b\u961f\u5217\u200b\u5141\u8bb8\u200b\u7684\u200b\u6700\u5927\u200b\u4efb\u52a1\u200b\u6570\u91cf\u200b</p> <code>10000</code>"},{"location":"api/backends/#chronflow.backends.memory.MemoryBackend.connect","title":"<code>connect()</code>  <code>async</code>","text":"<p>\u200b\u5185\u5b58\u200b\u540e\u200b\u7aef\u200b\u65e0\u9700\u200b\u5efa\u7acb\u200b\u8fde\u63a5\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.memory.MemoryBackend.disconnect","title":"<code>disconnect()</code>  <code>async</code>","text":"<p>\u200b\u5185\u5b58\u200b\u540e\u200b\u7aef\u200b\u65e0\u9700\u200b\u663e\u5f0f\u200b\u65ad\u5f00\u8fde\u63a5\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.memory.MemoryBackend.enqueue","title":"<code>enqueue(task_id, task_name, scheduled_time, payload, priority=0)</code>  <code>async</code>","text":"<p>\u200b\u5c06\u200b\u4efb\u52a1\u200b\u52a0\u5165\u200b\u4f18\u5148\u200b\u961f\u5217\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.memory.MemoryBackend.dequeue","title":"<code>dequeue(limit=1)</code>  <code>async</code>","text":"<p>\u200b\u4ece\u200b\u961f\u5217\u200b\u4e2d\u200b\u83b7\u53d6\u200b\u5df2\u200b\u5c31\u7eea\u200b\u7684\u200b\u4efb\u52a1\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.memory.MemoryBackend.acknowledge","title":"<code>acknowledge(task_id)</code>  <code>async</code>","text":"<p>\u200b\u5c06\u200b\u4efb\u52a1\u200b\u4ece\u200b\u5f85\u5904\u7406\u200b\u96c6\u5408\u200b\u4e2d\u200b\u79fb\u9664\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.memory.MemoryBackend.reject","title":"<code>reject(task_id, requeue=False)</code>  <code>async</code>","text":"<p>\u200b\u5904\u7406\u200b\u5931\u8d25\u200b\u4efb\u52a1\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.memory.MemoryBackend.get_queue_size","title":"<code>get_queue_size()</code>  <code>async</code>","text":"<p>\u200b\u83b7\u53d6\u200b\u961f\u5217\u200b\u4e2d\u200b\u7684\u200b\u4efb\u52a1\u200b\u603b\u6570\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.memory.MemoryBackend.clear","title":"<code>clear()</code>  <code>async</code>","text":"<p>\u200b\u6e05\u9664\u200b\u6240\u6709\u200b\u4efb\u52a1\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.memory.MemoryBackend.health_check","title":"<code>health_check()</code>  <code>async</code>","text":"<p>\u200b\u5185\u5b58\u200b\u540e\u200b\u7aef\u200b\u59cb\u7ec8\u200b\u5904\u4e8e\u200b\u5065\u5eb7\u200b\u72b6\u6001\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.memory.MemoryBackend.__repr__","title":"<code>__repr__()</code>","text":"<p>\u200b\u8fd4\u56de\u200b\u53ef\u8bfb\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"api/backends/#sqlitebackend","title":"SQLiteBackend","text":""},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend","title":"<code>SQLiteBackend(db_path='chronflow.db', table_name='task_queue')</code>","text":"<p>               Bases: <code>QueueBackend</code></p> <p>\u200b\u57fa\u4e8e\u200b SQLite \u200b\u7684\u200b\u672c\u5730\u200b\u6301\u4e45\u200b\u5316\u200b\u961f\u5217\u200b\u5b9e\u73b0\u200b\u3002</p> <p>\u200b\u7279\u6027\u200b: - \u200b\u672c\u5730\u200b\u6587\u4ef6\u200b\u6301\u4e45\u200b\u5316\u200b,\u200b\u65e0\u9700\u200b\u5916\u90e8\u200b\u670d\u52a1\u200b - \u200b\u652f\u6301\u200b\u4efb\u52a1\u200b\u4f18\u5148\u7ea7\u200b\u548c\u200b\u8c03\u5ea6\u200b\u65f6\u95f4\u200b - \u200b\u9002\u5408\u200b\u5355\u673a\u200b\u90e8\u7f72\u200b\u573a\u666f\u200b - \u200b\u8f7b\u91cf\u7ea7\u200b,\u200b\u96f6\u200b\u914d\u7f6e\u200b</p> <p>\u200b\u9002\u7528\u200b\u573a\u666f\u200b: - \u200b\u5f00\u53d1\u200b\u73af\u5883\u200b\u548c\u200b\u6d4b\u8bd5\u200b - \u200b\u5355\u673a\u200b\u5e94\u7528\u200b - \u200b\u9700\u8981\u200b\u6301\u4e45\u200b\u5316\u200b\u4f46\u200b\u4e0d\u200b\u9700\u8981\u200b\u5206\u5e03\u5f0f\u200b\u7684\u200b\u573a\u666f\u200b</p> <p>\u200b\u521d\u59cb\u5316\u200b SQLite \u200b\u540e\u200b\u7aef\u200b\u3002</p> <p>\u200b\u53c2\u6570\u200b\uff1a</p> \u200b\u540d\u79f0\u200b \u200b\u7c7b\u578b\u200b \u200b\u63cf\u8ff0\u200b \u200b\u9ed8\u8ba4\u200b <code>db_path</code> <code>str | Path</code> <p>\u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b</p> <code>'chronflow.db'</code> <code>table_name</code> <code>str</code> <p>\u200b\u4efb\u52a1\u200b\u961f\u200b\u5217\u8868\u200b\u540d\u200b</p> <code>'task_queue'</code>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.connect","title":"<code>connect()</code>  <code>async</code>","text":"<p>\u200b\u8fde\u63a5\u200b\u5230\u200b SQLite \u200b\u6570\u636e\u5e93\u200b\u5e76\u200b\u521b\u5efa\u200b\u8868\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.disconnect","title":"<code>disconnect()</code>  <code>async</code>","text":"<p>\u200b\u5173\u95ed\u200b\u6570\u636e\u5e93\u200b\u8fde\u63a5\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.enqueue","title":"<code>enqueue(task_id, task_name, scheduled_time, payload, priority=0)</code>  <code>async</code>","text":"<p>\u200b\u5c06\u200b\u4efb\u52a1\u200b\u6dfb\u52a0\u200b\u5230\u200b\u961f\u5217\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.dequeue","title":"<code>dequeue(limit=1)</code>  <code>async</code>","text":"<p>\u200b\u4ece\u200b\u961f\u5217\u200b\u83b7\u53d6\u200b\u5c31\u7eea\u200b\u7684\u200b\u4efb\u52a1\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.acknowledge","title":"<code>acknowledge(task_id)</code>  <code>async</code>","text":"<p>\u200b\u786e\u8ba4\u200b\u4efb\u52a1\u200b\u6210\u529f\u200b\u5b8c\u6210\u200b\u5e76\u200b\u4ece\u200b\u961f\u5217\u200b\u5220\u9664\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.reject","title":"<code>reject(task_id, requeue=False)</code>  <code>async</code>","text":"<p>\u200b\u62d2\u7edd\u200b\u4efb\u52a1\u200b(\u200b\u5931\u8d25\u200b\u5904\u7406\u200b)\u3002</p>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.get_queue_size","title":"<code>get_queue_size()</code>  <code>async</code>","text":"<p>\u200b\u83b7\u53d6\u200b\u961f\u5217\u200b\u4e2d\u200b\u7684\u200b\u4efb\u52a1\u200b\u6570\u91cf\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.clear","title":"<code>clear()</code>  <code>async</code>","text":"<p>\u200b\u6e05\u7a7a\u200b\u961f\u5217\u200b\u4e2d\u200b\u7684\u200b\u6240\u6709\u200b\u4efb\u52a1\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.health_check","title":"<code>health_check()</code>  <code>async</code>","text":"<p>\u200b\u68c0\u67e5\u200b\u6570\u636e\u5e93\u200b\u5065\u5eb7\u200b\u72b6\u6001\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.get_failed_tasks","title":"<code>get_failed_tasks(limit=100)</code>  <code>async</code>","text":"<p>\u200b\u83b7\u53d6\u200b\u5931\u8d25\u200b\u7684\u200b\u4efb\u52a1\u200b\u5217\u8868\u200b\u3002</p> <p>\u200b\u53c2\u6570\u200b\uff1a</p> \u200b\u540d\u79f0\u200b \u200b\u7c7b\u578b\u200b \u200b\u63cf\u8ff0\u200b \u200b\u9ed8\u8ba4\u200b <code>limit</code> <code>int</code> <p>\u200b\u8fd4\u56de\u200b\u7684\u200b\u6700\u5927\u200b\u4efb\u52a1\u200b\u6570\u200b</p> <code>100</code> <p>\u200b\u8fd4\u56de\u200b\uff1a</p> \u200b\u7c7b\u578b\u200b \u200b\u63cf\u8ff0\u200b <code>list[dict[str, Any]]</code> <p>\u200b\u5931\u8d25\u200b\u4efb\u52a1\u200b\u5217\u8868\u200b</p>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.cleanup_old_tasks","title":"<code>cleanup_old_tasks(days=7)</code>  <code>async</code>","text":"<p>\u200b\u6e05\u7406\u200b\u65e7\u200b\u4efb\u52a1\u200b\u8bb0\u5f55\u200b\u3002</p> <p>\u200b\u53c2\u6570\u200b\uff1a</p> \u200b\u540d\u79f0\u200b \u200b\u7c7b\u578b\u200b \u200b\u63cf\u8ff0\u200b \u200b\u9ed8\u8ba4\u200b <code>days</code> <code>int</code> <p>\u200b\u4fdd\u7559\u200b\u6700\u8fd1\u200b\u591a\u5c11\u200b\u5929\u200b\u7684\u200b\u4efb\u52a1\u200b</p> <code>7</code> <p>\u200b\u8fd4\u56de\u200b\uff1a</p> \u200b\u7c7b\u578b\u200b \u200b\u63cf\u8ff0\u200b <code>int</code> <p>\u200b\u5220\u9664\u200b\u7684\u200b\u4efb\u52a1\u200b\u6570\u91cf\u200b</p>"},{"location":"api/backends/#chronflow.backends.sqlite_backend.SQLiteBackend.__repr__","title":"<code>__repr__()</code>","text":"<p>\u200b\u5b57\u7b26\u4e32\u200b\u8868\u793a\u200b\u3002</p>"},{"location":"api/backends/#redisbackend","title":"RedisBackend","text":""},{"location":"api/backends/#chronflow.backends.redis_backend.RedisBackend","title":"<code>RedisBackend(url='redis://localhost:6379/0', queue_name='chronflow:queue', pending_set='chronflow:pending', max_connections=10)</code>","text":"<p>               Bases: <code>QueueBackend</code></p> <p>\u200b\u9002\u7528\u200b\u4e8e\u200b\u5206\u5e03\u5f0f\u7cfb\u7edf\u200b\u7684\u200b Redis \u200b\u961f\u5217\u200b\u5b9e\u73b0\u200b\u3002</p> <p>\u200b\u7279\u6027\u200b: - \u200b\u5206\u5e03\u5f0f\u200b\u4efb\u52a1\u200b\u961f\u5217\u200b - \u200b\u91cd\u542f\u200b\u540e\u200b\u7684\u200b\u6301\u4e45\u200b\u5316\u200b\u80fd\u529b\u200b - \u200b\u501f\u52a9\u200b Redis \u200b\u7684\u200b\u9ad8\u6027\u80fd\u200b - \u200b\u652f\u6301\u200b\u591a\u200b\u5de5\u4f5c\u200b\u534f\u7a0b\u200b\u5e76\u53d1\u200b</p> <p>\u200b\u5b89\u88c5\u200b: pip install redis</p> <p>\u200b\u521d\u59cb\u5316\u200b Redis \u200b\u540e\u200b\u7aef\u200b\u3002</p> <p>\u200b\u53c2\u6570\u200b\uff1a</p> \u200b\u540d\u79f0\u200b \u200b\u7c7b\u578b\u200b \u200b\u63cf\u8ff0\u200b \u200b\u9ed8\u8ba4\u200b <code>url</code> <code>str</code> <p>Redis \u200b\u8fde\u63a5\u200b URL</p> <code>'redis://localhost:6379/0'</code> <code>queue_name</code> <code>str</code> <p>Redis \u200b\u6709\u5e8f\u200b\u96c6\u5408\u200b\u7684\u200b\u961f\u5217\u200b\u540d\u79f0\u200b</p> <code>'chronflow:queue'</code> <code>pending_set</code> <code>str</code> <p>Redis \u200b\u96c6\u5408\u200b\u7528\u4e8e\u200b\u8bb0\u5f55\u200b\u5f85\u5904\u7406\u200b\u4efb\u52a1\u200b\u7684\u200b\u540d\u79f0\u200b</p> <code>'chronflow:pending'</code> <code>max_connections</code> <code>int</code> <p>\u200b\u6700\u5927\u200b Redis \u200b\u8fde\u63a5\u6570\u200b</p> <code>10</code>"},{"location":"api/backends/#chronflow.backends.redis_backend.RedisBackend.connect","title":"<code>connect()</code>  <code>async</code>","text":"<p>\u200b\u8fde\u63a5\u200b\u5230\u200b Redis\u3002</p>"},{"location":"api/backends/#chronflow.backends.redis_backend.RedisBackend.disconnect","title":"<code>disconnect()</code>  <code>async</code>","text":"<p>\u200b\u65ad\u5f00\u200b\u4e0e\u200b Redis \u200b\u7684\u200b\u8fde\u63a5\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.redis_backend.RedisBackend.enqueue","title":"<code>enqueue(task_id, task_name, scheduled_time, payload, priority=0)</code>  <code>async</code>","text":"<p>\u200b\u5c06\u200b\u4efb\u52a1\u200b\u52a0\u5165\u200b Redis \u200b\u6709\u5e8f\u200b\u96c6\u5408\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.redis_backend.RedisBackend.dequeue","title":"<code>dequeue(limit=1)</code>  <code>async</code>","text":"<p>\u200b\u4ece\u200b Redis \u200b\u83b7\u53d6\u200b\u5c31\u7eea\u200b\u4efb\u52a1\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.redis_backend.RedisBackend.acknowledge","title":"<code>acknowledge(task_id)</code>  <code>async</code>","text":"<p>\u200b\u4ece\u200b\u5f85\u5904\u7406\u200b\u96c6\u5408\u200b\u79fb\u9664\u200b\u4efb\u52a1\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.redis_backend.RedisBackend.reject","title":"<code>reject(task_id, requeue=False)</code>  <code>async</code>","text":"<p>\u200b\u5904\u7406\u200b\u5931\u8d25\u200b\u4efb\u52a1\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.redis_backend.RedisBackend.get_queue_size","title":"<code>get_queue_size()</code>  <code>async</code>","text":"<p>\u200b\u83b7\u53d6\u200b\u961f\u5217\u200b\u4e2d\u200b\u7684\u200b\u4efb\u52a1\u200b\u603b\u6570\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.redis_backend.RedisBackend.clear","title":"<code>clear()</code>  <code>async</code>","text":"<p>\u200b\u6e05\u7a7a\u200b\u6240\u6709\u200b\u4efb\u52a1\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.redis_backend.RedisBackend.health_check","title":"<code>health_check()</code>  <code>async</code>","text":"<p>\u200b\u68c0\u67e5\u200b Redis \u200b\u7684\u200b\u5065\u5eb7\u200b\u72b6\u6001\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.redis_backend.RedisBackend.__repr__","title":"<code>__repr__()</code>","text":"<p>\u200b\u5b57\u7b26\u4e32\u200b\u8868\u793a\u200b\u3002</p>"},{"location":"api/backends/#rabbitmqbackend","title":"RabbitMQBackend","text":""},{"location":"api/backends/#chronflow.backends.rabbitmq_backend.RabbitMQBackend","title":"<code>RabbitMQBackend(url='amqp://guest:guest@localhost:5672/', queue_name='chronflow_tasks', durable=True, prefetch_count=10)</code>","text":"<p>               Bases: <code>QueueBackend</code></p> <p>\u200b\u57fa\u4e8e\u200b RabbitMQ \u200b\u7684\u200b\u961f\u5217\u200b\u5b9e\u73b0\u200b,\u200b\u9002\u7528\u200b\u4e8e\u200b\u9ad8\u53ef\u9760\u6027\u200b\u5206\u5e03\u5f0f\u7cfb\u7edf\u200b\u3002</p> <p>\u200b\u7279\u6027\u200b: - \u200b\u6d88\u606f\u200b\u6301\u4e45\u200b\u5316\u200b,\u200b\u9632\u6b62\u200b\u6570\u636e\u200b\u4e22\u5931\u200b - \u200b\u652f\u6301\u200b\u591a\u4e2a\u200b\u6d88\u8d39\u8005\u200b\u5e76\u53d1\u200b\u5904\u7406\u200b - \u200b\u81ea\u52a8\u200b\u91cd\u8fde\u200b\u673a\u5236\u200b - \u200b\u5ef6\u8fdf\u200b\u6d88\u606f\u200b\u652f\u6301\u200b(\u200b\u9700\u8981\u200b rabbitmq_delayed_message_exchange \u200b\u63d2\u4ef6\u200b)</p> <p>\u200b\u5b89\u88c5\u200b: pip install aio-pika</p> <p>\u200b\u521d\u59cb\u5316\u200b RabbitMQ \u200b\u540e\u200b\u7aef\u200b\u3002</p> <p>\u200b\u53c2\u6570\u200b\uff1a</p> \u200b\u540d\u79f0\u200b \u200b\u7c7b\u578b\u200b \u200b\u63cf\u8ff0\u200b \u200b\u9ed8\u8ba4\u200b <code>url</code> <code>str</code> <p>RabbitMQ \u200b\u8fde\u63a5\u200b URL</p> <code>'amqp://guest:guest@localhost:5672/'</code> <code>queue_name</code> <code>str</code> <p>\u200b\u961f\u5217\u200b\u540d\u79f0\u200b</p> <code>'chronflow_tasks'</code> <code>durable</code> <code>bool</code> <p>\u200b\u662f\u5426\u200b\u6301\u4e45\u200b\u5316\u200b\u961f\u5217\u200b</p> <code>True</code> <code>prefetch_count</code> <code>int</code> <p>\u200b\u9884\u53d6\u200b\u6d88\u606f\u200b\u6570\u91cf\u200b</p> <code>10</code>"},{"location":"api/backends/#chronflow.backends.rabbitmq_backend.RabbitMQBackend.connect","title":"<code>connect()</code>  <code>async</code>","text":"<p>\u200b\u8fde\u63a5\u200b\u5230\u200b RabbitMQ\u3002</p>"},{"location":"api/backends/#chronflow.backends.rabbitmq_backend.RabbitMQBackend.disconnect","title":"<code>disconnect()</code>  <code>async</code>","text":"<p>\u200b\u65ad\u5f00\u200b RabbitMQ \u200b\u8fde\u63a5\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.rabbitmq_backend.RabbitMQBackend.enqueue","title":"<code>enqueue(task_id, task_name, scheduled_time, payload, priority=0)</code>  <code>async</code>","text":"<p>\u200b\u5c06\u200b\u4efb\u52a1\u200b\u6dfb\u52a0\u200b\u5230\u200b RabbitMQ \u200b\u961f\u5217\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.rabbitmq_backend.RabbitMQBackend.dequeue","title":"<code>dequeue(limit=1)</code>  <code>async</code>","text":"<p>\u200b\u4ece\u200b RabbitMQ \u200b\u83b7\u53d6\u200b\u5c31\u7eea\u200b\u7684\u200b\u4efb\u52a1\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.rabbitmq_backend.RabbitMQBackend.acknowledge","title":"<code>acknowledge(task_id)</code>  <code>async</code>","text":"<p>\u200b\u786e\u8ba4\u200b\u4efb\u52a1\u200b\u6210\u529f\u200b\u5b8c\u6210\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.rabbitmq_backend.RabbitMQBackend.reject","title":"<code>reject(task_id, requeue=False)</code>  <code>async</code>","text":"<p>\u200b\u62d2\u7edd\u200b\u4efb\u52a1\u200b(\u200b\u5931\u8d25\u200b\u5904\u7406\u200b)\u3002</p>"},{"location":"api/backends/#chronflow.backends.rabbitmq_backend.RabbitMQBackend.get_queue_size","title":"<code>get_queue_size()</code>  <code>async</code>","text":"<p>\u200b\u83b7\u53d6\u200b\u961f\u5217\u200b\u4e2d\u200b\u7684\u200b\u4efb\u52a1\u200b\u6570\u91cf\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.rabbitmq_backend.RabbitMQBackend.clear","title":"<code>clear()</code>  <code>async</code>","text":"<p>\u200b\u6e05\u7a7a\u200b\u961f\u5217\u200b\u4e2d\u200b\u7684\u200b\u6240\u6709\u200b\u4efb\u52a1\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.rabbitmq_backend.RabbitMQBackend.health_check","title":"<code>health_check()</code>  <code>async</code>","text":"<p>\u200b\u68c0\u67e5\u200b RabbitMQ \u200b\u5065\u5eb7\u200b\u72b6\u6001\u200b\u3002</p>"},{"location":"api/backends/#chronflow.backends.rabbitmq_backend.RabbitMQBackend.__repr__","title":"<code>__repr__()</code>","text":"<p>\u200b\u5b57\u7b26\u4e32\u200b\u8868\u793a\u200b\u3002</p>"},{"location":"api/config/","title":"Config API","text":""},{"location":"api/config/#schedulerconfig","title":"SchedulerConfig","text":""},{"location":"api/config/#chronflow.config.SchedulerConfig","title":"<code>SchedulerConfig</code>","text":"<p>               Bases: <code>BaseSettings</code></p> <p>\u200b\u8c03\u5ea6\u200b\u5668\u4e3b\u200b\u914d\u7f6e\u200b\u7c7b\u200b\u3002</p> <p>\u200b\u652f\u6301\u200b\u4ece\u200b\u4ee5\u4e0b\u200b\u6765\u6e90\u200b\u52a0\u8f7d\u200b\u914d\u7f6e\u200b(\u200b\u4f18\u5148\u7ea7\u200b\u4ece\u200b\u9ad8\u5230\u200b\u4f4e\u200b): 1. \u200b\u76f4\u63a5\u200b\u4f20\u5165\u200b\u7684\u200b\u53c2\u6570\u200b 2. \u200b\u73af\u5883\u53d8\u91cf\u200b(\u200b\u524d\u7f00\u200b chronflow_) 3. .env \u200b\u6587\u4ef6\u200b 4. \u200b\u9ed8\u8ba4\u503c\u200b</p> \u200b\u793a\u4f8b"},{"location":"api/config/#chronflow.config.SchedulerConfig--_1","title":"\u4f7f\u7528\u200b\u9ed8\u8ba4\u200b\u914d\u7f6e","text":"<p>config = SchedulerConfig()</p>"},{"location":"api/config/#chronflow.config.SchedulerConfig--_2","title":"\u81ea\u5b9a\u4e49\u200b\u914d\u7f6e","text":"<p>config = SchedulerConfig(max_workers=20, log_level=\"DEBUG\")</p>"},{"location":"api/config/#chronflow.config.SchedulerConfig--chronflow_max_workers20","title":"\u4ece\u200b\u73af\u5883\u53d8\u91cf\u200b(chronflow_MAX_WORKERS=20)","text":"<p>config = SchedulerConfig()</p>"},{"location":"api/config/#chronflow.config.SchedulerConfig.validate_timezone","title":"<code>validate_timezone(v)</code>  <code>classmethod</code>","text":"<p>\u200b\u9a8c\u8bc1\u200b\u65f6\u200b\u533a\u200b\u5b57\u7b26\u4e32\u200b\u662f\u5426\u200b\u6709\u6548\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>v: \u200b\u65f6\u200b\u533a\u200b\u5b57\u7b26\u4e32\u200b,\u200b\u5982\u200b 'UTC', 'Asia/Shanghai'</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u9a8c\u8bc1\u200b\u901a\u8fc7\u200b\u7684\u200b\u65f6\u533a\u200b\u5b57\u7b26\u4e32\u200b</p> \u200b\u629b\u51fa\u200b <p>ValueError: \u200b\u65f6\u200b\u533a\u200b\u5b57\u7b26\u4e32\u200b\u65e0\u6548\u200b</p>"},{"location":"api/config/#chronflow.config.SchedulerConfig.parse_backend","title":"<code>parse_backend(value)</code>  <code>classmethod</code>","text":"<p>\u200b\u5141\u8bb8\u200b\u4ee5\u200b\u5b57\u7b26\u4e32\u200b\u6216\u200b\u6620\u5c04\u200b\u5f62\u5f0f\u200b\u58f0\u660e\u200b\u961f\u5217\u200b\u540e\u200b\u7aef\u200b\u3002</p>"},{"location":"api/config/#chronflow.config.SchedulerConfig.validate_backend_exists","title":"<code>validate_backend_exists(value)</code>  <code>classmethod</code>","text":"<p>\u200b\u9a8c\u8bc1\u200b\u540e\u200b\u7aef\u200b\u662f\u5426\u200b\u5df2\u200b\u6ce8\u518c\u200b\u3002</p> <p>\u200b\u6b64\u200b\u9a8c\u8bc1\u200b\u5728\u200b\u914d\u7f6e\u200b\u52a0\u8f7d\u200b\u65f6\u200b\u7acb\u5373\u200b\u6267\u884c\u200b,\u200b\u907f\u514d\u200b\u8fd0\u884c\u200b\u65f6\u200b\u9519\u8bef\u200b\u3002</p>"},{"location":"api/config/#chronflow.config.SchedulerConfig.from_file","title":"<code>from_file(path)</code>  <code>classmethod</code>","text":"<p>\u200b\u4ece\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u52a0\u8f7d\u200b\u914d\u7f6e\u200b\u3002</p> <p>\u200b\u652f\u6301\u200b\u7684\u200b\u6587\u4ef6\u683c\u5f0f\u200b: - JSON (.json) - TOML (.toml) - YAML (.yaml, .yml)</p> \u200b\u53c2\u6570\u200b <p>path: \u200b\u914d\u7f6e\u6587\u4ef6\u200b\u8def\u5f84\u200b</p> \u200b\u8fd4\u56de\u503c\u200b <p>SchedulerConfig \u200b\u5b9e\u4f8b\u200b</p> \u200b\u629b\u51fa\u200b <p>FileNotFoundError: \u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e0d\u200b\u5b58\u5728\u200b ValueError: \u200b\u4e0d\u200b\u652f\u6301\u200b\u7684\u200b\u6587\u4ef6\u683c\u5f0f\u200b ImportError: \u200b\u7f3a\u5c11\u200b\u5fc5\u8981\u200b\u7684\u200b\u89e3\u6790\u200b\u5e93\u200b(\u200b\u5982\u200b PyYAML)</p> \u200b\u793a\u4f8b\u200b <p>config = SchedulerConfig.from_file(\"config.toml\")</p>"},{"location":"api/config/#chronflow.config.SchedulerConfig.create_backend","title":"<code>create_backend()</code>","text":"<p>\u200b\u6839\u636e\u200b\u914d\u7f6e\u200b\u751f\u6210\u200b\u961f\u5217\u200b\u540e\u200b\u7aef\u200b\u5b9e\u4f8b\u200b\u3002</p>"},{"location":"api/config/#taskmetrics","title":"TaskMetrics","text":""},{"location":"api/config/#chronflow.config.TaskMetrics","title":"<code>TaskMetrics</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>\u200b\u4efb\u52a1\u200b\u6267\u884c\u200b\u6307\u6807\u200b\u7c7b\u200b\u3002</p> <p>\u200b\u7528\u4e8e\u200b\u7edf\u8ba1\u200b\u548c\u200b\u8bb0\u5f55\u200b\u4efb\u52a1\u200b\u7684\u200b\u6267\u884c\u200b\u60c5\u51b5\u200b,\u200b\u5305\u62ec\u200b\u6210\u529f\u7387\u200b\u3001\u200b\u6267\u884c\u200b\u65f6\u95f4\u200b\u7b49\u200b\u5173\u952e\u200b\u6307\u6807\u200b\u3002</p> \u200b\u5c5e\u6027\u200b <p>total_runs: \u200b\u603b\u200b\u8fd0\u884c\u200b\u6b21\u6570\u200b successful_runs: \u200b\u6210\u529f\u200b\u8fd0\u884c\u200b\u6b21\u6570\u200b failed_runs: \u200b\u5931\u8d25\u200b\u8fd0\u884c\u200b\u6b21\u6570\u200b total_execution_time: \u200b\u603b\u200b\u6267\u884c\u200b\u65f6\u95f4\u200b(\u200b\u79d2\u200b) average_execution_time: \u200b\u5e73\u5747\u200b\u6267\u884c\u200b\u65f6\u95f4\u200b(\u200b\u79d2\u200b) last_run_time: \u200b\u6700\u540e\u200b\u4e00\u6b21\u200b\u8fd0\u884c\u200b\u65f6\u95f4\u200b(\u200b\u79d2\u200b) last_success_time: \u200b\u6700\u540e\u200b\u4e00\u6b21\u200b\u6210\u529f\u200b\u65f6\u95f4\u200b(\u200b\u79d2\u200b) last_failure_time: \u200b\u6700\u540e\u200b\u4e00\u6b21\u200b\u5931\u8d25\u200b\u65f6\u95f4\u200b(\u200b\u79d2\u200b) consecutive_failures: \u200b\u8fde\u7eed\u200b\u5931\u8d25\u200b\u6b21\u6570\u200b</p>"},{"location":"api/config/#chronflow.config.TaskMetrics.update_success","title":"<code>update_success(execution_time)</code>","text":"<p>\u200b\u66f4\u65b0\u200b\u6210\u529f\u200b\u6267\u884c\u200b\u7684\u200b\u6307\u6807\u200b\u3002</p> <p>\u200b\u5728\u200b\u4efb\u52a1\u200b\u6210\u529f\u200b\u6267\u884c\u200b\u540e\u200b\u8c03\u7528\u200b,\u200b\u66f4\u65b0\u200b\u76f8\u5173\u200b\u7edf\u8ba1\u6570\u636e\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>execution_time: \u200b\u672c\u6b21\u200b\u6267\u884c\u200b\u8017\u65f6\u200b(\u200b\u79d2\u200b)</p>"},{"location":"api/config/#chronflow.config.TaskMetrics.update_failure","title":"<code>update_failure(execution_time)</code>","text":"<p>\u200b\u66f4\u65b0\u200b\u5931\u8d25\u200b\u6267\u884c\u200b\u7684\u200b\u6307\u6807\u200b\u3002</p> <p>\u200b\u5728\u200b\u4efb\u52a1\u200b\u6267\u884c\u200b\u5931\u8d25\u200b\u540e\u200b\u8c03\u7528\u200b,\u200b\u66f4\u65b0\u200b\u76f8\u5173\u200b\u7edf\u8ba1\u6570\u636e\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>execution_time: \u200b\u672c\u6b21\u200b\u6267\u884c\u200b\u8017\u65f6\u200b(\u200b\u79d2\u200b)</p>"},{"location":"api/decorators/","title":"Decorators API","text":"<p>\u200b\u88c5\u9970\u200b\u5668\u200b API \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u7b80\u6d01\u200b\u4f18\u96c5\u200b\u7684\u200b\u4efb\u52a1\u200b\u5b9a\u4e49\u200b\u65b9\u5f0f\u200b\u3002</p>"},{"location":"api/decorators/#_1","title":"\u57fa\u7840\u200b\u88c5\u9970\u200b\u5668","text":""},{"location":"api/decorators/#scheduled","title":"scheduled","text":""},{"location":"api/decorators/#chronflow.decorators.scheduled","title":"<code>scheduled(*, name=None, cron=None, interval=None, start_time=None, end_time=None, max_instances=1, timeout=None, retry_policy=None, enabled=True, tags=None, metadata=None)</code>","text":"<p>\u200b\u901a\u7528\u200b\u5b9a\u65f6\u200b\u4efb\u52a1\u200b\u88c5\u9970\u200b\u5668\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>name: \u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b(\u200b\u9ed8\u8ba4\u200b\u4f7f\u7528\u200b\u51fd\u6570\u200b\u540d\u200b) cron: Cron \u200b\u8868\u8fbe\u5f0f\u200b interval: \u200b\u95f4\u9694\u65f6\u95f4\u200b(\u200b\u79d2\u200b\u6216\u200b timedelta) start_time: \u200b\u5f00\u59cb\u200b\u65f6\u95f4\u200b end_time: \u200b\u7ed3\u675f\u200b\u65f6\u95f4\u200b max_instances: \u200b\u6700\u5927\u200b\u5e76\u53d1\u200b\u5b9e\u4f8b\u200b\u6570\u200b timeout: \u200b\u8d85\u65f6\u200b\u65f6\u95f4\u200b(\u200b\u79d2\u200b) retry_policy: \u200b\u91cd\u8bd5\u200b\u7b56\u7565\u200b enabled: \u200b\u662f\u5426\u200b\u542f\u7528\u200b tags: \u200b\u6807\u7b7e\u200b\u5217\u8868\u200b metadata: \u200b\u5143\u200b\u6570\u636e\u200b</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u88c5\u9970\u200b\u5668\u200b\u51fd\u6570\u200b</p> \u200b\u793a\u4f8b\u200b <p>@scheduled(cron=\"/5 * * * * \")  # \u200b\u6bcf\u200b5\u200b\u79d2\u200b\u6267\u884c\u200b async def my_task():     print(\"\u200b\u6267\u884c\u200b\u4efb\u52a1\u200b\")</p> <p>@scheduled(interval=60, retry_policy=RetryPolicy.aggressive()) async def another_task():     print(\"\u200b\u6bcf\u200b60\u200b\u79d2\u200b\u6267\u884c\u200b\u4e00\u6b21\u200b\")</p>"},{"location":"api/decorators/#cron","title":"cron","text":""},{"location":"api/decorators/#chronflow.decorators.cron","title":"<code>cron(expression, *, name=None, retry_policy=None, timeout=None, **kwargs)</code>","text":"<p>Cron \u200b\u8868\u8fbe\u5f0f\u200b\u5b9a\u65f6\u200b\u4efb\u52a1\u200b\u88c5\u9970\u200b\u5668\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>expression: Cron \u200b\u8868\u8fbe\u5f0f\u200b(\u200b\u652f\u6301\u200b\u79d2\u7ea7\u200b) name: \u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b retry_policy: \u200b\u91cd\u8bd5\u200b\u7b56\u7565\u200b timeout: \u200b\u8d85\u65f6\u200b\u65f6\u95f4\u200b **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u88c5\u9970\u200b\u5668\u200b\u51fd\u6570\u200b</p> \u200b\u793a\u4f8b\u200b <p>@cron(\"/10 * * * * \")  # \u200b\u6bcf\u200b10\u200b\u79d2\u200b\u6267\u884c\u200b async def sync_data():     await fetch_and_sync()</p> <p>@cron(\"0 0 * * *\")  # \u200b\u6bcf\u5929\u200b\u96f6\u70b9\u200b\u6267\u884c\u200b async def daily_cleanup():     await cleanup_old_data()</p>"},{"location":"api/decorators/#interval","title":"interval","text":""},{"location":"api/decorators/#chronflow.decorators.interval","title":"<code>interval(seconds, *, name=None, retry_policy=None, timeout=None, **kwargs)</code>","text":"<p>\u200b\u56fa\u5b9a\u200b\u95f4\u9694\u200b\u5b9a\u65f6\u200b\u4efb\u52a1\u200b\u88c5\u9970\u200b\u5668\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>seconds: \u200b\u95f4\u9694\u200b\u79d2\u6570\u200b\u6216\u200b timedelta name: \u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b retry_policy: \u200b\u91cd\u8bd5\u200b\u7b56\u7565\u200b timeout: \u200b\u8d85\u65f6\u200b\u65f6\u95f4\u200b **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u88c5\u9970\u200b\u5668\u200b\u51fd\u6570\u200b</p> \u200b\u793a\u4f8b\u200b <p>@interval(30)  # \u200b\u6bcf\u200b30\u200b\u79d2\u200b\u6267\u884c\u200b async def check_health():     await ping_services()</p> <p>@interval(timedelta(hours=1))  # \u200b\u6bcf\u200b\u5c0f\u65f6\u200b\u6267\u884c\u200b async def hourly_report():     await generate_report()</p>"},{"location":"api/decorators/#once","title":"once","text":""},{"location":"api/decorators/#chronflow.decorators.once","title":"<code>once(at, *, name=None, retry_policy=None, timeout=None, **kwargs)</code>","text":"<p>\u200b\u4e00\u6b21\u6027\u200b\u5b9a\u65f6\u200b\u4efb\u52a1\u200b\u88c5\u9970\u200b\u5668\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>at: \u200b\u6267\u884c\u200b\u65f6\u95f4\u200b name: \u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b retry_policy: \u200b\u91cd\u8bd5\u200b\u7b56\u7565\u200b timeout: \u200b\u8d85\u65f6\u200b\u65f6\u95f4\u200b **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u88c5\u9970\u200b\u5668\u200b\u51fd\u6570\u200b</p> \u200b\u793a\u4f8b\u200b <p>@once(datetime(2024, 12, 31, 23, 59, 59)) async def new_year_task():     print(\"\u200b\u65b0\u5e74\u5feb\u4e50\u200b!\")</p>"},{"location":"api/decorators/#_2","title":"\u4fbf\u6377\u200b\u88c5\u9970\u200b\u5668","text":""},{"location":"api/decorators/#every","title":"every","text":""},{"location":"api/decorators/#chronflow.decorators.every","title":"<code>every(seconds=None, minutes=None, hours=None, days=None, *, name=None, retry_policy=None, timeout=None, **kwargs)</code>","text":"<p>\u200b\u66f4\u200b\u76f4\u89c2\u200b\u7684\u200b\u95f4\u9694\u200b\u4efb\u52a1\u200b\u88c5\u9970\u200b\u5668\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>seconds: \u200b\u79d2\u6570\u200b minutes: \u200b\u5206\u949f\u200b\u6570\u200b hours: \u200b\u5c0f\u65f6\u6570\u200b days: \u200b\u5929\u6570\u200b name: \u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b retry_policy: \u200b\u91cd\u8bd5\u200b\u7b56\u7565\u200b timeout: \u200b\u8d85\u65f6\u200b\u65f6\u95f4\u200b **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u88c5\u9970\u200b\u5668\u200b\u51fd\u6570\u200b</p> \u200b\u793a\u4f8b\u200b <p>@every(minutes=30)  # \u200b\u6bcf\u200b 30 \u200b\u5206\u949f\u200b async def half_hourly_task():     print(\"\u200b\u6bcf\u200b 30 \u200b\u5206\u949f\u200b\u6267\u884c\u200b\")</p> <p>@every(hours=2, minutes=30)  # \u200b\u6bcf\u200b 2.5 \u200b\u5c0f\u65f6\u200b async def custom_interval():     print(\"\u200b\u6bcf\u200b 2.5 \u200b\u5c0f\u65f6\u200b\u6267\u884c\u200b\")</p>"},{"location":"api/decorators/#hourly","title":"hourly","text":""},{"location":"api/decorators/#chronflow.decorators.hourly","title":"<code>hourly(*, minute=0, name=None, retry_policy=None, timeout=None, **kwargs)</code>","text":"<p>\u200b\u6bcf\u200b\u5c0f\u65f6\u200b\u6267\u884c\u200b\u7684\u200b\u4efb\u52a1\u200b\u88c5\u9970\u200b\u5668\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>minute: \u200b\u5728\u200b\u7b2c\u200b\u51e0\u5206\u949f\u200b\u6267\u884c\u200b (0-59),\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b\u6574\u70b9\u200b name: \u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b retry_policy: \u200b\u91cd\u8bd5\u200b\u7b56\u7565\u200b timeout: \u200b\u8d85\u65f6\u200b\u65f6\u95f4\u200b **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u88c5\u9970\u200b\u5668\u200b\u51fd\u6570\u200b</p> \u200b\u793a\u4f8b\u200b <p>@hourly()  # \u200b\u6bcf\u200b\u5c0f\u65f6\u200b\u6574\u70b9\u200b\u6267\u884c\u200b async def hourly_task():     print(\"\u200b\u6bcf\u200b\u5c0f\u65f6\u200b\u6267\u884c\u200b\")</p> <p>@hourly(minute=30)  # \u200b\u6bcf\u200b\u5c0f\u65f6\u200b\u7684\u200b\u7b2c\u200b 30 \u200b\u5206\u949f\u200b\u6267\u884c\u200b async def half_past():     print(\"\u200b\u6bcf\u200b\u5c0f\u65f6\u200b 30 \u200b\u5206\u200b\u6267\u884c\u200b\")</p>"},{"location":"api/decorators/#daily","title":"daily","text":""},{"location":"api/decorators/#chronflow.decorators.daily","title":"<code>daily(*, hour=0, minute=0, name=None, retry_policy=None, timeout=None, **kwargs)</code>","text":"<p>\u200b\u6bcf\u5929\u200b\u6267\u884c\u200b\u7684\u200b\u4efb\u52a1\u200b\u88c5\u9970\u200b\u5668\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>hour: \u200b\u5c0f\u65f6\u200b (0-23),\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b 0 \u200b\u70b9\u200b minute: \u200b\u5206\u949f\u200b (0-59),\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b 0 \u200b\u5206\u200b name: \u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b retry_policy: \u200b\u91cd\u8bd5\u200b\u7b56\u7565\u200b timeout: \u200b\u8d85\u65f6\u200b\u65f6\u95f4\u200b **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u88c5\u9970\u200b\u5668\u200b\u51fd\u6570\u200b</p> \u200b\u793a\u4f8b\u200b <p>@daily(hour=9, minute=30)  # \u200b\u6bcf\u5929\u200b 9:30 async def morning_task():     print(\"\u200b\u65e9\u4e0a\u200b 9:30 \u200b\u6267\u884c\u200b\")</p> <p>@daily()  # \u200b\u6bcf\u5929\u200b 0:00 async def midnight_task():     print(\"\u200b\u6bcf\u5929\u200b\u5348\u591c\u200b\u6267\u884c\u200b\")</p>"},{"location":"api/decorators/#weekly","title":"weekly","text":""},{"location":"api/decorators/#chronflow.decorators.weekly","title":"<code>weekly(*, day=0, hour=0, minute=0, name=None, retry_policy=None, timeout=None, **kwargs)</code>","text":"<p>\u200b\u6bcf\u5468\u200b\u6267\u884c\u200b\u7684\u200b\u4efb\u52a1\u200b\u88c5\u9970\u200b\u5668\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>day: \u200b\u661f\u671f\u200b\u51e0\u200b (0=\u200b\u5468\u65e5\u200b, 1=\u200b\u5468\u4e00\u200b, ..., 6=\u200b\u5468\u516d\u200b),\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b\u5468\u65e5\u200b hour: \u200b\u5c0f\u65f6\u200b (0-23) minute: \u200b\u5206\u949f\u200b (0-59) name: \u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b retry_policy: \u200b\u91cd\u8bd5\u200b\u7b56\u7565\u200b timeout: \u200b\u8d85\u65f6\u200b\u65f6\u95f4\u200b **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u88c5\u9970\u200b\u5668\u200b\u51fd\u6570\u200b</p> \u200b\u793a\u4f8b\u200b <p>@weekly(day=1, hour=9)  # \u200b\u6bcf\u5468\u200b\u4e00\u200b 9:00 async def weekly_report():     print(\"\u200b\u5468\u4e00\u200b\u62a5\u8868\u200b\")</p> <p>@weekly(day=5, hour=18)  # \u200b\u6bcf\u5468\u4e94\u200b 18:00 async def tgif():     print(\"\u200b\u5468\u4e94\u200b\u665a\u4e0a\u200b!\")</p>"},{"location":"api/decorators/#monthly","title":"monthly","text":""},{"location":"api/decorators/#chronflow.decorators.monthly","title":"<code>monthly(*, day=1, hour=0, minute=0, name=None, retry_policy=None, timeout=None, **kwargs)</code>","text":"<p>\u200b\u6bcf\u6708\u200b\u6267\u884c\u200b\u7684\u200b\u4efb\u52a1\u200b\u88c5\u9970\u200b\u5668\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>day: \u200b\u51e0\u53f7\u200b (1-31),\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b 1 \u200b\u53f7\u200b hour: \u200b\u5c0f\u65f6\u200b (0-23) minute: \u200b\u5206\u949f\u200b (0-59) name: \u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b retry_policy: \u200b\u91cd\u8bd5\u200b\u7b56\u7565\u200b timeout: \u200b\u8d85\u65f6\u200b\u65f6\u95f4\u200b **kwargs: \u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u88c5\u9970\u200b\u5668\u200b\u51fd\u6570\u200b</p> \u200b\u793a\u4f8b\u200b <p>@monthly(day=1, hour=0)  # \u200b\u6bcf\u6708\u200b 1 \u200b\u53f7\u200b 0:00 async def monthly_cleanup():     print(\"\u200b\u6708\u521d\u200b\u6e05\u7406\u200b\")</p> <p>@monthly(day=15)  # \u200b\u6bcf\u6708\u200b 15 \u200b\u53f7\u200b 0:00 async def mid_month():     print(\"\u200b\u6708\u200b\u4e2d\u200b\u4efb\u52a1\u200b\")</p>"},{"location":"api/logging/","title":"Logging API","text":"<p>\u200b\u53ef\u200b\u63d2\u62d4\u200b\u65e5\u5fd7\u200b\u7cfb\u7edf\u200b\uff0c\u200b\u652f\u6301\u200b\u591a\u79cd\u200b\u65e5\u5fd7\u200b\u5e93\u200b\u3002</p>"},{"location":"api/logging/#loggeradapter","title":"LoggerAdapter (\u200b\u62bd\u8c61\u200b\u57fa\u7c7b\u200b)","text":""},{"location":"api/logging/#chronflow.logging.LoggerAdapter","title":"<code>LoggerAdapter</code>","text":"<p>               Bases: <code>ABC</code></p> <p>\u200b\u65e5\u5fd7\u200b\u9002\u914d\u5668\u200b\u62bd\u8c61\u200b\u57fa\u7c7b\u200b\u3002</p> <p>\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u6b64\u200b\u63a5\u53e3\u200b\u6765\u200b\u9002\u914d\u200b\u81ea\u5df1\u200b\u559c\u6b22\u200b\u7684\u200b\u65e5\u5fd7\u200b\u5e93\u200b\u3002</p>"},{"location":"api/logging/#chronflow.logging.LoggerAdapter.debug","title":"<code>debug(message, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>\u200b\u8bb0\u5f55\u200b\u8c03\u8bd5\u4fe1\u606f\u200b\u3002</p>"},{"location":"api/logging/#chronflow.logging.LoggerAdapter.info","title":"<code>info(message, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>\u200b\u8bb0\u5f55\u200b\u4e00\u822c\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"api/logging/#chronflow.logging.LoggerAdapter.warning","title":"<code>warning(message, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>\u200b\u8bb0\u5f55\u200b\u8b66\u544a\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"api/logging/#chronflow.logging.LoggerAdapter.error","title":"<code>error(message, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>\u200b\u8bb0\u5f55\u200b\u9519\u8bef\u4fe1\u606f\u200b\u3002</p>"},{"location":"api/logging/#chronflow.logging.LoggerAdapter.exception","title":"<code>exception(message, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>\u200b\u8bb0\u5f55\u200b\u5f02\u5e38\u200b\u4fe1\u606f\u200b(\u200b\u5305\u542b\u200b\u5806\u6808\u200b)\u3002</p>"},{"location":"api/logging/#structlogadapter","title":"StructlogAdapter","text":""},{"location":"api/logging/#chronflow.logging.StructlogAdapter","title":"<code>StructlogAdapter(logger_name='chronflow')</code>","text":"<p>               Bases: <code>LoggerAdapter</code></p> <p>Structlog \u200b\u65e5\u5fd7\u200b\u9002\u914d\u5668\u200b(\u200b\u9ed8\u8ba4\u200b)\u3002</p> <p>\u200b\u521d\u59cb\u5316\u200b structlog \u200b\u9002\u914d\u5668\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>logger_name: \u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b\u540d\u79f0\u200b</p>"},{"location":"api/logging/#chronflow.logging.StructlogAdapter.debug","title":"<code>debug(message, **kwargs)</code>","text":"<p>\u200b\u8bb0\u5f55\u200b\u8c03\u8bd5\u4fe1\u606f\u200b\u3002</p>"},{"location":"api/logging/#chronflow.logging.StructlogAdapter.info","title":"<code>info(message, **kwargs)</code>","text":"<p>\u200b\u8bb0\u5f55\u200b\u4e00\u822c\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"api/logging/#chronflow.logging.StructlogAdapter.warning","title":"<code>warning(message, **kwargs)</code>","text":"<p>\u200b\u8bb0\u5f55\u200b\u8b66\u544a\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"api/logging/#chronflow.logging.StructlogAdapter.error","title":"<code>error(message, **kwargs)</code>","text":"<p>\u200b\u8bb0\u5f55\u200b\u9519\u8bef\u4fe1\u606f\u200b\u3002</p>"},{"location":"api/logging/#chronflow.logging.StructlogAdapter.exception","title":"<code>exception(message, **kwargs)</code>","text":"<p>\u200b\u8bb0\u5f55\u200b\u5f02\u5e38\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"api/logging/#loguruadapter","title":"LoguruAdapter","text":""},{"location":"api/logging/#chronflow.logging.LoguruAdapter","title":"<code>LoguruAdapter(logger)</code>","text":"<p>               Bases: <code>LoggerAdapter</code></p> <p>Loguru \u200b\u65e5\u5fd7\u200b\u9002\u914d\u5668\u200b\u3002</p> \u200b\u793a\u4f8b\u200b <p>from loguru import logger from chronflow.logging import LoguruAdapter</p> <p>scheduler = Scheduler() scheduler.set_logger(LoguruAdapter(logger))</p> <p>\u200b\u521d\u59cb\u5316\u200b loguru \u200b\u9002\u914d\u5668\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>logger: loguru.logger \u200b\u5b9e\u4f8b\u200b</p>"},{"location":"api/logging/#chronflow.logging.LoguruAdapter.debug","title":"<code>debug(message, **kwargs)</code>","text":"<p>\u200b\u8bb0\u5f55\u200b\u8c03\u8bd5\u4fe1\u606f\u200b\u3002</p>"},{"location":"api/logging/#chronflow.logging.LoguruAdapter.info","title":"<code>info(message, **kwargs)</code>","text":"<p>\u200b\u8bb0\u5f55\u200b\u4e00\u822c\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"api/logging/#chronflow.logging.LoguruAdapter.warning","title":"<code>warning(message, **kwargs)</code>","text":"<p>\u200b\u8bb0\u5f55\u200b\u8b66\u544a\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"api/logging/#chronflow.logging.LoguruAdapter.error","title":"<code>error(message, **kwargs)</code>","text":"<p>\u200b\u8bb0\u5f55\u200b\u9519\u8bef\u4fe1\u606f\u200b\u3002</p>"},{"location":"api/logging/#chronflow.logging.LoguruAdapter.exception","title":"<code>exception(message, **kwargs)</code>","text":"<p>\u200b\u8bb0\u5f55\u200b\u5f02\u5e38\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"api/logging/#stdlibadapter","title":"StdlibAdapter","text":""},{"location":"api/logging/#chronflow.logging.StdlibAdapter","title":"<code>StdlibAdapter(logger)</code>","text":"<p>               Bases: <code>LoggerAdapter</code></p> <p>Python \u200b\u6807\u51c6\u200b\u5e93\u200b logging \u200b\u9002\u914d\u5668\u200b\u3002</p> \u200b\u793a\u4f8b\u200b <p>import logging from chronflow.logging import StdlibAdapter</p> <p>logger = logging.getLogger(\"myapp\") scheduler = Scheduler() scheduler.set_logger(StdlibAdapter(logger))</p> <p>\u200b\u521d\u59cb\u5316\u200b\u6807\u51c6\u200b\u5e93\u200b\u9002\u914d\u5668\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>logger: logging.Logger \u200b\u5b9e\u4f8b\u200b</p>"},{"location":"api/logging/#chronflow.logging.StdlibAdapter.debug","title":"<code>debug(message, **kwargs)</code>","text":"<p>\u200b\u8bb0\u5f55\u200b\u8c03\u8bd5\u4fe1\u606f\u200b\u3002</p>"},{"location":"api/logging/#chronflow.logging.StdlibAdapter.info","title":"<code>info(message, **kwargs)</code>","text":"<p>\u200b\u8bb0\u5f55\u200b\u4e00\u822c\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"api/logging/#chronflow.logging.StdlibAdapter.warning","title":"<code>warning(message, **kwargs)</code>","text":"<p>\u200b\u8bb0\u5f55\u200b\u8b66\u544a\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"api/logging/#chronflow.logging.StdlibAdapter.error","title":"<code>error(message, **kwargs)</code>","text":"<p>\u200b\u8bb0\u5f55\u200b\u9519\u8bef\u4fe1\u606f\u200b\u3002</p>"},{"location":"api/logging/#chronflow.logging.StdlibAdapter.exception","title":"<code>exception(message, **kwargs)</code>","text":"<p>\u200b\u8bb0\u5f55\u200b\u5f02\u5e38\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"api/logging/#noopadapter","title":"NoOpAdapter","text":""},{"location":"api/logging/#chronflow.logging.NoOpAdapter","title":"<code>NoOpAdapter</code>","text":"<p>               Bases: <code>LoggerAdapter</code></p> <p>\u200b\u7a7a\u200b\u64cd\u4f5c\u200b\u65e5\u5fd7\u200b\u9002\u914d\u5668\u200b,\u200b\u4e0d\u200b\u8f93\u51fa\u200b\u4efb\u4f55\u200b\u65e5\u5fd7\u200b\u3002</p> <p>\u200b\u7528\u4e8e\u200b\u5b8c\u5168\u200b\u7981\u7528\u200b\u65e5\u5fd7\u200b\u8f93\u51fa\u200b\u3002</p>"},{"location":"api/logging/#chronflow.logging.NoOpAdapter.debug","title":"<code>debug(message, **kwargs)</code>","text":"<p>\u200b\u4e0d\u200b\u8bb0\u5f55\u200b\u3002</p>"},{"location":"api/logging/#chronflow.logging.NoOpAdapter.info","title":"<code>info(message, **kwargs)</code>","text":"<p>\u200b\u4e0d\u200b\u8bb0\u5f55\u200b\u3002</p>"},{"location":"api/logging/#chronflow.logging.NoOpAdapter.warning","title":"<code>warning(message, **kwargs)</code>","text":"<p>\u200b\u4e0d\u200b\u8bb0\u5f55\u200b\u3002</p>"},{"location":"api/logging/#chronflow.logging.NoOpAdapter.error","title":"<code>error(message, **kwargs)</code>","text":"<p>\u200b\u4e0d\u200b\u8bb0\u5f55\u200b\u3002</p>"},{"location":"api/logging/#chronflow.logging.NoOpAdapter.exception","title":"<code>exception(message, **kwargs)</code>","text":"<p>\u200b\u4e0d\u200b\u8bb0\u5f55\u200b\u3002</p>"},{"location":"api/metrics/","title":"Metrics API","text":"<p>\u200b\u6027\u80fd\u6307\u6807\u200b\u6536\u96c6\u200b\u6a21\u5757\u200b,\u200b\u7528\u4e8e\u200b\u76d1\u63a7\u200b\u548c\u200b\u5206\u6790\u200b\u4efb\u52a1\u200b\u6267\u884c\u200b\u60c5\u51b5\u200b\u3002</p>"},{"location":"api/metrics/#metricscollector","title":"MetricsCollector","text":""},{"location":"api/metrics/#chronflow.metrics.MetricsCollector","title":"<code>MetricsCollector(total_executions=0, successful_executions=0, failed_executions=0, total_duration=0.0, task_stats=dict(), start_time=datetime.now())</code>  <code>dataclass</code>","text":"<p>\u200b\u6307\u6807\u200b\u6536\u96c6\u5668\u200b,\u200b\u7528\u4e8e\u200b\u6536\u96c6\u200b\u8c03\u5ea6\u200b\u5668\u200b\u6027\u80fd\u6307\u6807\u200b\u3002</p> \u200b\u793a\u4f8b\u200b <pre><code>collector = MetricsCollector()\n\n# \u200b\u8bb0\u5f55\u200b\u4efb\u52a1\u200b\u6267\u884c\u200b\ncollector.record_task_execution(\"my_task\", success=True, duration=1.5)\n\n# \u200b\u83b7\u53d6\u200b\u7edf\u8ba1\u200b\u4fe1\u606f\u200b\nstats = collector.get_stats()\nprint(f\"\u200b\u603b\u200b\u6267\u884c\u200b\u6b21\u6570\u200b: {stats['total_executions']}\")\n</code></pre>"},{"location":"api/metrics/#chronflow.metrics.MetricsCollector.record_task_execution","title":"<code>record_task_execution(task_name, success, duration)</code>","text":"<p>\u200b\u8bb0\u5f55\u200b\u4efb\u52a1\u200b\u6267\u884c\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>task_name: \u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b success: \u200b\u662f\u5426\u200b\u6210\u529f\u200b duration: \u200b\u6267\u884c\u200b\u65f6\u200b\u957f\u200b(\u200b\u79d2\u200b)</p>"},{"location":"api/metrics/#chronflow.metrics.MetricsCollector.get_stats","title":"<code>get_stats()</code>","text":"<p>\u200b\u83b7\u53d6\u200b\u7edf\u8ba1\u200b\u4fe1\u606f\u200b\u3002</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u5305\u542b\u200b\u6240\u6709\u200b\u7edf\u8ba1\u200b\u4fe1\u606f\u200b\u7684\u200b\u5b57\u5178\u200b</p>"},{"location":"api/metrics/#chronflow.metrics.MetricsCollector.export_prometheus","title":"<code>export_prometheus()</code>","text":"<p>\u200b\u5bfc\u51fa\u200b Prometheus \u200b\u683c\u5f0f\u200b\u7684\u200b\u6307\u6807\u200b\u3002</p> \u200b\u8fd4\u56de\u503c\u200b <p>Prometheus \u200b\u683c\u5f0f\u200b\u7684\u200b\u6307\u6807\u200b\u6587\u672c\u200b</p> \u200b\u793a\u4f8b\u200b <pre><code>metrics_text = collector.export_prometheus()\n# \u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b HTTP \u200b\u7aef\u70b9\u200b\u66b4\u9732\u200b\u7ed9\u200b Prometheus\n</code></pre>"},{"location":"api/metrics/#chronflow.metrics.MetricsCollector.format_table","title":"<code>format_table(*, show_tasks=True, max_tasks=20)</code>","text":"<p>\u200b\u683c\u5f0f\u5316\u200b\u6307\u6807\u200b\u4e3a\u200b\u7f8e\u89c2\u200b\u7684\u200b\u8868\u683c\u200b\u5c55\u793a\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>show_tasks: \u200b\u662f\u5426\u200b\u663e\u793a\u200b\u4efb\u52a1\u200b\u7ea7\u522b\u200b\u7edf\u8ba1\u200b max_tasks: \u200b\u6700\u200b\u591a\u200b\u663e\u793a\u200b\u7684\u200b\u4efb\u52a1\u200b\u6570\u91cf\u200b</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u683c\u5f0f\u5316\u200b\u7684\u200b\u8868\u683c\u200b\u5b57\u7b26\u4e32\u200b</p> \u200b\u793a\u4f8b\u200b <pre><code>print(collector.format_table())\n</code></pre>"},{"location":"api/metrics/#chronflow.metrics.MetricsCollector.format_task_detail","title":"<code>format_task_detail(task_name)</code>","text":"<p>\u200b\u683c\u5f0f\u5316\u200b\u5355\u4e2a\u200b\u4efb\u52a1\u200b\u7684\u200b\u8be6\u7ec6\u200b\u7edf\u8ba1\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>task_name: \u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u683c\u5f0f\u5316\u200b\u7684\u200b\u8be6\u7ec6\u200b\u7edf\u8ba1\u200b\u5b57\u7b26\u4e32\u200b</p> \u200b\u629b\u51fa\u200b <p>KeyError: \u200b\u4efb\u52a1\u200b\u4e0d\u200b\u5b58\u5728\u200b</p>"},{"location":"api/metrics/#chronflow.metrics.MetricsCollector.reset","title":"<code>reset()</code>","text":"<p>\u200b\u91cd\u7f6e\u200b\u6240\u6709\u200b\u7edf\u8ba1\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"api/retry/","title":"Retry API","text":"<p>\u200b\u91cd\u8bd5\u200b\u673a\u5236\u200b\u6a21\u5757\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u7075\u6d3b\u200b\u7684\u200b\u4efb\u52a1\u200b\u5931\u8d25\u200b\u91cd\u8bd5\u200b\u529f\u80fd\u200b\u3002</p>"},{"location":"api/retry/#retrypolicy","title":"RetryPolicy","text":""},{"location":"api/retry/#chronflow.retry.RetryPolicy","title":"<code>RetryPolicy</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>\u200b\u4efb\u52a1\u200b\u91cd\u200b\u8bd5\u884c\u200b\u4e3a\u200b\u7684\u200b\u914d\u7f6e\u200b\u3002</p>"},{"location":"api/retry/#chronflow.retry.RetryPolicy.create_retryer","title":"<code>create_retryer()</code>","text":"<p>\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b tenacity \u200b\u7684\u200b AsyncRetrying \u200b\u5b9e\u4f8b\u200b\u3002</p>"},{"location":"api/retry/#chronflow.retry.RetryPolicy.no_retry","title":"<code>no_retry()</code>  <code>staticmethod</code>","text":"<p>\u200b\u521b\u5efa\u200b\u4e0d\u200b\u91cd\u8bd5\u200b\u7b56\u7565\u200b\u3002</p>"},{"location":"api/retry/#chronflow.retry.RetryPolicy.default","title":"<code>default()</code>  <code>staticmethod</code>","text":"<p>\u200b\u521b\u5efa\u200b\u9ed8\u8ba4\u200b\u91cd\u8bd5\u200b\u7b56\u7565\u200b\u3002</p>"},{"location":"api/retry/#chronflow.retry.RetryPolicy.aggressive","title":"<code>aggressive()</code>  <code>staticmethod</code>","text":"<p>\u200b\u521b\u5efa\u200b\u66f4\u200b\u6fc0\u8fdb\u200b\u7684\u200b\u91cd\u8bd5\u200b\u7b56\u7565\u200b,\u200b\u5305\u542b\u200b\u66f4\u200b\u591a\u200b\u5c1d\u8bd5\u200b\u6b21\u6570\u200b\u3002</p>"},{"location":"api/retry/#retrystrategy","title":"RetryStrategy","text":""},{"location":"api/retry/#chronflow.retry.RetryStrategy","title":"<code>RetryStrategy</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u200b\u91cd\u8bd5\u200b\u7b56\u7565\u200b\u7c7b\u578b\u200b\u3002</p>"},{"location":"api/scheduler/","title":"Scheduler API","text":""},{"location":"api/scheduler/#chronflow.scheduler.Scheduler","title":"<code>Scheduler(config=None, backend=None, logger=None, enable_metrics=False, use_global_scheduler=True)</code>","text":"<p>\u200b\u9ad8\u6027\u80fd\u200b\u5f02\u6b65\u200b\u4efb\u52a1\u8c03\u5ea6\u200b\u5668\u200b\u3002</p> <p>\u200b\u7279\u6027\u200b: - \u200b\u652f\u6301\u200b\u79d2\u7ea7\u200b\u7cbe\u5ea6\u200b\u7684\u200b\u5b9a\u65f6\u200b\u4efb\u52a1\u200b - \u200b\u53ef\u200b\u63d2\u62d4\u200b\u7684\u200b\u540e\u200b\u7aef\u200b\u5b58\u50a8\u200b(\u200b\u5185\u5b58\u200b/Redis/RabbitMQ/SQLite) - \u200b\u53ef\u200b\u63d2\u62d4\u200b\u7684\u200b\u65e5\u5fd7\u200b\u7cfb\u7edf\u200b(structlog/loguru/stdlib) - \u200b\u4f18\u96c5\u200b\u5173\u95ed\u200b\u548c\u200b\u4fe1\u53f7\u5904\u7406\u200b - \u200b\u81ea\u52a8\u200b\u91cd\u8bd5\u200b\u673a\u5236\u200b - \u200b\u4efb\u52a1\u200b\u4f18\u5148\u7ea7\u200b\u548c\u200b\u5e76\u53d1\u200b\u63a7\u5236\u200b</p> <p>\u200b\u521d\u59cb\u5316\u200b\u8c03\u5ea6\u200b\u5668\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>config: \u200b\u8c03\u5ea6\u200b\u5668\u200b\u914d\u7f6e\u200b,\u200b\u9ed8\u8ba4\u200b\u4f7f\u7528\u200b SchedulerConfig() backend: \u200b\u961f\u5217\u200b\u540e\u200b\u7aef\u200b,\u200b\u9ed8\u8ba4\u200b\u4f9d\u636e\u200b\u914d\u7f6e\u200b\u81ea\u52a8\u200b\u5b9e\u4f8b\u200b\u5316\u200b logger: \u200b\u65e5\u5fd7\u200b\u9002\u914d\u5668\u200b,\u200b\u9ed8\u8ba4\u200b\u4f7f\u7528\u200b structlog enable_metrics: \u200b\u662f\u5426\u200b\u542f\u7528\u200b\u6027\u80fd\u6307\u6807\u200b\u6536\u96c6\u200b use_global_scheduler: \u200b\u662f\u5426\u200b\u5c06\u200b\u5f53\u524d\u200b\u5b9e\u4f8b\u200b\u6ce8\u518c\u200b\u4e3a\u200b\u5168\u5c40\u200b\u8c03\u5ea6\u200b\u5668\u200b,\u200b\u4ee5\u200b\u652f\u6301\u200b\u88c5\u9970\u200b\u5668\u200b\u81ea\u52a8\u200b\u6ce8\u518c\u200b</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.set_logger","title":"<code>set_logger(logger)</code>","text":"<p>\u200b\u8bbe\u7f6e\u200b\u65e5\u5fd7\u200b\u9002\u914d\u5668\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>logger: \u200b\u65e5\u5fd7\u200b\u9002\u914d\u5668\u200b\u5b9e\u4f8b\u200b</p> \u200b\u793a\u4f8b\u200b <p>from loguru import logger from chronflow.logging import LoguruAdapter</p> <p>scheduler.set_logger(LoguruAdapter(logger))</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.register_task","title":"<code>register_task(task)</code>","text":"<p>\u200b\u6ce8\u518c\u200b\u4efb\u52a1\u200b\u5230\u200b\u8c03\u5ea6\u200b\u5668\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>task: \u200b\u8981\u200b\u6ce8\u518c\u200b\u7684\u200b\u4efb\u52a1\u200b\u5b9e\u4f8b\u200b</p> \u200b\u629b\u51fa\u200b <p>ValueError: \u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b\u5df2\u200b\u5b58\u5728\u200b</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.unregister_task","title":"<code>unregister_task(task_name)</code>","text":"<p>\u200b\u6ce8\u9500\u200b\u4efb\u52a1\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>task_name: \u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.get_task","title":"<code>get_task(task_name)</code>","text":"<p>\u200b\u83b7\u53d6\u200b\u4efb\u52a1\u200b\u5b9e\u4f8b\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>task_name: \u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u4efb\u52a1\u200b\u5b9e\u4f8b\u200b,\u200b\u5982\u679c\u200b\u4e0d\u200b\u5b58\u5728\u200b\u8fd4\u56de\u200b None</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.start","title":"<code>start(daemon=False)</code>  <code>async</code>","text":"<p>\u200b\u542f\u52a8\u200b\u8c03\u5ea6\u200b\u5668\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>daemon: \u200b\u662f\u5426\u200b\u4ee5\u200b\u5b88\u62a4\u200b\u8fdb\u7a0b\u200b\u6a21\u5f0f\u200b\u8fd0\u884c\u200b</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u5b88\u62a4\u200b\u8fdb\u7a0b\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\u8fd4\u56de\u200b\u5b50\u200b\u8fdb\u7a0b\u200b PID,\u200b\u5426\u5219\u200b\u8fd4\u56de\u200b None</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.stop","title":"<code>stop(daemon=False, *, pid=None, name=None, timeout=None)</code>  <code>async</code>","text":"<p>\u200b\u505c\u6b62\u200b\u8c03\u5ea6\u200b\u5668\u200b\u6216\u200b\u5b88\u62a4\u200b\u8fdb\u7a0b\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>daemon: \u200b\u662f\u5426\u200b\u64cd\u4f5c\u200b\u5b88\u62a4\u200b\u8fdb\u7a0b\u200b pid: \u200b\u6307\u5b9a\u200b\u5b88\u62a4\u200b\u8fdb\u7a0b\u200b PID name: \u200b\u6307\u5b9a\u200b\u5b88\u62a4\u200b\u8fdb\u7a0b\u200b\u540d\u79f0\u200b timeout: \u200b\u7b49\u5f85\u200b\u7ec8\u6b62\u200b\u7684\u200b\u8d85\u65f6\u200b\u65f6\u95f4\u200b</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.restart","title":"<code>restart(daemon=False, *, pid=None, name=None, timeout=None)</code>  <code>async</code>","text":"<p>\u200b\u91cd\u542f\u200b\u8c03\u5ea6\u200b\u5668\u200b\u6216\u200b\u5b88\u62a4\u200b\u8fdb\u7a0b\u200b\u3002</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.cleanup","title":"<code>cleanup(daemon=False, *, pid=None, name=None)</code>  <code>async</code>","text":"<p>\u200b\u6e05\u7406\u200b\u5b88\u62a4\u200b\u8fdb\u7a0b\u200b\u50f5\u5c38\u200b\u72b6\u6001\u200b\u3002</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.stop_daemon","title":"<code>stop_daemon(*, pid=None, name=None, timeout=None)</code>  <code>async</code>","text":"<p>\u200b\u4fdd\u6301\u200b\u517c\u5bb9\u200b\u7684\u200b\u5b88\u62a4\u200b\u8fdb\u7a0b\u200b\u505c\u6b62\u200b\u63a5\u53e3\u200b\u3002</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.restart_daemon","title":"<code>restart_daemon(*, pid=None, name=None, timeout=None)</code>  <code>async</code>","text":"<p>\u200b\u4fdd\u6301\u200b\u517c\u5bb9\u200b\u7684\u200b\u5b88\u62a4\u200b\u8fdb\u7a0b\u200b\u91cd\u542f\u200b\u63a5\u53e3\u200b\u3002</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.cleanup_daemon","title":"<code>cleanup_daemon(*, pid=None, name=None)</code>  <code>async</code>","text":"<p>\u200b\u4fdd\u6301\u200b\u517c\u5bb9\u200b\u7684\u200b\u5b88\u62a4\u200b\u8fdb\u7a0b\u200b\u6e05\u7406\u200b\u63a5\u53e3\u200b\u3002</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.run_context","title":"<code>run_context()</code>  <code>async</code>","text":"<p>\u200b\u4f7f\u7528\u200b\u4e0a\u4e0b\u6587\u200b\u7ba1\u7406\u5668\u200b\u8fd0\u884c\u200b\u8c03\u5ea6\u200b\u5668\u200b\u3002</p> \u200b\u793a\u4f8b\u200b <p>async with scheduler.run_context():     # \u200b\u8c03\u5ea6\u200b\u5668\u200b\u5728\u200b\u8fd9\u91cc\u200b\u8fd0\u884c\u200b     await asyncio.sleep(60)</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.run_context--_1","title":"\u81ea\u52a8\u200b\u505c\u6b62\u200b\u8c03\u5ea6\u200b\u5668","text":""},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.get_stats","title":"<code>get_stats()</code>  <code>async</code>","text":"<p>\u200b\u83b7\u53d6\u200b\u8c03\u5ea6\u200b\u5668\u200b\u7edf\u8ba1\u200b\u4fe1\u606f\u200b\u3002</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u5305\u542b\u200b\u7edf\u8ba1\u200b\u4fe1\u606f\u200b\u7684\u200b\u5b57\u5178\u200b</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.list_tasks","title":"<code>list_tasks()</code>","text":"<p>\u200b\u83b7\u53d6\u200b\u6240\u6709\u200b\u4efb\u52a1\u200b\u5217\u8868\u200b\u3002</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u4efb\u52a1\u200b\u4fe1\u606f\u200b\u5217\u8868\u200b</p> \u200b\u793a\u4f8b\u200b <p>tasks = scheduler.list_tasks() for task_info in tasks:     print(f\"{task_info['name']}: {task_info['status']}\")</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.get_task_count","title":"<code>get_task_count()</code>","text":"<p>\u200b\u83b7\u53d6\u200b\u5404\u200b\u72b6\u6001\u200b\u4efb\u52a1\u200b\u6570\u91cf\u200b\u7edf\u8ba1\u200b\u3002</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u4efb\u52a1\u200b\u6570\u91cf\u200b\u7edf\u8ba1\u200b\u5b57\u5178\u200b</p> \u200b\u793a\u4f8b\u200b <p>counts = scheduler.get_task_count() print(f\"\u200b\u8fd0\u884c\u200b\u4e2d\u200b: {counts['running']}\") print(f\"\u200b\u5931\u8d25\u200b: {counts['failed']}\")</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.get_task_by_status","title":"<code>get_task_by_status(status)</code>","text":"<p>\u200b\u6839\u636e\u200b\u72b6\u6001\u200b\u83b7\u53d6\u200b\u4efb\u52a1\u200b\u5217\u8868\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>status: \u200b\u4efb\u52a1\u200b\u72b6\u6001\u200b</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u7b26\u5408\u200b\u72b6\u6001\u200b\u7684\u200b\u4efb\u52a1\u200b\u5217\u8868\u200b</p> \u200b\u793a\u4f8b\u200b <p>failed_tasks = scheduler.get_task_by_status(TaskStatus.FAILED) for task in failed_tasks:     print(f\"\u200b\u5931\u8d25\u200b\u4efb\u52a1\u200b: {task.config.name}\")</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.get_task_by_tag","title":"<code>get_task_by_tag(tag)</code>","text":"<p>\u200b\u6839\u636e\u200b\u6807\u7b7e\u200b\u83b7\u53d6\u200b\u4efb\u52a1\u200b\u5217\u8868\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>tag: \u200b\u6807\u7b7e\u200b\u540d\u79f0\u200b</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u5305\u542b\u200b\u8be5\u200b\u6807\u7b7e\u200b\u7684\u200b\u4efb\u52a1\u200b\u5217\u8868\u200b</p> \u200b\u793a\u4f8b\u200b <p>critical_tasks = scheduler.get_task_by_tag(\"critical\")</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.pause_task","title":"<code>pause_task(task_name)</code>  <code>async</code>","text":"<p>\u200b\u6682\u505c\u200b\u4efb\u52a1\u200b(\u200b\u7981\u7528\u200b)\u3002</p> \u200b\u53c2\u6570\u200b <p>task_name: \u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u662f\u5426\u200b\u6210\u529f\u200b\u6682\u505c\u200b</p> \u200b\u793a\u4f8b\u200b <p>await scheduler.pause_task(\"my_task\")</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.resume_task","title":"<code>resume_task(task_name)</code>  <code>async</code>","text":"<p>\u200b\u6062\u590d\u200b\u4efb\u52a1\u200b(\u200b\u542f\u7528\u200b)\u3002</p> \u200b\u53c2\u6570\u200b <p>task_name: \u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u662f\u5426\u200b\u6210\u529f\u200b\u6062\u590d\u200b</p> \u200b\u793a\u4f8b\u200b <p>await scheduler.resume_task(\"my_task\")</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.get_metrics","title":"<code>get_metrics()</code>","text":"<p>\u200b\u83b7\u53d6\u200b\u6027\u80fd\u6307\u6807\u200b\u3002</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u6027\u80fd\u6307\u6807\u200b\u5b57\u5178\u200b,\u200b\u5982\u679c\u200b\u672a\u200b\u542f\u7528\u200b\u6307\u6807\u200b\u6536\u96c6\u200b\u5219\u200b\u8fd4\u56de\u200b None</p> \u200b\u793a\u4f8b\u200b <p>if scheduler.metrics_collector:     metrics = scheduler.get_metrics()     print(f\"\u200b\u603b\u200b\u6267\u884c\u200b\u6b21\u6570\u200b: {metrics['total_executions']}\")     print(f\"\u200b\u6210\u529f\u7387\u200b: {metrics['success_rate']:.2%}\")</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.export_prometheus_metrics","title":"<code>export_prometheus_metrics()</code>","text":"<p>\u200b\u5bfc\u51fa\u200b Prometheus \u200b\u683c\u5f0f\u200b\u7684\u200b\u6307\u6807\u200b\u3002</p> \u200b\u8fd4\u56de\u503c\u200b <p>Prometheus \u200b\u683c\u5f0f\u200b\u7684\u200b\u6307\u6807\u200b\u6587\u672c\u200b,\u200b\u5982\u679c\u200b\u672a\u200b\u542f\u7528\u200b\u6307\u6807\u200b\u6536\u96c6\u200b\u5219\u200b\u8fd4\u56de\u200b None</p> \u200b\u793a\u4f8b\u200b <p>metrics_text = scheduler.export_prometheus_metrics() if metrics_text:     # \u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b HTTP \u200b\u7aef\u70b9\u200b\u66b4\u9732\u200b\u7ed9\u200b Prometheus     print(metrics_text)</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.reset_metrics","title":"<code>reset_metrics()</code>","text":"<p>\u200b\u91cd\u7f6e\u200b\u6027\u80fd\u6307\u6807\u200b\u3002</p> \u200b\u793a\u4f8b\u200b <p>scheduler.reset_metrics()</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.discover_tasks_from_directory","title":"<code>discover_tasks_from_directory(directory, *, pattern='task.py', recursive=True, exclude_patterns=None)</code>","text":"<p>\u200b\u4ece\u200b\u76ee\u5f55\u200b\u81ea\u52a8\u200b\u53d1\u73b0\u200b\u5e76\u200b\u6ce8\u518c\u200b\u4efb\u52a1\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>directory: \u200b\u8981\u200b\u626b\u63cf\u200b\u7684\u200b\u76ee\u5f55\u200b\u8def\u5f84\u200b pattern: \u200b\u6587\u4ef6\u540d\u200b\u5339\u914d\u200b\u6a21\u5f0f\u200b,\u200b\u652f\u6301\u200b\u901a\u914d\u7b26\u200b (\u200b\u9ed8\u8ba4\u200b: \"task.py\") recursive: \u200b\u662f\u5426\u200b\u9012\u5f52\u200b\u626b\u63cf\u200b\u5b50\u76ee\u5f55\u200b (\u200b\u9ed8\u8ba4\u200b: True) exclude_patterns: \u200b\u6392\u9664\u200b\u7684\u200b\u6587\u4ef6\u540d\u200b\u6a21\u5f0f\u200b\u5217\u8868\u200b</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u53d1\u73b0\u200b\u5e76\u200b\u6ce8\u518c\u200b\u7684\u200b\u4efb\u52a1\u200b\u5217\u8868\u200b</p> \u200b\u793a\u4f8b"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.discover_tasks_from_directory--taskpy","title":"\u626b\u63cf\u200b\u6240\u6709\u200b task.py \u200b\u6587\u4ef6","text":"<p>scheduler.discover_tasks_from_directory(\"my_app/modules\")</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.discover_tasks_from_directory--_taskspy","title":"\u626b\u63cf\u200b\u6240\u6709\u200b *_tasks.py \u200b\u6587\u4ef6","text":"<p>scheduler.discover_tasks_from_directory(     \"my_app\",     pattern=\"tasks.py\",     exclude_patterns=[\"test.py\"] )</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.discover_tasks_from_package","title":"<code>discover_tasks_from_package(package_name, *, pattern='task.py', exclude_patterns=None)</code>","text":"<p>\u200b\u4ece\u5305\u200b\u81ea\u52a8\u200b\u53d1\u73b0\u200b\u5e76\u200b\u6ce8\u518c\u200b\u4efb\u52a1\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>package_name: \u200b\u5305\u540d\u200b (\u200b\u4f8b\u5982\u200b: \"my_app.tasks\") pattern: \u200b\u6587\u4ef6\u540d\u200b\u5339\u914d\u200b\u6a21\u5f0f\u200b exclude_patterns: \u200b\u6392\u9664\u200b\u7684\u200b\u6587\u4ef6\u540d\u200b\u6a21\u5f0f\u200b\u5217\u8868\u200b</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u53d1\u73b0\u200b\u5e76\u200b\u6ce8\u518c\u200b\u7684\u200b\u4efb\u52a1\u200b\u5217\u8868\u200b</p> \u200b\u793a\u4f8b"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.discover_tasks_from_package--_1","title":"\u626b\u63cf\u200b\u5305\u200b\u53ca\u5176\u200b\u5b50\u5305","text":"<p>scheduler.discover_tasks_from_package(\"my_app.tasks\")</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.discover_tasks_from_package--_2","title":"\u626b\u63cf\u200b\u7279\u5b9a\u200b\u6a21\u5f0f\u200b\u7684\u200b\u6587\u4ef6","text":"<p>scheduler.discover_tasks_from_package(     \"my_app\",     pattern=\"*_tasks.py\" )</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.discover_tasks_from_modules","title":"<code>discover_tasks_from_modules(module_names)</code>","text":"<p>\u200b\u4ece\u200b\u6307\u5b9a\u200b\u7684\u200b\u6a21\u5757\u200b\u5217\u8868\u200b\u4e2d\u200b\u53d1\u73b0\u200b\u5e76\u200b\u6ce8\u518c\u200b\u4efb\u52a1\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>module_names: \u200b\u6a21\u5757\u200b\u540d\u200b\u5217\u8868\u200b (\u200b\u4f8b\u5982\u200b: [\"app.tasks.user\", \"app.tasks.email\"])</p> \u200b\u8fd4\u56de\u503c\u200b <p>\u200b\u53d1\u73b0\u200b\u5e76\u200b\u6ce8\u518c\u200b\u7684\u200b\u4efb\u52a1\u200b\u5217\u8868\u200b</p> \u200b\u793a\u4f8b\u200b <p>scheduler.discover_tasks_from_modules([     \"my_app.tasks.user_tasks\",     \"my_app.tasks.email_tasks\", ])</p>"},{"location":"api/scheduler/#chronflow.scheduler.Scheduler.__repr__","title":"<code>__repr__()</code>","text":"<p>\u200b\u5b57\u7b26\u4e32\u200b\u8868\u793a\u200b\u3002</p>"},{"location":"api/task/","title":"Task API","text":""},{"location":"api/task/#task","title":"Task","text":""},{"location":"api/task/#chronflow.task.Task","title":"<code>Task(func, config)</code>","text":"<p>\u200b\u8868\u793a\u200b\u4e00\u4e2a\u200b\u5e26\u6709\u200b\u6267\u884c\u200b\u903b\u8f91\u200b\u7684\u200b\u5b9a\u65f6\u200b\u4efb\u52a1\u200b\u3002</p> <p>\u200b\u521d\u59cb\u5316\u200b\u4efb\u52a1\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>func: \u200b\u8981\u200b\u6267\u884c\u200b\u7684\u200b\u5f02\u6b65\u200b\u51fd\u6570\u200b config: \u200b\u4efb\u52a1\u200b\u914d\u7f6e\u200b</p>"},{"location":"api/task/#chronflow.task.Task.execute","title":"<code>execute(*args, **kwargs)</code>  <code>async</code>","text":"<p>\u200b\u4f7f\u7528\u200b\u91cd\u8bd5\u200b\u903b\u8f91\u200b\u6267\u884c\u200b\u4efb\u52a1\u200b\u3002</p>"},{"location":"api/task/#chronflow.task.Task.cancel","title":"<code>cancel()</code>  <code>async</code>","text":"<p>\u200b\u53d6\u6d88\u200b\u4efb\u52a1\u200b\u3002</p>"},{"location":"api/task/#chronflow.task.Task.is_cancelled","title":"<code>is_cancelled()</code>","text":"<p>\u200b\u68c0\u67e5\u200b\u4efb\u52a1\u200b\u662f\u5426\u200b\u5df2\u200b\u88ab\u200b\u53d6\u6d88\u200b\u3002</p>"},{"location":"api/task/#chronflow.task.Task.__repr__","title":"<code>__repr__()</code>","text":"<p>\u200b\u4efb\u52a1\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u8868\u793a\u200b\u5f62\u5f0f\u200b\u3002</p>"},{"location":"api/task/#taskconfig","title":"TaskConfig","text":""},{"location":"api/task/#chronflow.task.TaskConfig","title":"<code>TaskConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>\u200b\u5b9a\u65f6\u200b\u4efb\u52a1\u200b\u914d\u7f6e\u200b\u3002</p>"},{"location":"api/task/#chronflow.task.TaskConfig.get_next_run_time","title":"<code>get_next_run_time(after=None, use_timezone=None)</code>","text":"<p>\u200b\u6839\u636e\u200b\u8c03\u5ea6\u200b\u8ba1\u7b97\u200b\u4e0b\u6b21\u200b\u8fd0\u884c\u200b\u65f6\u95f4\u200b\u3002</p> \u200b\u53c2\u6570\u200b <p>after: \u200b\u53c2\u8003\u200b\u65f6\u95f4\u200b\u70b9\u200b,\u200b\u9ed8\u8ba4\u200b\u4f7f\u7528\u200b\u5f53\u524d\u200b\u65f6\u95f4\u200b use_timezone: \u200b\u4f7f\u7528\u200b\u7684\u200b\u65f6\u533a\u200b,\u200b\u53ef\u4ee5\u200b\u662f\u200btimezone\u200b\u5bf9\u8c61\u200b\u3001ZoneInfo\u200b\u5b57\u7b26\u4e32\u200b\u6216\u200bNone(\u200b\u4f7f\u7528\u200bUTC)</p> \u200b\u6ce8\u610f\u200b <ul> <li>\u200b\u8fd4\u56de\u200b\u65f6\u200b\u533a\u200b\u611f\u77e5\u200b\u7684\u200bdatetime\u200b\u4ee5\u200b\u786e\u4fdd\u200b\u4e0e\u200b\u8c03\u5ea6\u200b\u5668\u200b\u7684\u200b\u65f6\u95f4\u200b\u6bd4\u8f83\u200b\u4e00\u81f4\u200b</li> <li>\u200b\u5982\u679c\u200b\u4f20\u5165\u200b\u7684\u200bafter\u200b\u65e0\u65f6\u533a\u200b\u4fe1\u606f\u200b,\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u6dfb\u52a0\u200b\u6307\u5b9a\u200b\u7684\u200b\u65f6\u533a\u200b</li> </ul>"},{"location":"api/task/#taskstatus","title":"TaskStatus","text":""},{"location":"api/task/#chronflow.task.TaskStatus","title":"<code>TaskStatus</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u200b\u4efb\u52a1\u200b\u6267\u884c\u200b\u72b6\u6001\u200b\u3002</p>"},{"location":"api/task/#scheduletype","title":"ScheduleType","text":""},{"location":"api/task/#chronflow.task.ScheduleType","title":"<code>ScheduleType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u200b\u4efb\u52a1\u8c03\u5ea6\u200b\u7c7b\u578b\u200b\u3002</p>"},{"location":"guides/backends/","title":"\u961f\u5217\u200b\u540e\u200b\u7aef","text":"<p>chronflow \u200b\u652f\u6301\u200b\u591a\u79cd\u200b\u961f\u5217\u200b\u540e\u200b\u7aef\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u5e94\u7528\u200b\u573a\u666f\u200b\u9009\u62e9\u200b\u5408\u9002\u200b\u7684\u200b\u540e\u200b\u7aef\u200b\u3002</p>"},{"location":"guides/backends/#_2","title":"\u540e\u200b\u7aef\u200b\u5bf9\u6bd4","text":"\u540e\u200b\u7aef\u200b \u200b\u9002\u7528\u200b\u573a\u666f\u200b \u200b\u6301\u4e45\u200b\u5316\u200b \u200b\u5206\u5e03\u5f0f\u200b \u200b\u6027\u80fd\u200b \u200b\u4f9d\u8d56\u200b Memory \u200b\u5f00\u53d1\u200b\u3001\u200b\u6d4b\u8bd5\u200b\u3001\u200b\u5355\u673a\u200b \u2717 \u2717 \u2b50\u2b50\u2b50\u2b50\u2b50 \u200b\u65e0\u200b SQLite \u200b\u5355\u673a\u200b\u751f\u4ea7\u200b\u3001\u200b\u9700\u8981\u200b\u6301\u4e45\u200b\u5316\u200b \u2713 \u2717 \u2b50\u2b50\u2b50\u2b50 \u200b\u65e0\u200b Redis \u200b\u5206\u5e03\u5f0f\u200b\u3001\u200b\u9ad8\u6027\u80fd\u200b \u2713 \u2713 \u2b50\u2b50\u2b50\u2b50\u2b50 Redis RabbitMQ \u200b\u9ad8\u53ef\u9760\u6027\u200b\u3001\u200b\u6d88\u606f\u200b\u961f\u5217\u200b \u2713 \u2713 \u2b50\u2b50\u2b50\u2b50 RabbitMQ"},{"location":"guides/backends/#memory-backend","title":"Memory Backend (\u200b\u5185\u5b58\u200b\u961f\u5217\u200b)","text":""},{"location":"guides/backends/#_3","title":"\u7279\u70b9","text":"<ul> <li>\u2705 \u200b\u96f6\u200b\u5916\u90e8\u200b\u4f9d\u8d56\u200b\uff0c\u200b\u5f00\u7bb1\u200b\u5373\u7528\u200b</li> <li>\u2705 \u200b\u6027\u80fd\u200b\u6700\u9ad8\u200b\uff0c\u200b\u9002\u5408\u200b\u9ad8\u9891\u200b\u4efb\u52a1\u200b</li> <li>\u2705 \u200b\u9002\u5408\u200b\u5f00\u53d1\u200b\u548c\u200b\u6d4b\u8bd5\u200b</li> <li>\u274c \u200b\u91cd\u542f\u200b\u540e\u200b\u4efb\u52a1\u200b\u4e22\u5931\u200b</li> <li>\u274c \u200b\u4e0d\u200b\u652f\u6301\u200b\u5206\u5e03\u5f0f\u200b</li> </ul>"},{"location":"guides/backends/#_4","title":"\u4f7f\u7528\u200b\u65b9\u6cd5","text":"<pre><code>from chronflow import Scheduler\n\n# \u200b\u9ed8\u8ba4\u200b\u4f7f\u7528\u200b\u5185\u5b58\u200b\u540e\u200b\u7aef\u200b\nscheduler = Scheduler()\n</code></pre>"},{"location":"guides/backends/#_5","title":"\u6027\u80fd","text":"<ul> <li>\u200b\u541e\u5410\u91cf\u200b: 10000+ tasks/s</li> <li>\u200b\u5ef6\u8fdf\u200b: &lt;1ms (p99)</li> <li>\u200b\u5185\u5b58\u200b\u5360\u7528\u200b: ~50MB</li> </ul>"},{"location":"guides/backends/#sqlite-backend","title":"SQLite Backend (\u200b\u672c\u5730\u200b\u6301\u4e45\u200b\u5316\u200b)","text":""},{"location":"guides/backends/#_6","title":"\u7279\u70b9","text":"<ul> <li>\u2705 \u200b\u672c\u5730\u200b\u6587\u4ef6\u200b\u6301\u4e45\u200b\u5316\u200b\uff0c\u200b\u91cd\u542f\u200b\u4e0d\u200b\u4e22\u200b\u4efb\u52a1\u200b</li> <li>\u2705 \u200b\u96f6\u200b\u5916\u90e8\u200b\u670d\u52a1\u200b\u4f9d\u8d56\u200b</li> <li>\u2705 \u200b\u652f\u6301\u200b\u4efb\u52a1\u200b\u5386\u53f2\u200b\u67e5\u8be2\u200b</li> <li>\u2705 WAL \u200b\u6a21\u5f0f\u200b\u63d0\u5347\u200b\u5e76\u53d1\u200b\u6027\u80fd\u200b</li> <li>\u274c \u200b\u4e0d\u200b\u652f\u6301\u200b\u5206\u5e03\u5f0f\u200b</li> </ul>"},{"location":"guides/backends/#_7","title":"\u4f7f\u7528\u200b\u65b9\u6cd5","text":"<pre><code>from chronflow import Scheduler\nfrom chronflow.backends import SQLiteBackend\n\n# \u200b\u521b\u5efa\u200b SQLite \u200b\u540e\u200b\u7aef\u200b\nbackend = SQLiteBackend(db_path=\"scheduler.db\")\nscheduler = Scheduler(backend=backend)\n</code></pre>"},{"location":"guides/backends/#_8","title":"\u914d\u7f6e\u200b\u9009\u9879","text":"<pre><code>backend = SQLiteBackend(\n    db_path=\"scheduler.db\",     # \u200b\u6570\u636e\u5e93\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\n    max_retries=3,               # \u200b\u6700\u5927\u200b\u91cd\u8bd5\u200b\u6b21\u6570\u200b\n    timeout=30.0                 # \u200b\u8d85\u65f6\u200b\u65f6\u95f4\u200b\uff08\u200b\u79d2\u200b\uff09\n)\n</code></pre>"},{"location":"guides/backends/#_9","title":"\u6570\u636e\u5e93\u200b\u7ed3\u6784","text":"<p>SQLiteBackend \u200b\u4f1a\u200b\u81ea\u52a8\u200b\u521b\u5efa\u200b\u4ee5\u4e0b\u200b\u8868\u200b\u7ed3\u6784\u200b\uff1a</p> <pre><code>CREATE TABLE task_queue (\n    task_id TEXT PRIMARY KEY,\n    task_name TEXT NOT NULL,\n    scheduled_time REAL NOT NULL,\n    priority INTEGER DEFAULT 0,\n    status TEXT DEFAULT 'pending',\n    retry_count INTEGER DEFAULT 0,\n    task_data TEXT NOT NULL,\n    created_at REAL DEFAULT (julianday('now')),\n    updated_at REAL DEFAULT (julianday('now'))\n);\n\nCREATE INDEX idx_scheduled_time ON task_queue(scheduled_time);\nCREATE INDEX idx_status ON task_queue(status);\n</code></pre>"},{"location":"guides/backends/#_10","title":"\u6027\u80fd","text":"<ul> <li>\u200b\u541e\u5410\u91cf\u200b: 5000+ tasks/s</li> <li>\u200b\u5ef6\u8fdf\u200b: &lt;5ms (p99)</li> <li>\u200b\u5185\u5b58\u200b\u5360\u7528\u200b: ~80MB</li> </ul>"},{"location":"guides/backends/#_11","title":"\u6e05\u7406\u200b\u5386\u53f2\u6570\u636e","text":"<pre><code>from chronflow.backends import SQLiteBackend\n\nbackend = SQLiteBackend(\"scheduler.db\")\n\n# \u200b\u6e05\u7406\u200b7\u200b\u5929\u524d\u200b\u7684\u200b\u5df2\u200b\u5b8c\u6210\u200b\u4efb\u52a1\u200b\nawait backend.cleanup_old_tasks(days=7)\n</code></pre>"},{"location":"guides/backends/#redis-backend","title":"Redis Backend (\u200b\u5206\u5e03\u5f0f\u200b\u961f\u5217\u200b)","text":""},{"location":"guides/backends/#_12","title":"\u7279\u70b9","text":"<ul> <li>\u2705 \u200b\u652f\u6301\u200b\u5206\u5e03\u5f0f\u200b\u90e8\u7f72\u200b\uff08\u200b\u591a\u4e2a\u200b\u8c03\u5ea6\u200b\u5668\u200b\u5b9e\u4f8b\u200b\uff09</li> <li>\u2705 \u200b\u9ad8\u6027\u80fd\u200b\uff0c\u200b\u4f4e\u200b\u5ef6\u8fdf\u200b</li> <li>\u2705 \u200b\u6570\u636e\u200b\u6301\u4e45\u200b\u5316\u200b\uff08\u200b\u53d6\u51b3\u4e8e\u200b Redis \u200b\u914d\u7f6e\u200b\uff09</li> <li>\u2705 \u200b\u652f\u6301\u200b\u96c6\u7fa4\u200b\u6a21\u5f0f\u200b</li> <li>\u274c \u200b\u9700\u8981\u200b Redis \u200b\u670d\u52a1\u200b</li> </ul>"},{"location":"guides/backends/#_13","title":"\u5b89\u88c5","text":"<pre><code>pip install chronflow[redis]\n</code></pre>"},{"location":"guides/backends/#_14","title":"\u4f7f\u7528\u200b\u65b9\u6cd5","text":"<pre><code>from chronflow import Scheduler\nfrom chronflow.backends import RedisBackend\n\n# \u200b\u521b\u5efa\u200b Redis \u200b\u540e\u200b\u7aef\u200b\nbackend = RedisBackend(url=\"redis://localhost:6379/0\")\nscheduler = Scheduler(backend=backend)\n</code></pre>"},{"location":"guides/backends/#_15","title":"\u914d\u7f6e\u200b\u9009\u9879","text":"<pre><code>backend = RedisBackend(\n    url=\"redis://localhost:6379/0\",     # Redis \u200b\u8fde\u63a5\u200b URL\n    key_prefix=\"chronflow:\",            # \u200b\u952e\u200b\u524d\u7f00\u200b\n    max_connections=10,                  # \u200b\u6700\u5927\u200b\u8fde\u63a5\u6570\u200b\n    socket_timeout=5.0,                  # Socket \u200b\u8d85\u65f6\u200b\n    socket_connect_timeout=5.0,          # \u200b\u8fde\u63a5\u200b\u8d85\u65f6\u200b\n)\n</code></pre>"},{"location":"guides/backends/#redis-url","title":"Redis URL \u200b\u683c\u5f0f","text":"<pre><code># \u200b\u57fa\u7840\u200b\u8fde\u63a5\u200b\n\"redis://localhost:6379/0\"\n\n# \u200b\u5e26\u200b\u5bc6\u7801\u200b\n\"redis://:password@localhost:6379/0\"\n\n# \u200b\u5e26\u200b\u7528\u6237\u540d\u200b\u548c\u200b\u5bc6\u7801\u200b\n\"redis://username:password@localhost:6379/0\"\n\n# Redis Sentinel\n\"redis+sentinel://sentinel-host:26379/mymaster/0\"\n\n# Redis Cluster\n\"redis://localhost:7000,localhost:7001,localhost:7002/0\"\n</code></pre>"},{"location":"guides/backends/#_16","title":"\u6027\u80fd","text":"<ul> <li>\u200b\u541e\u5410\u91cf\u200b: 8000+ tasks/s</li> <li>\u200b\u5ef6\u8fdf\u200b: &lt;3ms (p99)</li> <li>\u200b\u5185\u5b58\u200b\u5360\u7528\u200b: ~60MB</li> </ul>"},{"location":"guides/backends/#_17","title":"\u6570\u636e\u7ed3\u6784","text":"<p>RedisBackend \u200b\u4f7f\u7528\u200b\u4ee5\u4e0b\u200b Redis \u200b\u6570\u636e\u7ed3\u6784\u200b\uff1a</p> <ul> <li>Sorted Set (zset): \u200b\u5b58\u50a8\u200b\u4efb\u52a1\u200b\u961f\u5217\u200b\uff0c\u200b\u6309\u200b\u8c03\u5ea6\u200b\u65f6\u95f4\u200b\u6392\u5e8f\u200b</li> <li>Set: \u200b\u5b58\u50a8\u200b\u6b63\u5728\u200b\u6267\u884c\u200b\u7684\u200b\u4efb\u52a1\u200b ID</li> </ul> <pre><code># \u200b\u4efb\u52a1\u200b\u961f\u5217\u200b (zset)\n# Key: chronflow:queue\n# Score: scheduled_time - priority*1000\n# Member: JSON \u200b\u5e8f\u5217\u5316\u200b\u7684\u200b\u4efb\u52a1\u200b\u6570\u636e\u200b\n\n# \u200b\u6b63\u5728\u200b\u6267\u884c\u200b\u7684\u200b\u4efb\u52a1\u200b (set)\n# Key: chronflow:pending\n# Members: task IDs\n</code></pre>"},{"location":"guides/backends/#rabbitmq-backend","title":"RabbitMQ Backend (\u200b\u6d88\u606f\u200b\u961f\u5217\u200b)","text":""},{"location":"guides/backends/#_18","title":"\u7279\u70b9","text":"<ul> <li>\u2705 \u200b\u9ad8\u53ef\u9760\u6027\u200b\u6d88\u606f\u200b\u961f\u5217\u200b</li> <li>\u2705 \u200b\u652f\u6301\u200b\u5206\u5e03\u5f0f\u200b\u90e8\u7f72\u200b</li> <li>\u2705 \u200b\u652f\u6301\u200b\u6d88\u606f\u200b\u6301\u4e45\u200b\u5316\u200b</li> <li>\u2705 \u200b\u652f\u6301\u200b\u6d88\u606f\u200b\u786e\u8ba4\u200b\u673a\u5236\u200b</li> <li>\u274c \u200b\u9700\u8981\u200b RabbitMQ \u200b\u670d\u52a1\u200b</li> </ul>"},{"location":"guides/backends/#_19","title":"\u5b89\u88c5","text":"<pre><code>pip install chronflow[rabbitmq]\n</code></pre>"},{"location":"guides/backends/#_20","title":"\u4f7f\u7528\u200b\u65b9\u6cd5","text":"<pre><code>from chronflow import Scheduler\nfrom chronflow.backends import RabbitMQBackend\n\n# \u200b\u521b\u5efa\u200b RabbitMQ \u200b\u540e\u200b\u7aef\u200b\nbackend = RabbitMQBackend(url=\"amqp://guest:guest@localhost:5672/\")\nscheduler = Scheduler(backend=backend)\n</code></pre>"},{"location":"guides/backends/#_21","title":"\u914d\u7f6e\u200b\u9009\u9879","text":"<pre><code>backend = RabbitMQBackend(\n    url=\"amqp://guest:guest@localhost:5672/\",  # RabbitMQ \u200b\u8fde\u63a5\u200b URL\n    queue_name=\"chronflow_tasks\",             # \u200b\u961f\u5217\u200b\u540d\u79f0\u200b\n    exchange_name=\"chronflow\",                # \u200b\u4ea4\u6362\u673a\u200b\u540d\u79f0\u200b\n    durable=True,                              # \u200b\u6301\u4e45\u200b\u5316\u200b\u961f\u5217\u200b\n    max_priority=10,                           # \u200b\u6700\u5927\u200b\u4f18\u5148\u7ea7\u200b\n)\n</code></pre>"},{"location":"guides/backends/#rabbitmq-url","title":"RabbitMQ URL \u200b\u683c\u5f0f","text":"<pre><code># \u200b\u57fa\u7840\u200b\u8fde\u63a5\u200b\n\"amqp://guest:guest@localhost:5672/\"\n\n# \u200b\u6307\u5b9a\u200b\u865a\u62df\u4e3b\u673a\u200b\n\"amqp://user:password@localhost:5672/my_vhost\"\n\n# \u200b\u4f7f\u7528\u200b TLS/SSL\n\"amqps://user:password@localhost:5671/\"\n</code></pre>"},{"location":"guides/backends/#_22","title":"\u6027\u80fd","text":"<ul> <li>\u200b\u541e\u5410\u91cf\u200b: 6000+ tasks/s</li> <li>\u200b\u5ef6\u8fdf\u200b: &lt;5ms (p99)</li> <li>\u200b\u5185\u5b58\u200b\u5360\u7528\u200b: ~70MB</li> </ul>"},{"location":"guides/backends/#_23","title":"\u81ea\u5b9a\u4e49\u200b\u540e\u200b\u7aef","text":"<p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u81ea\u5df1\u200b\u7684\u200b\u961f\u5217\u200b\u540e\u200b\u7aef\u200b\uff1a</p> <pre><code>from chronflow.backends import QueueBackend\nfrom chronflow.task import Task\nfrom datetime import datetime\nfrom typing import Optional\n\nclass MyCustomBackend(QueueBackend):\n    \"\"\"\u200b\u81ea\u5b9a\u4e49\u200b\u961f\u5217\u200b\u540e\u200b\u7aef\u200b\u3002\"\"\"\n\n    async def connect(self) -&gt; None:\n        \"\"\"\u200b\u8fde\u63a5\u200b\u5230\u200b\u540e\u200b\u7aef\u200b\u3002\"\"\"\n        # \u200b\u521d\u59cb\u5316\u200b\u8fde\u63a5\u200b\n        pass\n\n    async def disconnect(self) -&gt; None:\n        \"\"\"\u200b\u65ad\u5f00\u8fde\u63a5\u200b\u3002\"\"\"\n        # \u200b\u5173\u95ed\u200b\u8fde\u63a5\u200b\n        pass\n\n    async def enqueue(self, task: Task, scheduled_time: datetime,\n                     priority: int = 0) -&gt; None:\n        \"\"\"\u200b\u5c06\u200b\u4efb\u52a1\u200b\u52a0\u5165\u200b\u961f\u5217\u200b\u3002\"\"\"\n        # \u200b\u5b9e\u73b0\u200b\u5165\u961f\u200b\u903b\u8f91\u200b\n        pass\n\n    async def dequeue(self, max_items: int = 1) -&gt; list[Task]:\n        \"\"\"\u200b\u4ece\u200b\u961f\u5217\u200b\u53d6\u51fa\u200b\u5c31\u7eea\u200b\u4efb\u52a1\u200b\u3002\"\"\"\n        # \u200b\u5b9e\u73b0\u200b\u51fa\u961f\u200b\u903b\u8f91\u200b\n        pass\n\n    async def acknowledge(self, task: Task) -&gt; None:\n        \"\"\"\u200b\u786e\u8ba4\u200b\u4efb\u52a1\u200b\u5b8c\u6210\u200b\u3002\"\"\"\n        # \u200b\u5b9e\u73b0\u200b\u786e\u8ba4\u200b\u903b\u8f91\u200b\n        pass\n\n    async def reject(self, task: Task, requeue: bool = False) -&gt; None:\n        \"\"\"\u200b\u62d2\u7edd\u200b\u4efb\u52a1\u200b\uff08\u200b\u5931\u8d25\u200b\u5904\u7406\u200b\uff09\u3002\"\"\"\n        # \u200b\u5b9e\u73b0\u200b\u62d2\u7edd\u200b\u903b\u8f91\u200b\n        pass\n\n    async def get_queue_size(self) -&gt; int:\n        \"\"\"\u200b\u83b7\u53d6\u200b\u961f\u5217\u200b\u5927\u5c0f\u200b\u3002\"\"\"\n        # \u200b\u8fd4\u56de\u200b\u961f\u5217\u200b\u4e2d\u200b\u7684\u200b\u4efb\u52a1\u200b\u6570\u200b\n        return 0\n\n    async def clear(self) -&gt; None:\n        \"\"\"\u200b\u6e05\u7a7a\u200b\u961f\u5217\u200b\u3002\"\"\"\n        # \u200b\u6e05\u7a7a\u200b\u6240\u6709\u200b\u4efb\u52a1\u200b\n        pass\n\n    async def health_check(self) -&gt; bool:\n        \"\"\"\u200b\u5065\u5eb7\u68c0\u67e5\u200b\u3002\"\"\"\n        # \u200b\u68c0\u67e5\u200b\u540e\u200b\u7aef\u200b\u662f\u5426\u200b\u6b63\u5e38\u200b\n        return True\n\n# \u200b\u4f7f\u7528\u200b\u81ea\u5b9a\u4e49\u200b\u540e\u200b\u7aef\u200b\nbackend = MyCustomBackend()\nscheduler = Scheduler(backend=backend)\n</code></pre>"},{"location":"guides/backends/#_24","title":"\u540e\u200b\u7aef\u200b\u9009\u62e9\u200b\u5efa\u8bae","text":""},{"location":"guides/backends/#_25","title":"\u5f00\u53d1\u200b\u548c\u200b\u6d4b\u8bd5","text":"<p>\u200b\u63a8\u8350\u200b\u4f7f\u7528\u200b Memory Backend\uff0c\u200b\u96f6\u200b\u914d\u7f6e\u200b\uff0c\u200b\u6027\u80fd\u200b\u6700\u9ad8\u200b\u3002</p>"},{"location":"guides/backends/#_26","title":"\u5355\u673a\u200b\u751f\u4ea7\u200b\u73af\u5883","text":"<ul> <li>\u200b\u4e0d\u200b\u9700\u8981\u200b\u6301\u4e45\u200b\u5316\u200b \u2192 Memory Backend</li> <li>\u200b\u9700\u8981\u200b\u6301\u4e45\u200b\u5316\u200b \u2192 SQLite Backend</li> </ul>"},{"location":"guides/backends/#_27","title":"\u5206\u5e03\u5f0f\u200b\u751f\u4ea7\u200b\u73af\u5883","text":"<ul> <li>\u200b\u9ad8\u6027\u80fd\u200b\u8981\u6c42\u200b \u2192 Redis Backend</li> <li>\u200b\u9ad8\u53ef\u9760\u6027\u200b\u8981\u6c42\u200b \u2192 RabbitMQ Backend</li> </ul>"},{"location":"guides/backends/#_28","title":"\u7279\u6b8a\u200b\u573a\u666f","text":"<ul> <li>\u200b\u5df2\u6709\u200b Redis \u2192 Redis Backend</li> <li>\u200b\u5df2\u6709\u200b RabbitMQ \u2192 RabbitMQ Backend</li> <li>\u200b\u5b8c\u5168\u200b\u79bb\u7ebf\u200b\u73af\u5883\u200b \u2192 SQLite Backend</li> <li>\u200b\u6781\u81f4\u200b\u6027\u80fd\u200b \u2192 Memory Backend</li> </ul>"},{"location":"guides/backends/#_29","title":"\u540e\u200b\u7aef\u200b\u8fc1\u79fb","text":"<p>\u200b\u4ece\u200b\u4e00\u4e2a\u200b\u540e\u200b\u7aef\u200b\u8fc1\u79fb\u200b\u5230\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u540e\u200b\u7aef\u200b\uff1a</p> <pre><code>from chronflow import Scheduler\nfrom chronflow.backends import MemoryBackend, SQLiteBackend\n\n# \u200b\u65e7\u200b\u8c03\u5ea6\u200b\u5668\u200b\uff08\u200b\u5185\u5b58\u200b\u540e\u200b\u7aef\u200b\uff09\nold_scheduler = Scheduler(backend=MemoryBackend())\n\n# \u200b\u65b0\u200b\u8c03\u5ea6\u200b\u5668\u200b\uff08SQLite \u200b\u540e\u200b\u7aef\u200b\uff09\nnew_backend = SQLiteBackend(\"scheduler.db\")\nnew_scheduler = Scheduler(backend=new_backend)\n\n# \u200b\u8fc1\u79fb\u200b\u4efb\u52a1\u200b\nfor task_name in old_scheduler._tasks:\n    task = old_scheduler.get_task(task_name)\n    new_scheduler.register_task(task)\n\n# \u200b\u505c\u6b62\u200b\u65e7\u200b\u8c03\u5ea6\u200b\u5668\u200b\uff0c\u200b\u542f\u52a8\u200b\u65b0\u200b\u8c03\u5ea6\u200b\u5668\u200b\nawait old_scheduler.stop()\nawait new_scheduler.start()\n</code></pre>"},{"location":"guides/integration/","title":"Chronflow \u200b\u96c6\u6210\u200b\u6307\u5357","text":"<p>\u200b\u672c\u200b\u6307\u5357\u200b\u5e2e\u52a9\u200b\u4f60\u200b\u6b63\u786e\u200b\u96c6\u6210\u200b Chronflow,\u200b\u907f\u514d\u200b\u5e38\u89c1\u200b\u7684\u200b\u9677\u9631\u200b\u548c\u200b\u95ee\u9898\u200b\u3002</p>"},{"location":"guides/integration/#_1","title":"\u5e38\u89c1\u95ee\u9898\u200b\u53ca\u200b\u89e3\u51b3\u65b9\u6848","text":""},{"location":"guides/integration/#1","title":"1. \u200b\u4efb\u52a1\u200b\u91cd\u590d\u200b\u6267\u884c","text":"<p>\u200b\u95ee\u9898\u200b: \u200b\u540c\u4e00\u4e2a\u200b\u4efb\u52a1\u200b\u88ab\u200b\u591a\u4e2a\u200b worker \u200b\u540c\u65f6\u200b\u6267\u884c\u200b</p> <p>\u200b\u539f\u56e0\u200b: \u200b\u4efb\u52a1\u200b\u88c5\u9970\u200b\u5668\u200b\u88ab\u200b\u591a\u6b21\u200b\u8c03\u7528\u200b,\u200b\u5bfc\u81f4\u200b\u91cd\u590d\u200b\u6ce8\u518c\u200b</p> <p>\u200b\u89e3\u51b3\u65b9\u6848\u200b:</p> <pre><code># \u2705 \u200b\u6b63\u786e\u200b: \u200b\u88c5\u9970\u200b\u5668\u200b\u5728\u200b\u6a21\u5757\u200b\u9876\u5c42\u200b\u4f7f\u7528\u200b\nfrom chronflow import interval\n\n@interval(seconds=10, name=\"my_task\")\nasync def my_task():\n    \"\"\"\u200b\u6bcf\u200b10\u200b\u79d2\u200b\u6267\u884c\u200b\u4e00\u6b21\u200b\"\"\"\n    print(\"\u200b\u6267\u884c\u200b\u4efb\u52a1\u200b...\")\n\n# \u274c \u200b\u9519\u8bef\u200b: \u200b\u5728\u200b\u51fd\u6570\u200b\u4e2d\u200b\u52a8\u6001\u200b\u6ce8\u518c\u200b\ndef init_tasks():\n    @interval(seconds=10)  # \u200b\u6bcf\u6b21\u200b\u8c03\u7528\u200b\u90fd\u200b\u4f1a\u200b\u91cd\u65b0\u200b\u6ce8\u518c\u200b\n    async def my_task():\n        print(\"\u200b\u6267\u884c\u200b\u4efb\u52a1\u200b...\")\n</code></pre> <p>\u200b\u68c0\u67e5\u200b\u6e05\u5355\u200b: - \u2705 \u200b\u88c5\u9970\u200b\u5668\u200b\u5728\u200b\u6a21\u5757\u200b\u9876\u5c42\u200b\u4f7f\u7528\u200b(import\u200b\u65f6\u200b\u6267\u884c\u200b\u4e00\u6b21\u200b) - \u2705 \u200b\u4e0d\u8981\u200b\u5728\u200b\u51fd\u6570\u200b/\u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u52a8\u6001\u200b\u8c03\u7528\u200b\u88c5\u9970\u200b\u5668\u200b - \u2705 \u200b\u786e\u4fdd\u200b\u6a21\u5757\u200b\u4e0d\u4f1a\u200b\u88ab\u200b\u91cd\u590d\u200b\u5bfc\u5165\u200b - \u2705 \u200b\u4f7f\u7528\u200b <code>name</code> \u200b\u53c2\u6570\u200b\u4e3a\u200b\u4efb\u52a1\u200b\u6307\u5b9a\u200b\u552f\u4e00\u200b\u540d\u79f0\u200b</p>"},{"location":"guides/integration/#2-ctrlc","title":"2. Ctrl+C \u200b\u65e0\u6cd5\u200b\u505c\u6b62","text":"<p>\u200b\u95ee\u9898\u200b: \u200b\u524d\u53f0\u200b\u8fd0\u884c\u200b\u65f6\u200b\u6309\u200b Ctrl+C \u200b\u65e0\u6cd5\u200b\u505c\u6b62\u200b\u8c03\u5ea6\u200b\u5668\u200b</p> <p>\u200b\u539f\u56e0\u200b: \u200b\u65e7\u7248\u672c\u200b\u672a\u200b\u5728\u200b\u975e\u200b\u5b88\u62a4\u200b\u6a21\u5f0f\u200b\u6ce8\u518c\u200b\u4fe1\u53f7\u5904\u7406\u5668\u200b</p> <p>\u200b\u89e3\u51b3\u65b9\u6848\u200b: \u200b\u5347\u7ea7\u200b\u5230\u200b v0.2.1 \u200b\u6216\u200b\u66f4\u200b\u9ad8\u200b\u7248\u672c\u200b</p> <pre><code>pip install --upgrade chronflow\n</code></pre> <p>\u200b\u8be5\u200b\u7248\u672c\u200b\u5df2\u200b\u81ea\u52a8\u200b\u6ce8\u518c\u200b SIGINT \u200b\u548c\u200b SIGTERM \u200b\u4fe1\u53f7\u5904\u7406\u5668\u200b\u3002</p>"},{"location":"guides/integration/#3","title":"3. \u200b\u5b88\u62a4\u200b\u8fdb\u7a0b\u200b\u8f93\u51fa\u200b\u5230\u200b\u7ec8\u7aef","text":"<p>\u200b\u95ee\u9898\u200b: \u200b\u540e\u53f0\u200b\u8fd0\u884c\u200b\u65f6\u200b\u65e5\u5fd7\u200b\u4ecd\u7136\u200b\u8f93\u51fa\u200b\u5230\u200b\u7ec8\u7aef\u200b</p> <p>\u200b\u539f\u56e0\u200b: \u200b\u65e7\u7248\u672c\u200b\u672a\u200b\u91cd\u5b9a\u5411\u200b\u6807\u51c6\u200b\u8f93\u5165\u200b/\u200b\u8f93\u51fa\u200b/\u200b\u9519\u8bef\u200b</p> <p>\u200b\u89e3\u51b3\u65b9\u6848\u200b: \u200b\u5347\u7ea7\u200b\u5230\u200b v0.2.1 \u200b\u6216\u200b\u66f4\u200b\u9ad8\u200b\u7248\u672c\u200b</p> <pre><code>pip install --upgrade chronflow\n</code></pre> <p>\u200b\u6216\u200b\u624b\u52a8\u200b\u91cd\u5b9a\u5411\u200b\u8f93\u51fa\u200b: <pre><code>python your_script.py &gt; /dev/null 2&gt;&amp;1 &amp;\n</code></pre></p>"},{"location":"guides/integration/#4-redis","title":"4. Redis \u200b\u8fde\u63a5\u6570\u200b\u8fc7\u591a","text":"<p>\u200b\u95ee\u9898\u200b: <code>redis.exceptions.ConnectionError: Too many connections</code></p> <p>\u200b\u539f\u56e0\u200b: - \u200b\u4efb\u52a1\u200b\u91cd\u590d\u200b\u6ce8\u518c\u200b\u5bfc\u81f4\u200b\u8fde\u63a5\u6570\u200b\u6fc0\u589e\u200b - \u200b\u8fde\u63a5\u6c60\u200b\u914d\u7f6e\u200b\u8fc7\u200b\u5c0f\u200b</p> <p>\u200b\u89e3\u51b3\u65b9\u6848\u200b:</p> <pre><code>from chronflow import Scheduler, SchedulerConfig\n\n# \u200b\u589e\u52a0\u200b\u8fde\u63a5\u6c60\u200b\u5927\u5c0f\u200b\nconfig = SchedulerConfig(\n    backend_type=\"redis\",\n    redis={\"max_connections\": 50},  # \u200b\u589e\u52a0\u200b\u8fde\u63a5\u6c60\u200b\n    max_workers=5,  # \u200b\u51cf\u5c11\u200b worker \u200b\u6570\u91cf\u200b\n)\n\nscheduler = Scheduler(config)\n</code></pre>"},{"location":"guides/integration/#_2","title":"\u6b63\u786e\u200b\u7684\u200b\u96c6\u6210\u200b\u65b9\u5f0f","text":""},{"location":"guides/integration/#a-fastapi-quart-sanic","title":"\u65b9\u5f0f\u200b A: \u200b\u5d4c\u5165\u200b\u5f02\u6b65\u200b\u5e94\u7528\u200b (FastAPI, Quart, Sanic \u200b\u7b49\u200b)","text":"<pre><code>import asyncio\nfrom chronflow import Scheduler, interval\n\n# \u200b\u5b9a\u4e49\u200b\u4efb\u52a1\u200b\n@interval(seconds=30)\nasync def health_check():\n    \"\"\"\u200b\u5065\u5eb7\u68c0\u67e5\u200b\u4efb\u52a1\u200b\"\"\"\n    print(\"\u200b\u6267\u884c\u200b\u5065\u5eb7\u68c0\u67e5\u200b...\")\n\n# \u200b\u5e94\u7528\u200b\u751f\u547d\u5468\u671f\u200b\u7ba1\u7406\u200b\nclass Application:\n    def __init__(self):\n        self.scheduler = Scheduler()\n\n    async def startup(self):\n        \"\"\"\u200b\u5e94\u7528\u200b\u542f\u52a8\u200b\"\"\"\n        # \u200b\u4f5c\u4e3a\u200b\u540e\u53f0\u4efb\u52a1\u200b\u542f\u52a8\u200b\u8c03\u5ea6\u200b\u5668\u200b(\u200b\u4e0d\u200b\u963b\u585e\u200b)\n        asyncio.create_task(self.scheduler.start())\n        print(\"\u200b\u8c03\u5ea6\u200b\u5668\u200b\u5df2\u200b\u542f\u52a8\u200b\")\n\n    async def shutdown(self):\n        \"\"\"\u200b\u5e94\u7528\u200b\u5173\u95ed\u200b\"\"\"\n        await self.scheduler.stop()\n        print(\"\u200b\u8c03\u5ea6\u200b\u5668\u200b\u5df2\u200b\u505c\u6b62\u200b\")\n</code></pre>"},{"location":"guides/integration/#b","title":"\u65b9\u5f0f\u200b B: \u200b\u72ec\u7acb\u200b\u5b88\u62a4\u200b\u8fdb\u7a0b","text":"<pre><code># scheduler_daemon.py\nimport asyncio\nfrom chronflow import Scheduler, interval\n\n@interval(seconds=60)\nasync def cleanup_task():\n    \"\"\"\u200b\u5b9a\u671f\u200b\u6e05\u7406\u200b\u4efb\u52a1\u200b\"\"\"\n    print(\"\u200b\u6267\u884c\u200b\u6e05\u7406\u200b...\")\n\nasync def main():\n    \"\"\"\u200b\u542f\u52a8\u200b\u8c03\u5ea6\u200b\u5668\u200b\u5b88\u62a4\u200b\u8fdb\u7a0b\u200b\"\"\"\n    scheduler = Scheduler()\n\n    # \u200b\u4ee5\u200b\u5b88\u62a4\u200b\u8fdb\u7a0b\u200b\u6a21\u5f0f\u200b\u542f\u52a8\u200b\n    pid = await scheduler.start(daemon=True)\n    print(f\"\u200b\u8c03\u5ea6\u200b\u5668\u200b\u5b88\u62a4\u200b\u8fdb\u7a0b\u200b\u5df2\u200b\u542f\u52a8\u200b,PID: {pid}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>\u200b\u8fd0\u884c\u200b: <pre><code>python scheduler_daemon.py\n</code></pre></p> <p>\u200b\u505c\u6b62\u200b: <pre><code># \u200b\u53d1\u9001\u200b SIGTERM \u200b\u4fe1\u53f7\u200b\nkill -TERM &lt;pid&gt;\n</code></pre></p>"},{"location":"guides/integration/#c","title":"\u65b9\u5f0f\u200b C: \u200b\u524d\u53f0\u200b\u8fd0\u884c\u200b (\u200b\u5f00\u53d1\u200b\u73af\u5883\u200b)","text":"<pre><code># scheduler_foreground.py\nimport asyncio\nfrom chronflow import Scheduler, cron\n\n@cron(\"*/5 * * * * *\")  # \u200b\u6bcf\u200b5\u200b\u79d2\u200b\nasync def log_task():\n    \"\"\"\u200b\u65e5\u5fd7\u200b\u4efb\u52a1\u200b\"\"\"\n    print(\"\u200b\u8bb0\u5f55\u200b\u65e5\u5fd7\u200b...\")\n\nasync def main():\n    \"\"\"\u200b\u524d\u53f0\u200b\u8fd0\u884c\u200b\u8c03\u5ea6\u200b\u5668\u200b\"\"\"\n    scheduler = Scheduler()\n\n    # \u200b\u524d\u53f0\u200b\u8fd0\u884c\u200b(\u200b\u963b\u585e\u200b,\u200b\u53ef\u200b\u901a\u8fc7\u200b Ctrl+C \u200b\u505c\u6b62\u200b)\n    await scheduler.start()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>\u200b\u8fd0\u884c\u200b: <pre><code>python scheduler_foreground.py\n# \u200b\u6309\u200b Ctrl+C \u200b\u4f18\u96c5\u200b\u505c\u6b62\u200b\n</code></pre></p>"},{"location":"guides/integration/#_3","title":"\u914d\u7f6e\u7ba1\u7406","text":""},{"location":"guides/integration/#_4","title":"\u4f7f\u7528\u200b\u914d\u7f6e\u200b\u5bf9\u8c61","text":"<pre><code>from chronflow import Scheduler, SchedulerConfig\n\nconfig = SchedulerConfig(\n    backend_type=\"redis\",\n    max_workers=10,\n    queue_size=1000,\n    timezone=\"Asia/Shanghai\",\n    redis={\n        \"host\": \"localhost\",\n        \"port\": 6379,\n        \"db\": 0,\n        \"max_connections\": 50,\n    },\n)\n\nscheduler = Scheduler(config)\n</code></pre>"},{"location":"guides/integration/#_5","title":"\u4f7f\u7528\u200b\u914d\u7f6e\u6587\u4ef6","text":"<pre><code># config.yaml\nscheduler:\n  backend_type: redis\n  max_workers: 10\n  queue_size: 1000\n  timezone: Asia/Shanghai\n  redis:\n    host: localhost\n    port: 6379\n    db: 0\n    max_connections: 50\n</code></pre> <pre><code>from chronflow import Scheduler, SchedulerConfig\n\n# \u200b\u4ece\u6587\u4ef6\u200b\u52a0\u8f7d\u200b\u914d\u7f6e\u200b\nconfig = SchedulerConfig.from_yaml(\"config.yaml\")\nscheduler = Scheduler(config)\n</code></pre>"},{"location":"guides/integration/#_6","title":"\u4f7f\u7528\u200b\u73af\u5883\u53d8\u91cf","text":"<pre><code>export SCHEDULER__BACKEND_TYPE=redis\nexport SCHEDULER__MAX_WORKERS=10\nexport SCHEDULER__REDIS__HOST=localhost\nexport SCHEDULER__REDIS__PORT=6379\n</code></pre> <pre><code>from chronflow import Scheduler, SchedulerConfig\n\n# \u200b\u4ece\u200b\u73af\u5883\u53d8\u91cf\u200b\u52a0\u8f7d\u200b\nconfig = SchedulerConfig()\nscheduler = Scheduler(config)\n</code></pre>"},{"location":"guides/integration/#_7","title":"\u76d1\u63a7\u200b\u548c\u200b\u8c03\u8bd5","text":""},{"location":"guides/integration/#_8","title":"\u67e5\u770b\u200b\u8c03\u5ea6\u200b\u5668\u200b\u72b6\u6001","text":"<pre><code>async def monitor_scheduler(scheduler: Scheduler):\n    \"\"\"\u200b\u76d1\u63a7\u200b\u8c03\u5ea6\u200b\u5668\u200b\u72b6\u6001\u200b\"\"\"\n    stats = await scheduler.get_stats()\n    print(f\"\u200b\u8fd0\u884c\u200b\u72b6\u6001\u200b: {stats['running']}\")\n    print(f\"\u200b\u603b\u4efb\u52a1\u200b\u6570\u200b: {stats['total_tasks']}\")\n    print(f\"\u200b\u961f\u5217\u200b\u5927\u5c0f\u200b: {stats['queue_size']}\")\n    print(f\"\u200b\u6d3b\u8dc3\u200b workers: {stats['active_workers']}\")\n</code></pre>"},{"location":"guides/integration/#_9","title":"\u67e5\u770b\u200b\u4efb\u52a1\u200b\u5217\u8868","text":"<pre><code>def list_tasks(scheduler: Scheduler):\n    \"\"\"\u200b\u5217\u51fa\u200b\u6240\u6709\u200b\u4efb\u52a1\u200b\u53ca\u5176\u200b\u72b6\u6001\u200b\"\"\"\n    tasks = scheduler.list_tasks()\n    for task in tasks:\n        print(f\"{task['name']}\")\n        print(f\"  \u200b\u72b6\u6001\u200b: {task['status']}\")\n        print(f\"  \u200b\u603b\u200b\u6267\u884c\u200b: {task['total_runs']}\")\n        print(f\"  \u200b\u6210\u529f\u200b: {task['successful_runs']}\")\n        print(f\"  \u200b\u5931\u8d25\u200b: {task['failed_runs']}\")\n        print(f\"  \u200b\u6210\u529f\u7387\u200b: {task['success_rate']:.1f}%\")\n</code></pre>"},{"location":"guides/integration/#_10","title":"\u4efb\u52a1\u200b\u63a7\u5236","text":"<pre><code># \u200b\u6682\u505c\u200b\u4efb\u52a1\u200b\nscheduler.pause_task(\"my_task\")\n\n# \u200b\u6062\u590d\u200b\u4efb\u52a1\u200b\nscheduler.resume_task(\"my_task\")\n\n# \u200b\u6309\u200b\u72b6\u6001\u200b\u7b5b\u9009\u200b\nactive_tasks = scheduler.get_task_by_status(\"running\")\n\n# \u200b\u6309\u200b\u6807\u7b7e\u200b\u7b5b\u9009\u200b\ntagged_tasks = scheduler.get_task_by_tag(\"important\")\n</code></pre>"},{"location":"guides/integration/#_11","title":"\u65e5\u5fd7\u200b\u914d\u7f6e","text":""},{"location":"guides/integration/#structlog","title":"\u4f7f\u7528\u200b Structlog","text":"<pre><code>from chronflow import Scheduler, StructlogAdapter\n\nscheduler = Scheduler(logger=StructlogAdapter())\n</code></pre>"},{"location":"guides/integration/#loguru","title":"\u4f7f\u7528\u200b Loguru","text":"<pre><code>from chronflow import Scheduler, LoguruAdapter\nfrom loguru import logger\n\n# \u200b\u914d\u7f6e\u200b\u65e5\u5fd7\u200b\u8f93\u51fa\u200b\u5230\u200b\u6587\u4ef6\u200b\nlogger.add(\"scheduler.log\", rotation=\"1 day\", retention=\"7 days\")\n\nscheduler = Scheduler(logger=LoguruAdapter())\n</code></pre>"},{"location":"guides/integration/#python-logging","title":"\u4f7f\u7528\u200b Python \u200b\u6807\u51c6\u200b\u5e93\u200b logging","text":"<pre><code>import logging\nfrom chronflow import Scheduler, StdlibAdapter\n\n# \u200b\u914d\u7f6e\u200b logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler(\"scheduler.log\"),\n        logging.StreamHandler(),\n    ]\n)\n\nscheduler = Scheduler(logger=StdlibAdapter())\n</code></pre>"},{"location":"guides/integration/#_12","title":"\u7981\u7528\u200b\u65e5\u5fd7","text":"<pre><code>from chronflow import Scheduler, NoOpAdapter\n\nscheduler = Scheduler(logger=NoOpAdapter())\n</code></pre>"},{"location":"guides/integration/#_13","title":"\u6027\u80fd\u200b\u4f18\u5316","text":""},{"location":"guides/integration/#1-worker","title":"1. \u200b\u5408\u7406\u914d\u7f6e\u200b Worker \u200b\u6570\u91cf","text":"<pre><code># CPU \u200b\u5bc6\u96c6\u578b\u200b\u4efb\u52a1\u200b\nconfig = SchedulerConfig(max_workers=cpu_count())\n\n# I/O \u200b\u5bc6\u96c6\u578b\u200b\u4efb\u52a1\u200b\nconfig = SchedulerConfig(max_workers=cpu_count() * 2)\n</code></pre>"},{"location":"guides/integration/#2","title":"2. \u200b\u9009\u62e9\u200b\u5408\u9002\u200b\u7684\u200b\u540e\u200b\u7aef","text":"<ul> <li>Memory: \u200b\u96f6\u200b\u4f9d\u8d56\u200b,\u200b\u9002\u5408\u200b\u8f7b\u91cf\u7ea7\u200b\u5e94\u7528\u200b</li> <li>SQLite: \u200b\u672c\u5730\u200b\u6301\u4e45\u200b\u5316\u200b,\u200b\u9002\u5408\u200b\u5355\u673a\u200b\u90e8\u7f72\u200b</li> <li>Redis: \u200b\u5206\u5e03\u5f0f\u200b\u90e8\u7f72\u200b,\u200b\u9002\u5408\u200b\u9ad8\u6027\u80fd\u200b\u573a\u666f\u200b</li> <li>RabbitMQ: \u200b\u9ad8\u53ef\u9760\u6027\u200b,\u200b\u9002\u5408\u200b\u5173\u952e\u200b\u4efb\u52a1\u200b</li> </ul>"},{"location":"guides/integration/#3_1","title":"3. \u200b\u8c03\u6574\u200b\u961f\u5217\u200b\u5927\u5c0f","text":"<pre><code># \u200b\u4efb\u52a1\u91cf\u200b\u5927\u65f6\u200b\u589e\u52a0\u200b\u961f\u5217\u200b\u5927\u5c0f\u200b\nconfig = SchedulerConfig(queue_size=5000)\n</code></pre>"},{"location":"guides/integration/#4","title":"4. \u200b\u51cf\u5c11\u200b\u65e5\u5fd7\u200b\u91cf","text":"<pre><code>config = SchedulerConfig(\n    enable_logging=True,\n    log_task_success=False,  # \u200b\u4e0d\u200b\u8bb0\u5f55\u200b\u6210\u529f\u200b\u4efb\u52a1\u200b\n)\n</code></pre>"},{"location":"guides/integration/#_14","title":"\u6700\u4f73\u200b\u5b9e\u8df5","text":"<ol> <li>\u200b\u73af\u5883\u200b\u9694\u79bb\u200b: \u200b\u5f00\u53d1\u200b\u73af\u5883\u200b\u4f7f\u7528\u200b\u524d\u53f0\u200b\u6a21\u5f0f\u200b,\u200b\u751f\u4ea7\u200b\u73af\u5883\u200b\u4f7f\u7528\u200b\u5b88\u62a4\u200b\u8fdb\u7a0b\u200b</li> <li>\u200b\u8d44\u6e90\u200b\u9650\u5236\u200b: \u200b\u6839\u636e\u200b\u4efb\u52a1\u200b\u8d1f\u8f7d\u200b\u8c03\u6574\u200b <code>max_workers</code> \u200b\u548c\u200b\u8fde\u63a5\u6c60\u200b\u5927\u5c0f\u200b</li> <li>\u200b\u9519\u8bef\u5904\u7406\u200b: \u200b\u5728\u200b\u4efb\u52a1\u200b\u51fd\u6570\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u5f02\u5e38\u200b\u5904\u7406\u200b\u548c\u200b\u91cd\u8bd5\u200b\u903b\u8f91\u200b</li> <li>\u200b\u65e5\u5fd7\u200b\u914d\u7f6e\u200b: \u200b\u914d\u7f6e\u200b\u65e5\u5fd7\u200b\u6587\u4ef6\u200b\u8f93\u51fa\u200b,\u200b\u65b9\u4fbf\u200b\u95ee\u9898\u200b\u6392\u67e5\u200b</li> <li>\u200b\u76d1\u63a7\u200b\u544a\u8b66\u200b: \u200b\u5b9a\u671f\u68c0\u67e5\u200b\u8c03\u5ea6\u200b\u5668\u200b\u72b6\u6001\u200b\u548c\u200b\u4efb\u52a1\u200b\u6267\u884c\u200b\u60c5\u51b5\u200b</li> <li>\u200b\u4f18\u96c5\u200b\u505c\u6b62\u200b: \u200b\u4f7f\u7528\u200b\u4fe1\u53f7\u5904\u7406\u200b\u6216\u200b <code>stop()</code> \u200b\u65b9\u6cd5\u200b\u6b63\u786e\u200b\u505c\u6b62\u200b\u8c03\u5ea6\u200b\u5668\u200b</li> </ol>"},{"location":"guides/integration/#_15","title":"\u6545\u969c\u200b\u6392\u67e5","text":""},{"location":"guides/integration/#_16","title":"\u68c0\u67e5\u200b\u4efb\u52a1\u200b\u662f\u5426\u200b\u91cd\u590d\u200b\u6ce8\u518c","text":"<pre><code>from chronflow.decorators import _pending_tasks\n\n# \u200b\u68c0\u67e5\u200b\u5f85\u200b\u6ce8\u518c\u200b\u4efb\u52a1\u200b\nprint([t.config.name for t in _pending_tasks])\n\n# \u200b\u68c0\u67e5\u200b\u5df2\u200b\u6ce8\u518c\u200b\u4efb\u52a1\u200b\ntasks = scheduler.list_tasks()\nprint([t['name'] for t in tasks])\n</code></pre>"},{"location":"guides/integration/#redis","title":"\u68c0\u67e5\u200b Redis \u200b\u8fde\u63a5\u6570","text":"<pre><code># \u200b\u67e5\u770b\u200b\u5f53\u524d\u200b\u8fde\u63a5\u6570\u200b\nredis-cli CLIENT LIST | wc -l\n\n# \u200b\u67e5\u770b\u200b\u6700\u5927\u200b\u8fde\u63a5\u6570\u200b\nredis-cli CONFIG GET maxclients\n</code></pre>"},{"location":"guides/integration/#_17","title":"\u67e5\u770b\u200b\u8fdb\u7a0b\u200b\u72b6\u6001","text":"<pre><code># \u200b\u67e5\u770b\u200b\u8c03\u5ea6\u200b\u5668\u200b\u8fdb\u7a0b\u200b\nps aux | grep python | grep scheduler\n\n# \u200b\u67e5\u770b\u200b\u8fdb\u7a0b\u200b CPU/\u200b\u5185\u5b58\u200b\u5360\u7528\u200b\ntop -p &lt;pid&gt;\n</code></pre>"},{"location":"guides/integration/#v021","title":"\u5347\u7ea7\u200b\u5230\u200b v0.2.1","text":"<p>\u200b\u4ece\u200b\u65e7\u200b\u7248\u672c\u5347\u7ea7\u200b\u65f6\u200b,\u200b\u9700\u8981\u200b\u6ce8\u610f\u200b:</p> <ol> <li>\u200b\u65e0\u200b\u7834\u574f\u6027\u200b\u53d8\u66f4\u200b - \u200b\u5b8c\u5168\u200b\u5411\u200b\u540e\u200b\u517c\u5bb9\u200b</li> <li>\u200b\u81ea\u52a8\u200b\u4fee\u590d\u200b - \u200b\u4fe1\u53f7\u5904\u7406\u200b\u548c\u200b\u65e5\u5fd7\u200b\u9519\u8bef\u200b\u5df2\u200b\u81ea\u52a8\u200b\u4fee\u590d\u200b</li> <li>\u200b\u6d4b\u8bd5\u200b\u9a8c\u8bc1\u200b - \u200b\u5347\u7ea7\u200b\u540e\u200b\u8fd0\u884c\u200b\u6d4b\u8bd5\u200b\u786e\u4fdd\u200b\u6b63\u5e38\u200b</li> </ol> <pre><code># \u200b\u5347\u7ea7\u200b Chronflow\npip install --upgrade chronflow\n\n# \u200b\u8fd0\u884c\u200b\u6d4b\u8bd5\u200b\npytest tests/\n</code></pre> <p>\u200b\u66f4\u200b\u591a\u200b\u8be6\u60c5\u8bf7\u200b\u53c2\u8003\u200b: - \u200b\u66f4\u65b0\u200b\u65e5\u5fd7\u200b - API \u200b\u6587\u6863\u200b - \u200b\u5feb\u901f\u200b\u5f00\u59cb\u200b</p>"},{"location":"guides/logging/","title":"\u65e5\u5fd7\u200b\u7cfb\u7edf","text":"<p>chronflow \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u53ef\u200b\u63d2\u62d4\u200b\u7684\u200b\u65e5\u5fd7\u200b\u7cfb\u7edf\u200b\uff0c\u200b\u5141\u8bb8\u200b\u4f60\u200b\u4f7f\u7528\u200b\u81ea\u5df1\u200b\u559c\u6b22\u200b\u7684\u200b\u65e5\u5fd7\u200b\u5e93\u200b\u3002</p>"},{"location":"guides/logging/#_2","title":"\u652f\u6301\u200b\u7684\u200b\u65e5\u5fd7\u200b\u5e93","text":""},{"location":"guides/logging/#structlog","title":"Structlog (\u200b\u9ed8\u8ba4\u200b)","text":"<p>\u200b\u5982\u679c\u200b\u5b89\u88c5\u200b\u4e86\u200b structlog\uff0cchronflow \u200b\u4f1a\u200b\u9ed8\u8ba4\u200b\u4f7f\u7528\u200b\u5b83\u200b\uff1a</p> <pre><code>from chronflow import Scheduler\n\n# \u200b\u81ea\u52a8\u200b\u4f7f\u7528\u200b structlog\uff08\u200b\u5982\u679c\u200b\u5df2\u200b\u5b89\u88c5\u200b\uff09\nscheduler = Scheduler()\n</code></pre> <p>\u200b\u5b89\u88c5\u200b structlog\uff1a</p> <pre><code>pip install chronflow[structlog]\n</code></pre>"},{"location":"guides/logging/#loguru","title":"Loguru","text":"<p>\u200b\u4f7f\u7528\u200b loguru \u200b\u4f5c\u4e3a\u200b\u65e5\u5fd7\u200b\u5e93\u200b\uff1a</p> <pre><code>from loguru import logger\nfrom chronflow import Scheduler\nfrom chronflow.logging import LoguruAdapter\n\n# \u200b\u914d\u7f6e\u200b loguru\nlogger.add(\"scheduler.log\", rotation=\"1 day\", retention=\"7 days\")\n\n# \u200b\u4f7f\u7528\u200b loguru \u200b\u9002\u914d\u5668\u200b\nscheduler = Scheduler(logger=LoguruAdapter(logger))\n</code></pre> <p>\u200b\u5b89\u88c5\u200b loguru\uff1a</p> <pre><code>pip install chronflow[loguru]\n</code></pre>"},{"location":"guides/logging/#python-logging","title":"Python \u200b\u6807\u51c6\u200b\u5e93\u200b logging","text":"<p>\u200b\u4f7f\u7528\u200b Python \u200b\u5185\u7f6e\u200b\u7684\u200b logging \u200b\u6a21\u5757\u200b\uff1a</p> <pre><code>import logging\nfrom chronflow import Scheduler\nfrom chronflow.logging import StdlibAdapter\n\n# \u200b\u914d\u7f6e\u200b\u6807\u51c6\u200b\u5e93\u200b\u65e5\u5fd7\u200b\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n)\nlogger = logging.getLogger(\"chronflow\")\n\n# \u200b\u4f7f\u7528\u200b\u6807\u51c6\u200b\u5e93\u200b\u9002\u914d\u5668\u200b\nscheduler = Scheduler(logger=StdlibAdapter(logger))\n</code></pre>"},{"location":"guides/logging/#_3","title":"\u7981\u7528\u200b\u65e5\u5fd7","text":"<p>\u200b\u5982\u679c\u200b\u4e0d\u200b\u9700\u8981\u200b\u65e5\u5fd7\u200b\u8f93\u51fa\u200b\uff1a</p> <pre><code>from chronflow import Scheduler\nfrom chronflow.logging import NoOpAdapter\n\nscheduler = Scheduler(logger=NoOpAdapter())\n</code></pre>"},{"location":"guides/logging/#_4","title":"\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u9002\u914d\u5668","text":"<p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u81ea\u5df1\u200b\u7684\u200b\u65e5\u5fd7\u200b\u9002\u914d\u5668\u200b\uff1a</p> <pre><code>from chronflow.logging import LoggerAdapter\n\nclass MyCustomLogger(LoggerAdapter):\n    \"\"\"\u200b\u81ea\u5b9a\u4e49\u200b\u65e5\u5fd7\u200b\u9002\u914d\u5668\u200b\u3002\"\"\"\n\n    def __init__(self, logger):\n        self._logger = logger\n\n    def debug(self, message: str, **kwargs):\n        self._logger.debug(f\"{message} - {kwargs}\")\n\n    def info(self, message: str, **kwargs):\n        self._logger.info(f\"{message} - {kwargs}\")\n\n    def warning(self, message: str, **kwargs):\n        self._logger.warning(f\"{message} - {kwargs}\")\n\n    def error(self, message: str, **kwargs):\n        self._logger.error(f\"{message} - {kwargs}\")\n\n    def critical(self, message: str, **kwargs):\n        self._logger.critical(f\"{message} - {kwargs}\")\n\n# \u200b\u4f7f\u7528\u200b\u81ea\u5b9a\u4e49\u200b\u9002\u914d\u5668\u200b\nscheduler = Scheduler(logger=MyCustomLogger(my_logger))\n</code></pre>"},{"location":"guides/logging/#_5","title":"\u65e5\u5fd7\u200b\u7ea7\u522b\u200b\u914d\u7f6e","text":"<p>\u200b\u901a\u8fc7\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u63a7\u5236\u200b\u65e5\u5fd7\u200b\u7ea7\u522b\u200b\uff1a</p> <pre><code># config.toml\nenable_logging = true\nlog_level = \"DEBUG\"  # DEBUG, INFO, WARNING, ERROR, CRITICAL\n</code></pre> <pre><code>from chronflow import Scheduler, SchedulerConfig\n\nconfig = SchedulerConfig.from_file(\"config.toml\")\nscheduler = Scheduler(config=config)\n</code></pre>"},{"location":"guides/logging/#_6","title":"\u65e5\u5fd7\u200b\u8f93\u51fa\u200b\u793a\u4f8b","text":"<p>\u200b\u5178\u578b\u200b\u7684\u200b\u65e5\u5fd7\u200b\u8f93\u51fa\u200b\uff1a</p> <pre><code>2025-10-22 10:30:00 - chronflow - INFO - Scheduler started\n2025-10-22 10:30:05 - chronflow - INFO - Task 'health_check' scheduled\n2025-10-22 10:30:05 - chronflow - INFO - Task 'health_check' started\n2025-10-22 10:30:06 - chronflow - INFO - Task 'health_check' completed in 1.23s\n2025-10-22 10:30:10 - chronflow - WARNING - Task 'sync_data' failed, retry attempt 1/3\n2025-10-22 10:30:12 - chronflow - INFO - Task 'sync_data' completed after retry\n</code></pre>"},{"location":"guides/logging/#_7","title":"\u65e5\u5fd7\u200b\u4e0a\u4e0b\u6587","text":"<p>\u200b\u65e5\u5fd7\u200b\u9002\u914d\u5668\u200b\u652f\u6301\u200b\u7ed3\u6784\u5316\u200b\u4e0a\u4e0b\u6587\u200b\u6570\u636e\u200b\uff1a</p> <pre><code>from loguru import logger\nfrom chronflow.logging import LoguruAdapter\n\nlogger.configure(\n    handlers=[\n        {\n            \"sink\": \"scheduler.log\",\n            \"format\": \"{time} {level} {message} {extra}\",\n            \"serialize\": True  # JSON \u200b\u683c\u5f0f\u200b\n        }\n    ]\n)\n\nscheduler = Scheduler(logger=LoguruAdapter(logger))\n</code></pre> <p>\u200b\u8fd9\u6837\u200b\u6bcf\u6761\u200b\u65e5\u5fd7\u200b\u90fd\u200b\u4f1a\u200b\u5305\u542b\u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b\u3001\u200b\u6267\u884c\u200b\u65f6\u95f4\u200b\u7b49\u200b\u7ed3\u6784\u5316\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"guides/metrics/","title":"\u6027\u80fd\u200b\u76d1\u63a7\u200b\u548c\u200b\u6307\u6807\u200b\u5bfc\u51fa","text":"<p>chronflow \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u5185\u7f6e\u200b\u7684\u200b\u6027\u80fd\u6307\u6807\u200b\u6536\u96c6\u200b\u529f\u80fd\u200b,\u200b\u53ef\u4ee5\u200b\u5e2e\u52a9\u200b\u4f60\u200b\u76d1\u63a7\u200b\u4efb\u52a1\u200b\u6267\u884c\u200b\u60c5\u51b5\u200b,\u200b\u5206\u6790\u200b\u6027\u80fd\u200b\u74f6\u9888\u200b,\u200b\u5e76\u200b\u4e0e\u200b Prometheus \u200b\u7b49\u200b\u76d1\u63a7\u200b\u7cfb\u7edf\u96c6\u6210\u200b\u3002</p>"},{"location":"guides/metrics/#_2","title":"\u5feb\u901f\u200b\u5f00\u59cb","text":""},{"location":"guides/metrics/#_3","title":"\u542f\u7528\u200b\u6307\u6807\u200b\u6536\u96c6","text":"<p>\u200b\u5728\u200b\u521b\u5efa\u200b\u8c03\u5ea6\u200b\u5668\u65f6\u200b,\u200b\u8bbe\u7f6e\u200b <code>enable_metrics=True</code> \u200b\u5373\u53ef\u200b\u542f\u7528\u200b\u6307\u6807\u200b\u6536\u96c6\u200b:</p> <pre><code>from chronflow import Scheduler\n\n# \u200b\u521b\u5efa\u200b\u542f\u7528\u200b\u6307\u6807\u200b\u7684\u200b\u8c03\u5ea6\u200b\u5668\u200b\nscheduler = Scheduler(enable_metrics=True)\n</code></pre>"},{"location":"guides/metrics/#_4","title":"\u83b7\u53d6\u200b\u6027\u80fd\u6307\u6807","text":"<pre><code># \u200b\u83b7\u53d6\u200b\u6027\u80fd\u6307\u6807\u200b\nmetrics = scheduler.get_metrics()\n\nprint(f\"\u200b\u603b\u200b\u6267\u884c\u200b\u6b21\u6570\u200b: {metrics['total_executions']}\")\nprint(f\"\u200b\u6210\u529f\u7387\u200b: {metrics['success_rate']:.2%}\")\nprint(f\"\u200b\u5e73\u5747\u200b\u6267\u884c\u200b\u65f6\u95f4\u200b: {metrics['average_duration']:.3f}\u200b\u79d2\u200b\")\n</code></pre>"},{"location":"guides/metrics/#_5","title":"\u6307\u6807\u200b\u8bf4\u660e","text":""},{"location":"guides/metrics/#_6","title":"\u5168\u5c40\u200b\u6307\u6807","text":"<p><code>get_metrics()</code> \u200b\u8fd4\u56de\u200b\u7684\u200b\u5b57\u5178\u200b\u5305\u542b\u200b\u4ee5\u4e0b\u200b\u5168\u5c40\u200b\u6307\u6807\u200b:</p> <ul> <li><code>uptime_seconds</code>: \u200b\u8c03\u5ea6\u200b\u5668\u200b\u8fd0\u884c\u200b\u65f6\u200b\u957f\u200b(\u200b\u79d2\u200b)</li> <li><code>total_executions</code>: \u200b\u603b\u200b\u6267\u884c\u200b\u6b21\u6570\u200b</li> <li><code>successful_executions</code>: \u200b\u6210\u529f\u200b\u6267\u884c\u200b\u6b21\u6570\u200b</li> <li><code>failed_executions</code>: \u200b\u5931\u8d25\u200b\u6267\u884c\u200b\u6b21\u6570\u200b</li> <li><code>success_rate</code>: \u200b\u6210\u529f\u7387\u200b (0.0 ~ 1.0)</li> <li><code>total_duration</code>: \u200b\u603b\u200b\u6267\u884c\u200b\u65f6\u95f4\u200b(\u200b\u79d2\u200b)</li> <li><code>average_duration</code>: \u200b\u5e73\u5747\u200b\u6267\u884c\u200b\u65f6\u95f4\u200b(\u200b\u79d2\u200b)</li> <li><code>executions_per_second</code>: \u200b\u6bcf\u79d2\u200b\u6267\u884c\u200b\u6b21\u6570\u200b</li> </ul>"},{"location":"guides/metrics/#_7","title":"\u4efb\u52a1\u200b\u7ea7\u522b\u200b\u6307\u6807","text":"<p>\u200b\u6bcf\u4e2a\u200b\u4efb\u52a1\u200b\u90fd\u200b\u6709\u200b\u72ec\u7acb\u200b\u7684\u200b\u7edf\u8ba1\u200b\u4fe1\u606f\u200b:</p> <pre><code>metrics = scheduler.get_metrics()\n\nfor task_name, stats in metrics[\"task_stats\"].items():\n    print(f\"\u200b\u4efb\u52a1\u200b: {task_name}\")\n    print(f\"  \u200b\u6267\u884c\u200b\u6b21\u6570\u200b: {stats['executions']}\")\n    print(f\"  \u200b\u6210\u529f\u200b\u6b21\u6570\u200b: {stats['successes']}\")\n    print(f\"  \u200b\u5931\u8d25\u200b\u6b21\u6570\u200b: {stats['failures']}\")\n    print(f\"  \u200b\u6210\u529f\u7387\u200b: {stats['success_rate']:.2%}\")\n    print(f\"  \u200b\u5e73\u5747\u200b\u65f6\u200b\u957f\u200b: {stats['average_duration']:.3f}\u200b\u79d2\u200b\")\n    print(f\"  \u200b\u6700\u200b\u5c0f\u65f6\u200b\u957f\u200b: {stats['min_duration']:.3f}\u200b\u79d2\u200b\")\n    print(f\"  \u200b\u6700\u5927\u200b\u65f6\u200b\u957f\u200b: {stats['max_duration']:.3f}\u200b\u79d2\u200b\")\n</code></pre>"},{"location":"guides/metrics/#prometheus","title":"Prometheus \u200b\u96c6\u6210","text":""},{"location":"guides/metrics/#prometheus_1","title":"\u5bfc\u51fa\u200b Prometheus \u200b\u683c\u5f0f","text":"<p>chronflow \u200b\u652f\u6301\u200b\u5bfc\u51fa\u200b\u6807\u51c6\u200b\u7684\u200b Prometheus \u200b\u6587\u672c\u683c\u5f0f\u200b:</p> <pre><code># \u200b\u5bfc\u51fa\u200b Prometheus \u200b\u683c\u5f0f\u200b\u7684\u200b\u6307\u6807\u200b\nprometheus_text = scheduler.export_prometheus_metrics()\nprint(prometheus_text)\n</code></pre> <p>\u200b\u8f93\u51fa\u200b\u793a\u4f8b\u200b:</p> <pre><code># HELP chronflow_uptime_seconds Uptime in seconds\n# TYPE chronflow_uptime_seconds gauge\nchronflow_uptime_seconds 125.5\n\n# HELP chronflow_executions_total Total task executions\n# TYPE chronflow_executions_total counter\nchronflow_executions_total 150\n\n# HELP chronflow_executions_success Successful executions\n# TYPE chronflow_executions_success counter\nchronflow_executions_success 145\n\n# HELP chronflow_executions_failed Failed executions\n# TYPE chronflow_executions_failed counter\nchronflow_executions_failed 5\n\n# HELP chronflow_task_executions Task executions by name\n# TYPE chronflow_task_executions counter\nchronflow_task_executions{task=\"my_task\"} 75\n\n# HELP chronflow_task_duration_seconds Task duration by name\n# TYPE chronflow_task_duration_seconds gauge\nchronflow_task_duration_seconds{task=\"my_task\",stat=\"avg\"} 0.523\nchronflow_task_duration_seconds{task=\"my_task\",stat=\"min\"} 0.105\nchronflow_task_duration_seconds{task=\"my_task\",stat=\"max\"} 1.250\n</code></pre>"},{"location":"guides/metrics/#http","title":"\u521b\u5efa\u200b HTTP \u200b\u7aef\u70b9","text":"<p>\u200b\u4f7f\u7528\u200b <code>aiohttp</code> \u200b\u521b\u5efa\u200b Prometheus \u200b\u6293\u53d6\u200b\u7aef\u70b9\u200b:</p> <pre><code>from aiohttp import web\nfrom chronflow import Scheduler\n\nscheduler = Scheduler(enable_metrics=True)\n\n# \u200b\u5b9a\u4e49\u200b\u6307\u6807\u200b\u7aef\u70b9\u200b\nasync def metrics_handler(request):\n    \"\"\"\u200b\u8fd4\u56de\u200b Prometheus \u200b\u683c\u5f0f\u200b\u7684\u200b\u6307\u6807\u200b\u3002\"\"\"\n    metrics_text = scheduler.export_prometheus_metrics()\n    return web.Response(text=metrics_text or \"\", content_type=\"text/plain\")\n\n# \u200b\u521b\u5efa\u200b web \u200b\u5e94\u7528\u200b\napp = web.Application()\napp.router.add_get(\"/metrics\", metrics_handler)\n\n# \u200b\u542f\u52a8\u200b\u670d\u52a1\u5668\u200b\nrunner = web.AppRunner(app)\nawait runner.setup()\nsite = web.TCPSite(runner, \"localhost\", 9090)\nawait site.start()\n\nprint(\"Prometheus \u200b\u7aef\u70b9\u200b: http://localhost:9090/metrics\")\n</code></pre>"},{"location":"guides/metrics/#prometheus_2","title":"\u914d\u7f6e\u200b Prometheus \u200b\u6293\u53d6","text":"<p>\u200b\u5728\u200b <code>prometheus.yml</code> \u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u6293\u53d6\u200b\u914d\u7f6e\u200b:</p> <pre><code>scrape_configs:\n  - job_name: 'chronflow'\n    scrape_interval: 15s\n    static_configs:\n      - targets: ['localhost:9090']\n</code></pre>"},{"location":"guides/metrics/#_8","title":"\u6307\u6807\u200b\u7ba1\u7406","text":""},{"location":"guides/metrics/#_9","title":"\u91cd\u7f6e\u200b\u6307\u6807","text":"<p>\u200b\u5728\u200b\u67d0\u4e9b\u200b\u573a\u666f\u200b\u4e0b\u200b,\u200b\u4f60\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u91cd\u7f6e\u200b\u6307\u6807\u200b(\u200b\u4f8b\u5982\u200b\u6d4b\u8bd5\u200b\u6216\u200b\u5b9a\u671f\u200b\u6e05\u7406\u200b):</p> <pre><code># \u200b\u91cd\u7f6e\u200b\u6240\u6709\u200b\u6307\u6807\u200b\nscheduler.reset_metrics()\n</code></pre> <p>\u200b\u91cd\u7f6e\u200b\u540e\u200b,\u200b\u6240\u6709\u200b\u8ba1\u6570\u5668\u200b\u548c\u200b\u7edf\u8ba1\u200b\u4fe1\u606f\u200b\u5c06\u200b\u5f52\u96f6\u200b,\u200b\u5f00\u59cb\u200b\u65f6\u95f4\u200b\u4f1a\u200b\u66f4\u65b0\u200b\u4e3a\u200b\u5f53\u524d\u200b\u65f6\u95f4\u200b\u3002</p>"},{"location":"guides/metrics/#_10","title":"\u68c0\u67e5\u200b\u662f\u5426\u200b\u542f\u7528","text":"<pre><code>if scheduler.metrics_collector is not None:\n    print(\"\u200b\u6307\u6807\u200b\u6536\u96c6\u200b\u5df2\u200b\u542f\u7528\u200b\")\n    metrics = scheduler.get_metrics()\nelse:\n    print(\"\u200b\u6307\u6807\u200b\u6536\u96c6\u200b\u672a\u200b\u542f\u7528\u200b\")\n</code></pre>"},{"location":"guides/metrics/#_11","title":"\u6027\u80fd\u200b\u8003\u8651","text":""},{"location":"guides/metrics/#_12","title":"\u5f00\u9500","text":"<p>\u200b\u6307\u6807\u200b\u6536\u96c6\u200b\u7684\u200b\u6027\u80fd\u200b\u5f00\u9500\u200b\u975e\u5e38\u200b\u5c0f\u200b:</p> <ul> <li>\u200b\u6bcf\u6b21\u200b\u4efb\u52a1\u200b\u6267\u884c\u200b\u589e\u52a0\u200b\u7ea6\u200b 0.1-0.5 \u200b\u5fae\u79d2\u200b\u5f00\u9500\u200b</li> <li>\u200b\u5185\u5b58\u200b\u5f00\u9500\u200b:\u200b\u6bcf\u4e2a\u200b\u4efb\u52a1\u200b\u7ea6\u200b 200 \u200b\u5b57\u8282\u200b(\u200b\u7528\u4e8e\u200b\u7edf\u8ba1\u200b\u4fe1\u606f\u200b)</li> <li>\u200b\u5bf9\u4e8e\u200b\u5927\u591a\u6570\u200b\u5e94\u7528\u200b,\u200b\u5f00\u9500\u200b\u53ef\u4ee5\u200b\u5ffd\u7565\u4e0d\u8ba1\u200b</li> </ul>"},{"location":"guides/metrics/#_13","title":"\u6700\u4f73\u200b\u5b9e\u8df5","text":"<ol> <li>\u200b\u751f\u4ea7\u200b\u73af\u5883\u200b\u5efa\u8bae\u200b\u542f\u7528\u200b: \u200b\u6307\u6807\u200b\u5bf9\u4e8e\u200b\u76d1\u63a7\u200b\u548c\u200b\u6545\u969c\u200b\u6392\u67e5\u200b\u975e\u5e38\u200b\u6709\u200b\u4ef7\u503c\u200b</li> <li>\u200b\u5b9a\u671f\u200b\u5bfc\u51fa\u200b: \u200b\u5c06\u200b\u6307\u6807\u200b\u6570\u636e\u200b\u5bfc\u51fa\u200b\u5230\u200b\u76d1\u63a7\u200b\u7cfb\u7edf\u200b,\u200b\u907f\u514d\u200b\u5185\u5b58\u200b\u79ef\u7d2f\u200b</li> <li>\u200b\u5173\u6ce8\u200b\u5173\u952e\u200b\u6307\u6807\u200b: \u200b\u91cd\u70b9\u200b\u5173\u6ce8\u200b\u6210\u529f\u7387\u200b\u3001\u200b\u5e73\u5747\u200b\u6267\u884c\u200b\u65f6\u95f4\u200b\u3001\u200b\u5931\u8d25\u200b\u6b21\u6570\u200b</li> <li>\u200b\u8bbe\u7f6e\u200b\u544a\u8b66\u200b: \u200b\u57fa\u4e8e\u200b\u6307\u6807\u200b\u8bbe\u7f6e\u200b\u544a\u8b66\u200b\u89c4\u5219\u200b(\u200b\u5982\u200b\u5931\u8d25\u7387\u200b\u8d85\u8fc7\u200b\u9608\u503c\u200b)</li> </ol>"},{"location":"guides/metrics/#_14","title":"\u5b8c\u6574\u200b\u793a\u4f8b","text":"<pre><code>import asyncio\nfrom chronflow import Scheduler\nfrom chronflow.decorators import interval\n\nasync def main():\n    # \u200b\u521b\u5efa\u200b\u542f\u7528\u200b\u6307\u6807\u200b\u7684\u200b\u8c03\u5ea6\u200b\u5668\u200b\n    scheduler = Scheduler(enable_metrics=True)\n\n    # \u200b\u5b9a\u4e49\u200b\u4efb\u52a1\u200b\n    @interval(seconds=5)\n    async def health_check():\n        \"\"\"\u200b\u5065\u5eb7\u68c0\u67e5\u200b\u4efb\u52a1\u200b\u3002\"\"\"\n        await asyncio.sleep(0.1)\n        return \"healthy\"\n\n    @interval(seconds=10)\n    async def data_sync():\n        \"\"\"\u200b\u6570\u636e\u200b\u540c\u6b65\u200b\u4efb\u52a1\u200b\u3002\"\"\"\n        await asyncio.sleep(1.5)\n        return \"synced\"\n\n    # \u200b\u6ce8\u518c\u200b\u4efb\u52a1\u200b\n    scheduler.register_task(health_check.__chronflow_task__)\n    scheduler.register_task(data_sync.__chronflow_task__)\n\n    # \u200b\u8fd0\u884c\u200b\u8c03\u5ea6\u200b\u5668\u200b\n    async with scheduler.run_context():\n        # \u200b\u5b9a\u671f\u200b\u6253\u5370\u200b\u6307\u6807\u200b\n        for _ in range(6):  # \u200b\u8fd0\u884c\u200b 1 \u200b\u5206\u949f\u200b\n            await asyncio.sleep(10)\n\n            metrics = scheduler.get_metrics()\n            print(f\"\\n=== \u200b\u6027\u80fd\u200b\u62a5\u544a\u200b ({metrics['uptime_seconds']:.0f}\u200b\u79d2\u200b) ===\")\n            print(f\"\u200b\u603b\u200b\u6267\u884c\u200b: {metrics['total_executions']}\")\n            print(f\"\u200b\u6210\u529f\u7387\u200b: {metrics['success_rate']:.1%}\")\n            print(f\"\u200b\u5e73\u5747\u200b\u65f6\u200b\u957f\u200b: {metrics['average_duration']:.3f}\u200b\u79d2\u200b\")\n\n            # \u200b\u5bfc\u51fa\u200b Prometheus \u200b\u6307\u6807\u200b\n            prometheus_text = scheduler.export_prometheus_metrics()\n            # \u200b\u53d1\u9001\u5230\u200b\u76d1\u63a7\u200b\u7cfb\u7edf\u200b...\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"guides/metrics/#_15","title":"\u4e0e\u200b\u5176\u4ed6\u200b\u76d1\u63a7\u200b\u7cfb\u7edf\u96c6\u6210","text":""},{"location":"guides/metrics/#statsd","title":"StatsD","text":"<p>\u200b\u867d\u7136\u200b\u76ee\u524d\u200b\u53ea\u200b\u5185\u7f6e\u200b\u4e86\u200b Prometheus \u200b\u683c\u5f0f\u200b\u5bfc\u51fa\u200b,\u200b\u4f46\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u5730\u200b\u5c06\u200b\u6307\u6807\u200b\u53d1\u9001\u5230\u200b StatsD:</p> <pre><code>import aiostatsysd\n\nasync def send_to_statsd(scheduler):\n    \"\"\"\u200b\u53d1\u9001\u200b\u6307\u6807\u200b\u5230\u200b StatsD\u3002\"\"\"\n    client = aiostatsysd.Client(\"localhost\", 8125)\n\n    metrics = scheduler.get_metrics()\n\n    # \u200b\u53d1\u9001\u200b\u8ba1\u6570\u5668\u200b\n    await client.counter(\"chronflow.executions.total\", metrics[\"total_executions\"])\n    await client.counter(\"chronflow.executions.success\", metrics[\"successful_executions\"])\n    await client.counter(\"chronflow.executions.failed\", metrics[\"failed_executions\"])\n\n    # \u200b\u53d1\u9001\u200b gauge\n    await client.gauge(\"chronflow.duration.avg\", metrics[\"average_duration\"])\n    await client.gauge(\"chronflow.success_rate\", metrics[\"success_rate\"] * 100)\n\n    await client.close()\n</code></pre>"},{"location":"guides/metrics/#_16","title":"\u81ea\u5b9a\u4e49\u200b\u5bfc\u51fa","text":"<p>\u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u81ea\u5df1\u200b\u7684\u200b\u6307\u6807\u200b\u5bfc\u51fa\u200b\u5668\u200b:</p> <pre><code>class CustomMetricsExporter:\n    \"\"\"\u200b\u81ea\u5b9a\u4e49\u200b\u6307\u6807\u200b\u5bfc\u51fa\u200b\u5668\u200b\u3002\"\"\"\n\n    def __init__(self, scheduler):\n        self.scheduler = scheduler\n\n    def export_json(self):\n        \"\"\"\u200b\u5bfc\u51fa\u200b JSON \u200b\u683c\u5f0f\u200b\u3002\"\"\"\n        import json\n        metrics = self.scheduler.get_metrics()\n        return json.dumps(metrics, indent=2)\n\n    def export_influxdb_line_protocol(self):\n        \"\"\"\u200b\u5bfc\u51fa\u200b InfluxDB \u200b\u884c\u200b\u534f\u8bae\u200b\u683c\u5f0f\u200b\u3002\"\"\"\n        metrics = self.scheduler.get_metrics()\n        lines = [\n            f\"chronflow,host=localhost executions={metrics['total_executions']}\",\n            f\"chronflow,host=localhost success_rate={metrics['success_rate']}\",\n            f\"chronflow,host=localhost avg_duration={metrics['average_duration']}\",\n        ]\n        return \"\\n\".join(lines)\n\n# \u200b\u4f7f\u7528\u200b\nexporter = CustomMetricsExporter(scheduler)\njson_metrics = exporter.export_json()\nprint(json_metrics)\n</code></pre>"},{"location":"guides/metrics/#_17","title":"\u4e0b\u200b\u4e00\u6b65","text":"<ul> <li>\u200b\u67e5\u770b\u200b \u200b\u793a\u4f8b\u200b\u4ee3\u7801\u200b</li> <li>\u200b\u4e86\u89e3\u200b \u200b\u65e5\u5fd7\u200b\u7cfb\u7edf\u200b</li> <li>\u200b\u4e86\u89e3\u200b \u200b\u76d1\u63a7\u200b\u4e0e\u200b\u7edf\u8ba1\u200b</li> </ul>"},{"location":"guides/monitoring/","title":"\u76d1\u63a7\u200b\u4e0e\u200b\u7edf\u8ba1","text":"<p>chronflow \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e30\u5bcc\u200b\u7684\u200b\u76d1\u63a7\u200b\u529f\u80fd\u200b\uff0c\u200b\u5e2e\u52a9\u200b\u4f60\u200b\u4e86\u89e3\u200b\u8c03\u5ea6\u200b\u5668\u200b\u548c\u200b\u4efb\u52a1\u200b\u7684\u200b\u8fd0\u884c\u200b\u72b6\u6001\u200b\u3002</p>"},{"location":"guides/monitoring/#_2","title":"\u83b7\u53d6\u200b\u8c03\u5ea6\u200b\u5668\u200b\u7edf\u8ba1\u200b\u4fe1\u606f","text":"<pre><code>from chronflow import Scheduler\n\nscheduler = Scheduler()\n\n# \u200b\u83b7\u53d6\u200b\u8c03\u5ea6\u200b\u5668\u200b\u7edf\u8ba1\u200b\nstats = await scheduler.get_stats()\nprint(stats)\n</code></pre> <p>\u200b\u8f93\u51fa\u200b\u793a\u4f8b\u200b\uff1a</p> <pre><code>{\n    \"running\": True,\n    \"total_tasks\": 10,\n    \"queue_size\": 5,\n    \"active_workers\": 8,\n    \"max_workers\": 10,\n    \"backend\": \"MemoryBackend\",\n    \"tasks\": [\n        {\n            \"name\": \"health_check\",\n            \"status\": \"running\",\n            \"total_runs\": 120,\n            \"successful_runs\": 118,\n            \"failed_runs\": 2,\n            \"success_rate\": 98.3,\n            \"avg_execution_time\": 0.5\n        },\n        # ... \u200b\u66f4\u200b\u591a\u4efb\u52a1\u200b\n    ]\n}\n</code></pre>"},{"location":"guides/monitoring/#_3","title":"\u4efb\u52a1\u200b\u5217\u8868","text":"<p>\u200b\u83b7\u53d6\u200b\u6240\u6709\u200b\u5df2\u200b\u6ce8\u518c\u200b\u7684\u200b\u4efb\u52a1\u200b\uff1a</p> <pre><code>tasks = scheduler.list_tasks()\n\nfor task in tasks:\n    print(f\"\u200b\u4efb\u52a1\u200b: {task['name']}\")\n    print(f\"\u200b\u72b6\u6001\u200b: {task['status']}\")\n    print(f\"\u200b\u6210\u529f\u7387\u200b: {task['success_rate']:.1f}%\")\n    print(f\"\u200b\u5e73\u5747\u200b\u6267\u884c\u200b\u65f6\u95f4\u200b: {task['avg_execution_time']:.2f}s\")\n    print(\"---\")\n</code></pre>"},{"location":"guides/monitoring/#_4","title":"\u4efb\u52a1\u200b\u8ba1\u6570","text":"<p>\u200b\u6309\u200b\u72b6\u6001\u200b\u7edf\u8ba1\u200b\u4efb\u52a1\u200b\u6570\u91cf\u200b\uff1a</p> <pre><code>counts = scheduler.get_task_count()\nprint(counts)\n</code></pre> <p>\u200b\u8f93\u51fa\u200b\uff1a</p> <pre><code>{\n    \"total\": 10,\n    \"pending\": 2,\n    \"running\": 3,\n    \"completed\": 4,\n    \"failed\": 1,\n    \"cancelled\": 0\n}\n</code></pre>"},{"location":"guides/monitoring/#_5","title":"\u83b7\u53d6\u200b\u5355\u4e2a\u200b\u4efb\u52a1","text":"<pre><code># \u200b\u6309\u200b\u540d\u79f0\u200b\u83b7\u53d6\u200b\u4efb\u52a1\u200b\ntask = scheduler.get_task(\"health_check\")\n\nif task:\n    print(f\"\u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b: {task.config.name}\")\n    print(f\"\u200b\u5f53\u524d\u200b\u72b6\u6001\u200b: {task.status}\")\n    print(f\"\u200b\u603b\u200b\u8fd0\u884c\u200b\u6b21\u6570\u200b: {task.metrics.total_runs}\")\n    print(f\"\u200b\u6210\u529f\u200b\u6b21\u6570\u200b: {task.metrics.successful_runs}\")\n    print(f\"\u200b\u5931\u8d25\u200b\u6b21\u6570\u200b: {task.metrics.failed_runs}\")\n    print(f\"\u200b\u5e73\u5747\u200b\u6267\u884c\u200b\u65f6\u95f4\u200b: {task.metrics.average_execution_time:.2f}s\")\n</code></pre>"},{"location":"guides/monitoring/#_6","title":"\u6309\u200b\u72b6\u6001\u200b\u7b5b\u9009\u200b\u4efb\u52a1","text":"<pre><code>from chronflow import TaskStatus\n\n# \u200b\u83b7\u53d6\u200b\u5931\u8d25\u200b\u7684\u200b\u4efb\u52a1\u200b\nfailed_tasks = scheduler.get_task_by_status(TaskStatus.FAILED)\n\nfor task in failed_tasks:\n    print(f\"\u200b\u5931\u8d25\u200b\u4efb\u52a1\u200b: {task.config.name}\")\n    print(f\"\u200b\u8fde\u7eed\u200b\u5931\u8d25\u200b\u6b21\u6570\u200b: {task.metrics.consecutive_failures}\")\n    print(f\"\u200b\u6700\u540e\u200b\u5931\u8d25\u200b\u65f6\u95f4\u200b: {task.metrics.last_failure_time}\")\n</code></pre>"},{"location":"guides/monitoring/#_7","title":"\u6309\u200b\u6807\u7b7e\u200b\u7b5b\u9009\u200b\u4efb\u52a1","text":"<pre><code># \u200b\u5b9a\u4e49\u200b\u5e26\u200b\u6807\u7b7e\u200b\u7684\u200b\u4efb\u52a1\u200b\n@interval(60, tags=[\"critical\", \"monitoring\"])\nasync def critical_task():\n    pass\n\n@interval(120, tags=[\"maintenance\"])\nasync def cleanup_task():\n    pass\n\n# \u200b\u83b7\u53d6\u200b\u5e26\u200b \"critical\" \u200b\u6807\u7b7e\u200b\u7684\u200b\u4efb\u52a1\u200b\ncritical_tasks = scheduler.get_task_by_tag(\"critical\")\n\nfor task in critical_tasks:\n    print(f\"\u200b\u5173\u952e\u200b\u4efb\u52a1\u200b: {task.config.name}\")\n</code></pre>"},{"location":"guides/monitoring/#_8","title":"\u4efb\u52a1\u200b\u63a7\u5236","text":""},{"location":"guides/monitoring/#_9","title":"\u6682\u505c\u200b\u4efb\u52a1","text":"<pre><code># \u200b\u6682\u505c\u200b\u4efb\u52a1\u200b\uff08\u200b\u7981\u7528\u200b\u8c03\u5ea6\u200b\uff09\nsuccess = await scheduler.pause_task(\"health_check\")\n\nif success:\n    print(\"\u200b\u4efb\u52a1\u200b\u5df2\u200b\u6682\u505c\u200b\")\n</code></pre>"},{"location":"guides/monitoring/#_10","title":"\u6062\u590d\u200b\u4efb\u52a1","text":"<pre><code># \u200b\u6062\u590d\u200b\u4efb\u52a1\u200b\uff08\u200b\u542f\u7528\u200b\u8c03\u5ea6\u200b\uff09\nsuccess = await scheduler.resume_task(\"health_check\")\n\nif success:\n    print(\"\u200b\u4efb\u52a1\u200b\u5df2\u200b\u6062\u590d\u200b\")\n</code></pre>"},{"location":"guides/monitoring/#_11","title":"\u5b9e\u65f6\u200b\u76d1\u63a7\u200b\u793a\u4f8b","text":"<p>\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u76d1\u63a7\u200b\u4eea\u8868\u677f\u200b\uff1a</p> <pre><code>import asyncio\nfrom chronflow import Scheduler, interval\n\nscheduler = Scheduler()\n\n@interval(5)  # \u200b\u6bcf\u200b5\u200b\u79d2\u200b\u76d1\u63a7\u200b\u4e00\u6b21\u200b\nasync def monitor_dashboard():\n    \"\"\"\u200b\u76d1\u63a7\u200b\u4eea\u8868\u677f\u200b\u4efb\u52a1\u200b\u3002\"\"\"\n    stats = await scheduler.get_stats()\n    counts = scheduler.get_task_count()\n\n    print(\"\\n\" + \"=\"*50)\n    print(f\"\u200b\u8c03\u5ea6\u200b\u5668\u200b\u72b6\u6001\u200b: {'\u200b\u8fd0\u884c\u200b\u4e2d\u200b' if stats['running'] else '\u200b\u5df2\u200b\u505c\u6b62\u200b'}\")\n    print(f\"\u200b\u961f\u5217\u200b\u5927\u5c0f\u200b: {stats['queue_size']}\")\n    print(f\"\u200b\u6d3b\u8dc3\u200b\u5de5\u4f5c\u200b\u534f\u7a0b\u200b: {stats['active_workers']}/{stats['max_workers']}\")\n    print(f\"\\n\u200b\u4efb\u52a1\u200b\u7edf\u8ba1\u200b:\")\n    print(f\"  \u200b\u603b\u8ba1\u200b: {counts['total']}\")\n    print(f\"  \u200b\u8fd0\u884c\u200b\u4e2d\u200b: {counts['running']}\")\n    print(f\"  \u200b\u5df2\u200b\u5b8c\u6210\u200b: {counts['completed']}\")\n    print(f\"  \u200b\u5931\u8d25\u200b: {counts['failed']}\")\n\n    # \u200b\u663e\u793a\u200b\u5931\u8d25\u200b\u4efb\u52a1\u200b\u8be6\u60c5\u200b\n    from chronflow import TaskStatus\n    failed = scheduler.get_task_by_status(TaskStatus.FAILED)\n    if failed:\n        print(f\"\\n\u200b\u5931\u8d25\u200b\u4efb\u52a1\u200b:\")\n        for task in failed:\n            print(f\"  - {task.config.name}: {task.metrics.consecutive_failures} \u200b\u6b21\u8fde\u7eed\u200b\u5931\u8d25\u200b\")\n    print(\"=\"*50)\n\nasync def main():\n    await scheduler.start()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"guides/monitoring/#_12","title":"\u4efb\u52a1\u200b\u6307\u6807\u200b\u8be6\u89e3","text":""},{"location":"guides/monitoring/#taskmetrics","title":"TaskMetrics \u200b\u6307\u6807\u200b\u8bf4\u660e","text":"<p>\u200b\u6bcf\u4e2a\u200b\u4efb\u52a1\u200b\u90fd\u200b\u6709\u200b\u4e00\u4e2a\u200b <code>TaskMetrics</code> \u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5305\u542b\u200b\u4ee5\u4e0b\u200b\u6307\u6807\u200b\uff1a</p> <ul> <li><code>total_runs</code>: \u200b\u603b\u200b\u8fd0\u884c\u200b\u6b21\u6570\u200b</li> <li><code>successful_runs</code>: \u200b\u6210\u529f\u200b\u6b21\u6570\u200b</li> <li><code>failed_runs</code>: \u200b\u5931\u8d25\u200b\u6b21\u6570\u200b</li> <li><code>total_execution_time</code>: \u200b\u603b\u200b\u6267\u884c\u200b\u65f6\u95f4\u200b\uff08\u200b\u79d2\u200b\uff09</li> <li><code>average_execution_time</code>: \u200b\u5e73\u5747\u200b\u6267\u884c\u200b\u65f6\u95f4\u200b\uff08\u200b\u79d2\u200b\uff09</li> <li><code>last_run_time</code>: \u200b\u6700\u540e\u200b\u4e00\u6b21\u200b\u8fd0\u884c\u200b\u65f6\u95f4\u200b\uff08\u200b\u79d2\u200b\uff09</li> <li><code>last_success_time</code>: \u200b\u6700\u540e\u200b\u4e00\u6b21\u200b\u6210\u529f\u200b\u65f6\u95f4\u200b\uff08\u200b\u79d2\u200b\uff09</li> <li><code>last_failure_time</code>: \u200b\u6700\u540e\u200b\u4e00\u6b21\u200b\u5931\u8d25\u200b\u65f6\u95f4\u200b\uff08\u200b\u79d2\u200b\uff09</li> <li><code>consecutive_failures</code>: \u200b\u8fde\u7eed\u200b\u5931\u8d25\u200b\u6b21\u6570\u200b</li> <li><code>last_error</code>: \u200b\u6700\u540e\u200b\u4e00\u6b21\u200b\u9519\u8bef\u4fe1\u606f\u200b</li> </ul> <pre><code>task = scheduler.get_task(\"my_task\")\nmetrics = task.metrics\n\n# \u200b\u8ba1\u7b97\u200b\u6210\u529f\u7387\u200b\nsuccess_rate = (metrics.successful_runs / metrics.total_runs * 100\n                if metrics.total_runs &gt; 0 else 0.0)\n\nprint(f\"\u200b\u6210\u529f\u7387\u200b: {success_rate:.1f}%\")\nprint(f\"\u200b\u5e73\u5747\u200b\u6267\u884c\u200b\u65f6\u95f4\u200b: {metrics.average_execution_time:.2f}s\")\nprint(f\"\u200b\u8fde\u7eed\u200b\u5931\u8d25\u200b: {metrics.consecutive_failures} \u200b\u6b21\u200b\")\n</code></pre>"},{"location":"guides/monitoring/#_13","title":"\u96c6\u6210\u200b\u5230\u200b\u76d1\u63a7\u200b\u7cfb\u7edf","text":""},{"location":"guides/monitoring/#prometheus","title":"Prometheus \u200b\u96c6\u6210\u200b\u793a\u4f8b","text":"<pre><code>from prometheus_client import Gauge, Counter, Histogram\nfrom chronflow import Scheduler, interval\n\n# \u200b\u5b9a\u4e49\u200b Prometheus \u200b\u6307\u6807\u200b\ntask_total = Counter('chronflow_task_total', 'Total tasks', ['task_name'])\ntask_success = Counter('chronflow_task_success', 'Successful tasks', ['task_name'])\ntask_failure = Counter('chronflow_task_failure', 'Failed tasks', ['task_name'])\ntask_duration = Histogram('chronflow_task_duration_seconds', 'Task duration', ['task_name'])\n\nscheduler = Scheduler()\n\n@interval(30)  # \u200b\u6bcf\u200b30\u200b\u79d2\u200b\u66f4\u65b0\u200b\u6307\u6807\u200b\nasync def update_metrics():\n    \"\"\"\u200b\u66f4\u65b0\u200b Prometheus \u200b\u6307\u6807\u200b\u3002\"\"\"\n    tasks = scheduler.list_tasks()\n\n    for task_info in tasks:\n        task = scheduler.get_task(task_info['name'])\n        metrics = task.metrics\n\n        task_total.labels(task_name=task.config.name).inc(metrics.total_runs)\n        task_success.labels(task_name=task.config.name).inc(metrics.successful_runs)\n        task_failure.labels(task_name=task.config.name).inc(metrics.failed_runs)\n\n        if metrics.last_run_time:\n            task_duration.labels(task_name=task.config.name).observe(metrics.last_run_time)\n</code></pre>"},{"location":"guides/monitoring/#_14","title":"\u544a\u8b66\u200b\u914d\u7f6e","text":"<p>\u200b\u57fa\u4e8e\u200b\u6307\u6807\u200b\u8bbe\u7f6e\u200b\u544a\u8b66\u200b\uff1a</p> <pre><code>from chronflow import Scheduler, interval, TaskStatus\n\nscheduler = Scheduler()\n\n@interval(60)  # \u200b\u6bcf\u5206\u949f\u200b\u68c0\u67e5\u200b\u4e00\u6b21\u200b\nasync def check_alerts():\n    \"\"\"\u200b\u68c0\u67e5\u200b\u544a\u8b66\u200b\u6761\u4ef6\u200b\u3002\"\"\"\n    tasks = scheduler.list_tasks()\n\n    for task_info in tasks:\n        task = scheduler.get_task(task_info['name'])\n        metrics = task.metrics\n\n        # \u200b\u544a\u8b66\u200b\u6761\u4ef6\u200b1: \u200b\u8fde\u7eed\u200b\u5931\u8d25\u200b\u8d85\u8fc7\u200b3\u200b\u6b21\u200b\n        if metrics.consecutive_failures &gt;= 3:\n            await send_alert(\n                f\"\u200b\u4efb\u52a1\u200b {task.config.name} \u200b\u8fde\u7eed\u200b\u5931\u8d25\u200b {metrics.consecutive_failures} \u200b\u6b21\u200b\"\n            )\n\n        # \u200b\u544a\u8b66\u200b\u6761\u4ef6\u200b2: \u200b\u5e73\u5747\u200b\u6267\u884c\u200b\u65f6\u95f4\u200b\u8d85\u8fc7\u200b\u9608\u503c\u200b\n        if metrics.average_execution_time &gt; 30.0:\n            await send_alert(\n                f\"\u200b\u4efb\u52a1\u200b {task.config.name} \u200b\u6267\u884c\u200b\u65f6\u95f4\u200b\u8fc7\u957f\u200b: {metrics.average_execution_time:.2f}s\"\n            )\n\n        # \u200b\u544a\u8b66\u200b\u6761\u4ef6\u200b3: \u200b\u6210\u529f\u7387\u200b\u4f4e\u4e8e\u200b90%\n        if metrics.total_runs &gt; 10:\n            success_rate = metrics.successful_runs / metrics.total_runs\n            if success_rate &lt; 0.9:\n                await send_alert(\n                    f\"\u200b\u4efb\u52a1\u200b {task.config.name} \u200b\u6210\u529f\u7387\u200b\u8fc7\u4f4e\u200b: {success_rate*100:.1f}%\"\n                )\n\nasync def send_alert(message: str):\n    \"\"\"\u200b\u53d1\u9001\u200b\u544a\u8b66\u200b\uff08\u200b\u793a\u4f8b\u200b\uff09\u3002\"\"\"\n    print(f\"\u26a0\ufe0f  \u200b\u544a\u8b66\u200b: {message}\")\n    # \u200b\u5b9e\u9645\u200b\u573a\u666f\u200b\u53ef\u4ee5\u200b\u53d1\u9001\u200b\u90ae\u4ef6\u200b\u3001\u200b\u77ed\u4fe1\u200b\u3001\u200b\u9489\u200b\u9489\u200b\u6d88\u606f\u200b\u7b49\u200b\n</code></pre>"},{"location":"guides/task_discovery/","title":"\u4efb\u52a1\u200b\u81ea\u52a8\u200b\u53d1\u73b0","text":"<p>chronflow \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u5f3a\u5927\u200b\u7684\u200b\u4efb\u52a1\u200b\u81ea\u52a8\u200b\u53d1\u73b0\u200b\u673a\u5236\u200b,\u200b\u53ef\u4ee5\u200b\u81ea\u52a8\u200b\u626b\u63cf\u200b\u9879\u76ee\u200b\u76ee\u5f55\u200b\u6216\u5305\u200b,\u200b\u53d1\u73b0\u200b\u5e76\u200b\u6ce8\u518c\u200b\u4f7f\u7528\u200b\u88c5\u9970\u200b\u5668\u200b\u5b9a\u4e49\u200b\u7684\u200b\u5b9a\u65f6\u200b\u4efb\u52a1\u200b,\u200b\u6781\u5927\u200b\u7b80\u5316\u200b\u9879\u76ee\u200b\u96c6\u6210\u200b\u6d41\u7a0b\u200b\u3002</p>"},{"location":"guides/task_discovery/#_2","title":"\u529f\u80fd\u200b\u7279\u6027","text":"<ul> <li>\u2705 \u200b\u6309\u200b\u76ee\u5f55\u200b\u626b\u63cf\u200b - \u200b\u81ea\u52a8\u200b\u626b\u63cf\u200b\u6307\u5b9a\u200b\u76ee\u5f55\u200b\u4e0b\u200b\u7684\u200b Python \u200b\u6587\u4ef6\u200b</li> <li>\u2705 \u200b\u6309\u5305\u200b\u5bfc\u5165\u200b - \u200b\u4ece\u200b\u5df2\u200b\u5b89\u88c5\u200b\u7684\u200b Python \u200b\u5305\u4e2d\u200b\u53d1\u73b0\u200b\u4efb\u52a1\u200b</li> <li>\u2705 \u200b\u81ea\u5b9a\u4e49\u200b\u6a21\u5f0f\u200b - \u200b\u652f\u6301\u200b\u901a\u914d\u7b26\u200b\u6587\u4ef6\u540d\u200b\u5339\u914d\u200b (<code>task.py</code>, <code>*_tasks.py</code> \u200b\u7b49\u200b)</li> <li>\u2705 \u200b\u9012\u5f52\u200b\u626b\u63cf\u200b - \u200b\u652f\u6301\u200b\u9012\u5f52\u200b\u626b\u63cf\u200b\u5b50\u76ee\u5f55\u200b</li> <li>\u2705 \u200b\u7075\u6d3b\u200b\u8fc7\u6ee4\u200b - \u200b\u652f\u6301\u200b\u6392\u9664\u200b\u7279\u5b9a\u200b\u6587\u4ef6\u200b\u6216\u200b\u6a21\u5f0f\u200b</li> <li>\u2705 \u200b\u81ea\u52a8\u200b\u6ce8\u518c\u200b - \u200b\u53d1\u73b0\u200b\u7684\u200b\u4efb\u52a1\u200b\u81ea\u52a8\u200b\u6ce8\u518c\u200b\u5230\u200b\u8c03\u5ea6\u200b\u5668\u200b</li> <li>\u2705 \u200b\u9519\u8bef\u200b\u5bb9\u9519\u200b - \u200b\u5bfc\u5165\u200b\u5931\u8d25\u200b\u7684\u200b\u6a21\u5757\u200b\u4f1a\u200b\u88ab\u200b\u8df3\u200b\u8fc7\u200b,\u200b\u4e0d\u200b\u5f71\u54cd\u200b\u5176\u4ed6\u200b\u4efb\u52a1\u200b</li> </ul>"},{"location":"guides/task_discovery/#_3","title":"\u57fa\u7840\u200b\u7528\u6cd5","text":""},{"location":"guides/task_discovery/#_4","title":"\u4ece\u200b\u76ee\u5f55\u200b\u53d1\u73b0\u200b\u4efb\u52a1","text":"<p>\u200b\u9002\u5408\u200b\u6309\u200b\u6a21\u5757\u200b\u7ec4\u7ec7\u200b\u7684\u200b\u9879\u76ee\u200b\u7ed3\u6784\u200b:</p> <pre><code>from chronflow import Scheduler\n\nscheduler = Scheduler()\n\n# \u200b\u626b\u63cf\u200b\u76ee\u5f55\u200b\u4e0b\u200b\u6240\u6709\u200b task.py \u200b\u6587\u4ef6\u200b\ntasks = scheduler.discover_tasks_from_directory(\"app/modules\")\n\n# \u200b\u53d1\u73b0\u200b\u7684\u200b\u4efb\u52a1\u200b\u5df2\u200b\u81ea\u52a8\u200b\u6ce8\u518c\u200b\u5230\u200b\u8c03\u5ea6\u200b\u5668\u200b\nprint(f\"\u200b\u53d1\u73b0\u200b {len(tasks)} \u200b\u4e2a\u200b\u4efb\u52a1\u200b\")\n</code></pre>"},{"location":"guides/task_discovery/#_5","title":"\u4f7f\u7528\u200b\u81ea\u5b9a\u4e49\u200b\u6587\u4ef6\u540d\u200b\u6a21\u5f0f","text":"<pre><code># \u200b\u626b\u63cf\u200b\u6240\u6709\u200b *_tasks.py \u200b\u6587\u4ef6\u200b\ntasks = scheduler.discover_tasks_from_directory(\n    \"app\",\n    pattern=\"*_tasks.py\",\n    exclude_patterns=[\"test_*.py\", \"*_backup.py\"]\n)\n</code></pre>"},{"location":"guides/task_discovery/#_6","title":"\u4ece\u200b\u5305\u4e2d\u200b\u53d1\u73b0\u200b\u4efb\u52a1","text":"<p>\u200b\u9002\u5408\u200b\u4ece\u200b\u5df2\u200b\u5b89\u88c5\u200b\u7684\u200b Python \u200b\u5305\u4e2d\u200b\u53d1\u73b0\u200b\u4efb\u52a1\u200b:</p> <pre><code># \u200b\u4ece\u5305\u200b\u53ca\u5176\u200b\u5b50\u200b\u5305\u4e2d\u200b\u53d1\u73b0\u200b\u4efb\u52a1\u200b\ntasks = scheduler.discover_tasks_from_package(\"my_app.tasks\")\n</code></pre>"},{"location":"guides/task_discovery/#_7","title":"\u4ece\u200b\u6307\u5b9a\u200b\u6a21\u5757\u200b\u5217\u8868\u200b\u5bfc\u5165","text":"<p>\u200b\u9002\u5408\u200b\u7cbe\u786e\u200b\u63a7\u5236\u200b\u8981\u200b\u52a0\u8f7d\u200b\u7684\u200b\u6a21\u5757\u200b:</p> <pre><code>tasks = scheduler.discover_tasks_from_modules([\n    \"my_app.tasks.user_tasks\",\n    \"my_app.tasks.email_tasks\",\n    \"my_app.tasks.report_tasks\",\n])\n</code></pre>"},{"location":"guides/task_discovery/#_8","title":"\u5b9e\u9645\u200b\u9879\u76ee\u200b\u793a\u4f8b","text":""},{"location":"guides/task_discovery/#_9","title":"\u9879\u76ee\u200b\u7ed3\u6784","text":"<pre><code>my_project/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u2514\u2500\u2500 modules/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 user/\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u251c\u2500\u2500 task.py      # \u200b\u7528\u6237\u200b\u6a21\u5757\u200b\u5b9a\u65f6\u200b\u4efb\u52a1\u200b\n\u2502       \u2502   \u2514\u2500\u2500 service.py\n\u2502       \u251c\u2500\u2500 email/\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u251c\u2500\u2500 task.py      # \u200b\u90ae\u4ef6\u200b\u6a21\u5757\u200b\u5b9a\u65f6\u200b\u4efb\u52a1\u200b\n\u2502       \u2502   \u2514\u2500\u2500 service.py\n\u2502       \u2514\u2500\u2500 analytics/\n\u2502           \u251c\u2500\u2500 __init__.py\n\u2502           \u251c\u2500\u2500 task.py      # \u200b\u5206\u6790\u200b\u6a21\u5757\u200b\u5b9a\u65f6\u200b\u4efb\u52a1\u200b\n\u2502           \u2514\u2500\u2500 service.py\n</code></pre>"},{"location":"guides/task_discovery/#_10","title":"\u4efb\u52a1\u200b\u5b9a\u4e49\u200b\u793a\u4f8b","text":"<p>app/modules/user/task.py:</p> <pre><code>from chronflow import daily, cron\n\n@daily(hour=2, minute=0)\nasync def cleanup_inactive_users():\n    \"\"\"\u200b\u6bcf\u5929\u200b\u51cc\u6668\u200b 2 \u200b\u70b9\u200b\u6e05\u7406\u200b\u4e0d\u200b\u6d3b\u8dc3\u200b\u7528\u6237\u200b\u3002\"\"\"\n    # \u200b\u4e1a\u52a1\u200b\u903b\u8f91\u200b\n    pass\n\n@cron(\"0 */15 * * * *\")\nasync def sync_user_profiles():\n    \"\"\"\u200b\u6bcf\u200b 15 \u200b\u5206\u949f\u200b\u540c\u6b65\u200b\u7528\u6237\u200b\u8d44\u6599\u200b\u3002\"\"\"\n    # \u200b\u4e1a\u52a1\u200b\u903b\u8f91\u200b\n    pass\n</code></pre> <p>app/modules/email/task.py:</p> <pre><code>from chronflow import interval, every\n\n@interval(60)\nasync def send_pending_emails():\n    \"\"\"\u200b\u6bcf\u5206\u949f\u200b\u53d1\u9001\u200b\u5f85\u53d1\u200b\u90ae\u4ef6\u200b\u3002\"\"\"\n    # \u200b\u4e1a\u52a1\u200b\u903b\u8f91\u200b\n    pass\n\n@every(hours=1)\nasync def cleanup_email_queue():\n    \"\"\"\u200b\u6bcf\u200b\u5c0f\u65f6\u200b\u6e05\u7406\u200b\u90ae\u4ef6\u200b\u961f\u5217\u200b\u3002\"\"\"\n    # \u200b\u4e1a\u52a1\u200b\u903b\u8f91\u200b\n    pass\n</code></pre>"},{"location":"guides/task_discovery/#_11","title":"\u4e3b\u7a0b\u5e8f\u200b\u96c6\u6210","text":"<p>app/main.py:</p> <pre><code>import asyncio\nfrom chronflow import Scheduler, SchedulerConfig\n\nasync def main():\n    # \u200b\u521d\u59cb\u5316\u200b\u8c03\u5ea6\u200b\u5668\u200b\n    config = SchedulerConfig(\n        max_workers=10,\n        enable_logging=True,\n    )\n    scheduler = Scheduler(config=config)\n\n    # \u200b\u81ea\u52a8\u200b\u53d1\u73b0\u200b\u5e76\u200b\u6ce8\u518c\u200b\u6240\u6709\u200b\u6a21\u5757\u200b\u7684\u200b\u4efb\u52a1\u200b\n    tasks = scheduler.discover_tasks_from_directory(\n        \"app/modules\",\n        pattern=\"task.py\",\n        recursive=True,\n    )\n\n    print(f\"\u200b\u5df2\u200b\u6ce8\u518c\u200b {len(tasks)} \u200b\u4e2a\u200b\u5b9a\u65f6\u200b\u4efb\u52a1\u200b\")\n\n    # \u200b\u542f\u52a8\u200b\u8c03\u5ea6\u200b\u5668\u200b\n    await scheduler.start()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"guides/task_discovery/#_12","title":"\u9ad8\u7ea7\u200b\u7528\u6cd5","text":""},{"location":"guides/task_discovery/#_13","title":"\u6392\u9664\u200b\u7279\u5b9a\u200b\u6587\u4ef6","text":"<pre><code># \u200b\u6392\u9664\u200b\u6d4b\u8bd5\u200b\u6587\u4ef6\u200b\u548c\u200b\u5907\u4efd\u6587\u4ef6\u200b\ntasks = scheduler.discover_tasks_from_directory(\n    \"app\",\n    pattern=\"*.py\",\n    exclude_patterns=[\n        \"test_*.py\",      # \u200b\u6d4b\u8bd5\u200b\u6587\u4ef6\u200b\n        \"*_backup.py\",    # \u200b\u5907\u4efd\u6587\u4ef6\u200b\n        \"__init__.py\",    # \u200b\u521d\u59cb\u5316\u200b\u6587\u4ef6\u200b\n    ]\n)\n</code></pre>"},{"location":"guides/task_discovery/#_14","title":"\u975e\u200b\u9012\u5f52\u200b\u626b\u63cf","text":"<pre><code># \u200b\u53ea\u200b\u626b\u63cf\u200b\u5f53\u524d\u76ee\u5f55\u200b,\u200b\u4e0d\u200b\u626b\u63cf\u200b\u5b50\u76ee\u5f55\u200b\ntasks = scheduler.discover_tasks_from_directory(\n    \"app/tasks\",\n    recursive=False\n)\n</code></pre>"},{"location":"guides/task_discovery/#taskdiscovery","title":"\u4f7f\u7528\u200b TaskDiscovery \u200b\u7c7b","text":"<p>\u200b\u5982\u679c\u200b\u9700\u8981\u200b\u66f4\u200b\u591a\u200b\u63a7\u5236\u200b,\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u4f7f\u7528\u200b <code>TaskDiscovery</code> \u200b\u7c7b\u200b:</p> <pre><code>from chronflow import Scheduler, TaskDiscovery\n\nscheduler = Scheduler()\ndiscovery = TaskDiscovery(scheduler)\n\n# \u200b\u53d1\u73b0\u200b\u4efb\u52a1\u200b\u4f46\u200b\u4e0d\u200b\u81ea\u52a8\u200b\u6ce8\u518c\u200b\ntasks = discovery.discover_from_directory(\n    \"app/modules\",\n    auto_register=False\n)\n\n# \u200b\u624b\u52a8\u200b\u8fc7\u6ee4\u200b\u548c\u200b\u6ce8\u518c\u200b\nfor task in tasks:\n    if task.config.enabled:\n        scheduler.register_task(task)\n\n# \u200b\u83b7\u53d6\u200b\u6240\u6709\u200b\u5df2\u200b\u53d1\u73b0\u200b\u7684\u200b\u4efb\u52a1\u200b\nall_discovered = discovery.get_discovered_tasks()\n</code></pre>"},{"location":"guides/task_discovery/#_15","title":"\u6587\u4ef6\u540d\u200b\u6a21\u5f0f","text":"<p>\u200b\u652f\u6301\u200b\u7684\u200b\u901a\u914d\u7b26\u200b: - <code>*</code> - \u200b\u5339\u914d\u200b\u4efb\u610f\u200b\u6570\u91cf\u200b\u7684\u200b\u5b57\u7b26\u200b - <code>?</code> - \u200b\u5339\u914d\u200b\u5355\u4e2a\u200b\u5b57\u7b26\u200b</p> <p>\u200b\u793a\u4f8b\u200b: - <code>task.py</code> - \u200b\u7cbe\u786e\u200b\u5339\u914d\u200b - <code>*_task.py</code> - \u200b\u5339\u914d\u200b <code>user_task.py</code>, <code>email_task.py</code> \u200b\u7b49\u200b - <code>task*.py</code> - \u200b\u5339\u914d\u200b <code>task.py</code>, <code>tasks.py</code>, <code>task_user.py</code> \u200b\u7b49\u200b - <code>*.py</code> - \u200b\u5339\u914d\u200b\u6240\u6709\u200b Python \u200b\u6587\u4ef6\u200b</p>"},{"location":"guides/task_discovery/#_16","title":"\u6700\u4f73\u200b\u5b9e\u8df5","text":""},{"location":"guides/task_discovery/#1","title":"1. \u200b\u7ea6\u5b9a\u200b\u4f18\u4e8e\u200b\u914d\u7f6e","text":"<p>\u200b\u5efa\u7acb\u200b\u7edf\u4e00\u200b\u7684\u200b\u6587\u4ef6\u200b\u547d\u540d\u200b\u7ea6\u5b9a\u200b:</p> <pre><code># \u200b\u63a8\u8350\u200b: \u200b\u4f7f\u7528\u200b\u7edf\u4e00\u200b\u7684\u200b\u6587\u4ef6\u540d\u200b\n# modules/user/task.py\n# modules/email/task.py\n# modules/report/task.py\n\nscheduler.discover_tasks_from_directory(\"modules\", pattern=\"task.py\")\n</code></pre>"},{"location":"guides/task_discovery/#2","title":"2. \u200b\u6a21\u5757\u5316\u200b\u7ec4\u7ec7","text":"<p>\u200b\u6309\u200b\u4e1a\u52a1\u200b\u6a21\u5757\u200b\u7ec4\u7ec7\u200b\u4efb\u52a1\u200b:</p> <pre><code>app/\n\u251c\u2500\u2500 modules/\n\u2502   \u251c\u2500\u2500 user/\n\u2502   \u2502   \u2514\u2500\u2500 task.py      # \u200b\u7528\u6237\u200b\u76f8\u5173\u200b\u4efb\u52a1\u200b\n\u2502   \u251c\u2500\u2500 email/\n\u2502   \u2502   \u2514\u2500\u2500 task.py      # \u200b\u90ae\u4ef6\u200b\u76f8\u5173\u200b\u4efb\u52a1\u200b\n\u2502   \u2514\u2500\u2500 report/\n\u2502       \u2514\u2500\u2500 task.py      # \u200b\u62a5\u8868\u200b\u76f8\u5173\u200b\u4efb\u52a1\u200b\n</code></pre>"},{"location":"guides/task_discovery/#3","title":"3. \u200b\u4f7f\u7528\u200b\u6709\u200b\u610f\u4e49\u200b\u7684\u200b\u4efb\u52a1\u200b\u540d","text":"<p>\u200b\u88c5\u9970\u200b\u5668\u4f1a\u200b\u4f7f\u7528\u200b\u51fd\u6570\u200b\u540d\u200b\u4f5c\u4e3a\u200b\u4efb\u52a1\u200b\u540d\u200b,\u200b\u786e\u4fdd\u200b\u547d\u540d\u200b\u6e05\u6670\u200b:</p> <pre><code># \u2705 \u200b\u597d\u200b\u7684\u200b\u547d\u540d\u200b\n@daily(hour=2)\nasync def cleanup_inactive_users():\n    pass\n\n# \u274c \u200b\u4e0d\u597d\u200b\u7684\u200b\u547d\u540d\u200b\n@daily(hour=2)\nasync def task1():\n    pass\n</code></pre>"},{"location":"guides/task_discovery/#4","title":"4. \u200b\u9519\u8bef\u5904\u7406","text":"<p>\u200b\u4efb\u52a1\u200b\u53d1\u73b0\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u8df3\u8fc7\u200b\u5bfc\u5165\u200b\u5931\u8d25\u200b\u7684\u200b\u6a21\u5757\u200b,\u200b\u4f46\u200b\u5e94\u8be5\u200b\u68c0\u67e5\u200b\u65e5\u5fd7\u200b:</p> <pre><code>import logging\n\nlogging.basicConfig(level=logging.WARNING)\n\ntasks = scheduler.discover_tasks_from_directory(\"app/modules\")\n\n# \u200b\u68c0\u67e5\u200b\u662f\u5426\u200b\u6240\u6709\u200b\u9884\u671f\u200b\u7684\u200b\u4efb\u52a1\u200b\u90fd\u200b\u88ab\u200b\u53d1\u73b0\u200b\nexpected_count = 10\nif len(tasks) &lt; expected_count:\n    logging.warning(f\"\u200b\u9884\u671f\u200b {expected_count} \u200b\u4e2a\u200b\u4efb\u52a1\u200b,\u200b\u5b9e\u9645\u200b\u53d1\u73b0\u200b {len(tasks)} \u200b\u4e2a\u200b\")\n</code></pre>"},{"location":"guides/task_discovery/#5","title":"5. \u200b\u6d4b\u8bd5\u73af\u5883\u200b\u6392\u9664","text":"<p>\u200b\u5728\u200b\u6d4b\u8bd5\u73af\u5883\u200b\u4e2d\u200b\u6392\u9664\u200b\u67d0\u4e9b\u200b\u4efb\u52a1\u200b:</p> <pre><code>import os\n\nexclude = [\"*_prod.py\"] if os.getenv(\"ENV\") == \"test\" else []\n\ntasks = scheduler.discover_tasks_from_directory(\n    \"app/modules\",\n    exclude_patterns=exclude\n)\n</code></pre>"},{"location":"guides/task_discovery/#_17","title":"\u4e0e\u200b\u4f20\u7edf\u200b\u65b9\u5f0f\u200b\u5bf9\u6bd4","text":""},{"location":"guides/task_discovery/#_18","title":"\u4f20\u7edf\u200b\u65b9\u5f0f","text":"<pre><code>from chronflow import Scheduler\nfrom app.tasks.user_tasks import cleanup_users, sync_users\nfrom app.tasks.email_tasks import send_emails, cleanup_emails\nfrom app.tasks.report_tasks import daily_report, weekly_report\n\nscheduler = Scheduler()\n# \u200b\u9700\u8981\u200b\u624b\u52a8\u200b\u5bfc\u5165\u200b\u548c\u200b\u6ce8\u518c\u200b\u6bcf\u4e2a\u200b\u4efb\u52a1\u200b...\n</code></pre>"},{"location":"guides/task_discovery/#_19","title":"\u4f7f\u7528\u200b\u81ea\u52a8\u200b\u53d1\u73b0","text":"<pre><code>from chronflow import Scheduler\n\nscheduler = Scheduler()\n\n# \u200b\u4e00\u884c\u200b\u4ee3\u7801\u200b\u5b8c\u6210\u200b\u6240\u6709\u200b\u4efb\u52a1\u200b\u7684\u200b\u53d1\u73b0\u200b\u548c\u200b\u6ce8\u518c\u200b\nscheduler.discover_tasks_from_directory(\"app/tasks\")\n</code></pre>"},{"location":"guides/task_discovery/#_20","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li>\u200b\u5bfc\u5165\u200b\u526f\u4f5c\u7528\u200b - \u200b\u53d1\u73b0\u200b\u4efb\u52a1\u200b\u65f6\u4f1a\u200b\u5bfc\u5165\u200b\u6a21\u5757\u200b,\u200b\u53ef\u80fd\u200b\u89e6\u53d1\u200b\u6a21\u5757\u200b\u7ea7\u200b\u4ee3\u7801\u6267\u884c\u200b</li> <li>\u200b\u547d\u540d\u200b\u51b2\u7a81\u200b - \u200b\u786e\u4fdd\u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b\u552f\u4e00\u200b,\u200b\u91cd\u590d\u200b\u7684\u200b\u4efb\u52a1\u200b\u540d\u4f1a\u200b\u88ab\u200b\u8df3\u200b\u8fc7\u200b</li> <li>\u200b\u5faa\u73af\u200b\u5bfc\u5165\u200b - \u200b\u907f\u514d\u200b\u5728\u200b\u4efb\u52a1\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u521b\u5efa\u200b\u5faa\u73af\u200b\u5bfc\u5165\u200b</li> <li>\u200b\u6027\u80fd\u200b\u5f71\u54cd\u200b - \u200b\u5927\u91cf\u6587\u4ef6\u200b\u626b\u63cf\u200b\u53ef\u80fd\u200b\u5f71\u54cd\u200b\u542f\u52a8\u200b\u65f6\u95f4\u200b,\u200b\u5efa\u8bae\u200b\u5728\u200b\u5e94\u7528\u200b\u542f\u52a8\u200b\u65f6\u200b\u6267\u884c\u200b\u4e00\u6b21\u200b</li> </ol>"},{"location":"guides/task_discovery/#_21","title":"\u5b8c\u6574\u200b\u793a\u4f8b","text":"<p>\u200b\u67e5\u770b\u200b <code>examples/task_discovery_example.py</code> \u200b\u548c\u200b <code>examples/project_integration_example.py</code> \u200b\u83b7\u53d6\u200b\u5b8c\u6574\u200b\u7684\u200b\u53ef\u200b\u8fd0\u884c\u200b\u793a\u4f8b\u200b\u3002</p>"},{"location":"guides/task_discovery/#_22","title":"\u76f8\u5173\u200b\u6587\u6863","text":"<ul> <li>\u200b\u5feb\u901f\u200b\u5f00\u59cb\u200b</li> <li>\u200b\u88c5\u9970\u200b\u5668\u200b API</li> <li>\u200b\u4efb\u52a1\u200b\u914d\u7f6e\u200b</li> </ul>"}]}